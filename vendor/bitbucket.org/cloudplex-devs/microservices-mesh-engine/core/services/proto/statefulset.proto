syntax = "proto3";
package proto;

import "general.proto";
import "service.proto";
import "volume.proto";
import "persistentvolumeclaim.proto";

service StatefulSet {
    rpc CreateStatefulSet (StatefulSetService) returns (ServiceResponse) {}
    rpc DeleteStatefulSet  (StatefulSetService) returns (ServiceResponse) {}
    rpc GetStatefulSet (StatefulSetService) returns (ServiceResponse) {}
    rpc PatchStatefulSet  (StatefulSetService) returns (ServiceResponse) {}
    rpc PutStatefulSet (StatefulSetService) returns (ServiceResponse) {}
}

message StatefulSetService {
    string application_id = 1;
    string service_id = 2;
    string name = 3;
    string version = 4;
    string service_type = 5;
    string service_sub_type = 6;
    string namespace = 7;
    string token = 8;
    string company_id = 9;
    bool   is_discovered = 10;
    string infra_id = 11;
    StatefulSetServiceAttributes service_attributes = 12;
    HookConfiguration hook_configuration=13;
}

message StatefulSetServiceAttributes {
    map<string, string> labels = 1;
    map<string, string> annotations = 2;
    LabelSelectorObj label_selector = 3;
    int32 replicas = 4;
    RevisionHistoryLimit revision_history_limit = 5;
    StateFulSetUpdateStrategy update_strategy = 6;
    repeated  ContainerAttributes containers = 7;
    repeated ContainerAttributes init_containers = 8;
    map<string, string> node_selector = 9;
    IstioConfig istio_config = 10;
    bool is_rbac_enabled = 11;
    repeated K8sRbacAttribute roles= 12;
    repeated IstioRbacAttribute istio_roles = 13;
    repeated Volume volumes = 14;
    Affinity affinity = 15;
    string service_name = 16;
    TerminationGracePeriodSeconds termination_grace_period_seconds = 17;
    repeated PersistentVolumeClaimService volume_claim_templates = 18;
    PodManagementPolicyType pod_management_policy = 19;
}

enum PodManagementPolicyType
{

    OrderedReady = 0;
    Parallel = 1;
}