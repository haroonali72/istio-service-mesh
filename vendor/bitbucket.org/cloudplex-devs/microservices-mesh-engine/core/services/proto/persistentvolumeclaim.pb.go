// Code generated by protoc-gen-go. DO NOT EDIT.
// source: persistentvolumeclaim.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PersistentVolumeClaimService struct {
	ProjectId            string                           `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ServiceId            string                           `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name                 string                           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version              string                           `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	ServiceType          string                           `protobuf:"bytes,5,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	ServiceSubType       string                           `protobuf:"bytes,6,opt,name=service_sub_type,json=serviceSubType,proto3" json:"service_sub_type,omitempty"`
	Token                string                           `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	CompanyId            string                           `protobuf:"bytes,8,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ServiceAttributes    *PersistentVolumeClaimAttributes `protobuf:"bytes,9,opt,name=service_attributes,json=serviceAttributes,proto3" json:"service_attributes,omitempty"`
	Namespace            string                           `protobuf:"bytes,10,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PersistentVolumeClaimService) Reset()         { *m = PersistentVolumeClaimService{} }
func (m *PersistentVolumeClaimService) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeClaimService) ProtoMessage()    {}
func (*PersistentVolumeClaimService) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7059372f66a661, []int{0}
}

func (m *PersistentVolumeClaimService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersistentVolumeClaimService.Unmarshal(m, b)
}
func (m *PersistentVolumeClaimService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersistentVolumeClaimService.Marshal(b, m, deterministic)
}
func (m *PersistentVolumeClaimService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeClaimService.Merge(m, src)
}
func (m *PersistentVolumeClaimService) XXX_Size() int {
	return xxx_messageInfo_PersistentVolumeClaimService.Size(m)
}
func (m *PersistentVolumeClaimService) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeClaimService.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeClaimService proto.InternalMessageInfo

func (m *PersistentVolumeClaimService) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *PersistentVolumeClaimService) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *PersistentVolumeClaimService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PersistentVolumeClaimService) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PersistentVolumeClaimService) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *PersistentVolumeClaimService) GetServiceSubType() string {
	if m != nil {
		return m.ServiceSubType
	}
	return ""
}

func (m *PersistentVolumeClaimService) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PersistentVolumeClaimService) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *PersistentVolumeClaimService) GetServiceAttributes() *PersistentVolumeClaimAttributes {
	if m != nil {
		return m.ServiceAttributes
	}
	return nil
}

func (m *PersistentVolumeClaimService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type PersistentVolumeClaimServiceResponse struct {
	Error                string                        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Resp                 *PersistentVolumeClaimService `protobuf:"bytes,2,opt,name=resp,proto3" json:"resp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *PersistentVolumeClaimServiceResponse) Reset()         { *m = PersistentVolumeClaimServiceResponse{} }
func (m *PersistentVolumeClaimServiceResponse) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeClaimServiceResponse) ProtoMessage()    {}
func (*PersistentVolumeClaimServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7059372f66a661, []int{1}
}

func (m *PersistentVolumeClaimServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersistentVolumeClaimServiceResponse.Unmarshal(m, b)
}
func (m *PersistentVolumeClaimServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersistentVolumeClaimServiceResponse.Marshal(b, m, deterministic)
}
func (m *PersistentVolumeClaimServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeClaimServiceResponse.Merge(m, src)
}
func (m *PersistentVolumeClaimServiceResponse) XXX_Size() int {
	return xxx_messageInfo_PersistentVolumeClaimServiceResponse.Size(m)
}
func (m *PersistentVolumeClaimServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeClaimServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeClaimServiceResponse proto.InternalMessageInfo

func (m *PersistentVolumeClaimServiceResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *PersistentVolumeClaimServiceResponse) GetResp() *PersistentVolumeClaimService {
	if m != nil {
		return m.Resp
	}
	return nil
}

type PersistentVolumeClaimAttributes struct {
	LabelSelector        *LabelSelectorObj          `protobuf:"bytes,1,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	VolumeName           string                     `protobuf:"bytes,2,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	AccessMode           []AccessMode               `protobuf:"varint,3,rep,packed,name=access_mode,json=accessMode,proto3,enum=proto.AccessMode" json:"access_mode,omitempty"`
	StorageClassName     string                     `protobuf:"bytes,4,opt,name=storage_class_name,json=storageClassName,proto3" json:"storage_class_name,omitempty"`
	RequestQuantity      string                     `protobuf:"bytes,5,opt,name=request_quantity,json=requestQuantity,proto3" json:"request_quantity,omitempty"`
	LimitQuantity        string                     `protobuf:"bytes,6,opt,name=limit_quantity,json=limitQuantity,proto3" json:"limit_quantity,omitempty"`
	VolumeMode           PersistentVolumeMode       `protobuf:"varint,7,opt,name=volume_mode,json=volumeMode,proto3,enum=proto.PersistentVolumeMode" json:"volume_mode,omitempty"`
	DataSource           *TypedLocalObjectReference `protobuf:"bytes,8,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PersistentVolumeClaimAttributes) Reset()         { *m = PersistentVolumeClaimAttributes{} }
func (m *PersistentVolumeClaimAttributes) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeClaimAttributes) ProtoMessage()    {}
func (*PersistentVolumeClaimAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7059372f66a661, []int{2}
}

func (m *PersistentVolumeClaimAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersistentVolumeClaimAttributes.Unmarshal(m, b)
}
func (m *PersistentVolumeClaimAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersistentVolumeClaimAttributes.Marshal(b, m, deterministic)
}
func (m *PersistentVolumeClaimAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeClaimAttributes.Merge(m, src)
}
func (m *PersistentVolumeClaimAttributes) XXX_Size() int {
	return xxx_messageInfo_PersistentVolumeClaimAttributes.Size(m)
}
func (m *PersistentVolumeClaimAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeClaimAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeClaimAttributes proto.InternalMessageInfo

func (m *PersistentVolumeClaimAttributes) GetLabelSelector() *LabelSelectorObj {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *PersistentVolumeClaimAttributes) GetVolumeName() string {
	if m != nil {
		return m.VolumeName
	}
	return ""
}

func (m *PersistentVolumeClaimAttributes) GetAccessMode() []AccessMode {
	if m != nil {
		return m.AccessMode
	}
	return nil
}

func (m *PersistentVolumeClaimAttributes) GetStorageClassName() string {
	if m != nil {
		return m.StorageClassName
	}
	return ""
}

func (m *PersistentVolumeClaimAttributes) GetRequestQuantity() string {
	if m != nil {
		return m.RequestQuantity
	}
	return ""
}

func (m *PersistentVolumeClaimAttributes) GetLimitQuantity() string {
	if m != nil {
		return m.LimitQuantity
	}
	return ""
}

func (m *PersistentVolumeClaimAttributes) GetVolumeMode() PersistentVolumeMode {
	if m != nil {
		return m.VolumeMode
	}
	return PersistentVolumeMode_Block
}

func (m *PersistentVolumeClaimAttributes) GetDataSource() *TypedLocalObjectReference {
	if m != nil {
		return m.DataSource
	}
	return nil
}

type TypedLocalObjectReference struct {
	ApiGroup             string   `protobuf:"bytes,1,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"`
	Kind                 string   `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypedLocalObjectReference) Reset()         { *m = TypedLocalObjectReference{} }
func (m *TypedLocalObjectReference) String() string { return proto.CompactTextString(m) }
func (*TypedLocalObjectReference) ProtoMessage()    {}
func (*TypedLocalObjectReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7059372f66a661, []int{3}
}

func (m *TypedLocalObjectReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypedLocalObjectReference.Unmarshal(m, b)
}
func (m *TypedLocalObjectReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypedLocalObjectReference.Marshal(b, m, deterministic)
}
func (m *TypedLocalObjectReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypedLocalObjectReference.Merge(m, src)
}
func (m *TypedLocalObjectReference) XXX_Size() int {
	return xxx_messageInfo_TypedLocalObjectReference.Size(m)
}
func (m *TypedLocalObjectReference) XXX_DiscardUnknown() {
	xxx_messageInfo_TypedLocalObjectReference.DiscardUnknown(m)
}

var xxx_messageInfo_TypedLocalObjectReference proto.InternalMessageInfo

func (m *TypedLocalObjectReference) GetApiGroup() string {
	if m != nil {
		return m.ApiGroup
	}
	return ""
}

func (m *TypedLocalObjectReference) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *TypedLocalObjectReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*PersistentVolumeClaimService)(nil), "proto.PersistentVolumeClaimService")
	proto.RegisterType((*PersistentVolumeClaimServiceResponse)(nil), "proto.PersistentVolumeClaimServiceResponse")
	proto.RegisterType((*PersistentVolumeClaimAttributes)(nil), "proto.PersistentVolumeClaimAttributes")
	proto.RegisterType((*TypedLocalObjectReference)(nil), "proto.TypedLocalObjectReference")
}

func init() {
	proto.RegisterFile("persistentvolumeclaim.proto", fileDescriptor_dd7059372f66a661)
}

var fileDescriptor_dd7059372f66a661 = []byte{
	// 624 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x4b, 0x6f, 0xd3, 0x4c,
	0x14, 0xfd, 0xfa, 0xa5, 0xaf, 0x5c, 0xd3, 0xd0, 0x8e, 0xa0, 0x98, 0xa4, 0xa8, 0x25, 0x3c, 0x14,
	0x24, 0xd4, 0x85, 0x59, 0xb0, 0x41, 0x48, 0x55, 0x91, 0xaa, 0x4a, 0x85, 0x16, 0x07, 0x90, 0x10,
	0x95, 0xcc, 0x78, 0x7c, 0x09, 0x6e, 0x1d, 0xcf, 0x74, 0x66, 0x1c, 0x29, 0x4b, 0x7e, 0x15, 0xff,
	0x88, 0xdf, 0x81, 0xe6, 0x61, 0x53, 0x55, 0x69, 0x61, 0x93, 0x95, 0xe7, 0x9e, 0x73, 0xee, 0x63,
	0xae, 0xcf, 0x40, 0x4f, 0xa0, 0x54, 0xb9, 0xd2, 0x58, 0xea, 0x09, 0x2f, 0xaa, 0x31, 0xb2, 0x82,
	0xe6, 0xe3, 0x5d, 0x21, 0xb9, 0xe6, 0x64, 0xc9, 0x7e, 0xba, 0x9b, 0x57, 0x35, 0x8e, 0xee, 0xae,
	0x29, 0x94, 0x93, 0x9c, 0x35, 0xe1, 0x08, 0x4b, 0x94, 0xb4, 0x70, 0x61, 0xff, 0x47, 0x0b, 0xb6,
	0x4e, 0x9a, 0xc4, 0x4f, 0x36, 0x71, 0xdf, 0x14, 0x1f, 0xba, 0x2c, 0xf2, 0x00, 0x40, 0x48, 0x7e,
	0x86, 0x4c, 0x27, 0x79, 0x16, 0x2e, 0xec, 0x2c, 0x0c, 0xda, 0x71, 0xdb, 0x23, 0x87, 0x99, 0xa1,
	0x7d, 0x7d, 0x43, 0xff, 0xef, 0x68, 0x8f, 0x1c, 0x66, 0x84, 0xc0, 0x62, 0x49, 0xc7, 0x18, 0xb6,
	0x2c, 0x61, 0xcf, 0x24, 0x84, 0x95, 0x89, 0xe9, 0xc8, 0xcb, 0x70, 0xd1, 0xc2, 0x75, 0x48, 0x1e,
	0xc2, 0xad, 0xba, 0x98, 0x9e, 0x0a, 0x0c, 0x97, 0x2c, 0x1d, 0x78, 0xec, 0xc3, 0x54, 0x20, 0x19,
	0xc0, 0x7a, 0x2d, 0x51, 0x55, 0xea, 0x64, 0xcb, 0x56, 0xd6, 0xf1, 0xf8, 0xb0, 0x4a, 0xad, 0xf2,
	0x0e, 0x2c, 0x69, 0x7e, 0x8e, 0x65, 0xb8, 0x62, 0x69, 0x17, 0x98, 0x79, 0x19, 0x1f, 0x0b, 0x5a,
	0x4e, 0xcd, 0xbc, 0xab, 0x6e, 0x5e, 0x8f, 0x1c, 0x66, 0xe4, 0x23, 0x90, 0xba, 0x3c, 0xd5, 0x5a,
	0xe6, 0x69, 0xa5, 0x51, 0x85, 0xed, 0x9d, 0x85, 0x41, 0x10, 0x3d, 0x75, 0x2b, 0xdb, 0x9d, 0xb9,
	0xae, 0xbd, 0x46, 0x1d, 0x6f, 0xf8, 0x0a, 0x7f, 0x20, 0xb2, 0x05, 0x6d, 0x73, 0x75, 0x25, 0x28,
	0xc3, 0x10, 0x5c, 0xd3, 0x06, 0xe8, 0x57, 0xf0, 0xf8, 0xa6, 0x5f, 0x10, 0xa3, 0x12, 0xbc, 0x54,
	0xf6, 0x46, 0x28, 0x25, 0x97, 0xfe, 0x2f, 0xb8, 0x80, 0xbc, 0x84, 0x45, 0x89, 0x4a, 0xd8, 0xdd,
	0x07, 0xd1, 0xa3, 0x9b, 0x86, 0xac, 0x0b, 0xda, 0x84, 0xfe, 0xcf, 0x16, 0x6c, 0xff, 0xe5, 0x2e,
	0xe4, 0x35, 0x74, 0x0a, 0x9a, 0x62, 0x91, 0x28, 0x2c, 0x90, 0x69, 0xdf, 0x3b, 0x88, 0xee, 0xf9,
	0x36, 0x47, 0x86, 0x1c, 0x7a, 0xee, 0x38, 0x3d, 0x8b, 0xd7, 0x8a, 0xcb, 0x08, 0xd9, 0x86, 0xc0,
	0x99, 0x31, 0xb1, 0x36, 0x70, 0xfe, 0x00, 0x07, 0xbd, 0x33, 0x66, 0x88, 0x20, 0xa0, 0x8c, 0xa1,
	0x52, 0xc9, 0x98, 0x67, 0xc6, 0x27, 0xad, 0x41, 0x27, 0xda, 0xf0, 0xd5, 0xf7, 0x2c, 0xf3, 0x96,
	0x67, 0x18, 0x03, 0x6d, 0xce, 0xe4, 0x39, 0x10, 0xa5, 0xb9, 0xa4, 0x23, 0x4c, 0x58, 0x41, 0x95,
	0x72, 0xb5, 0x9d, 0x97, 0xd6, 0x3d, 0xb3, 0x6f, 0x08, 0xdb, 0xe1, 0x19, 0xac, 0x4b, 0xbc, 0xa8,
	0x50, 0xe9, 0xe4, 0xa2, 0xa2, 0xa5, 0xce, 0xf5, 0xd4, 0x1b, 0xeb, 0xb6, 0xc7, 0xdf, 0x7b, 0x98,
	0x3c, 0x81, 0x4e, 0x91, 0x8f, 0xf3, 0x4b, 0x42, 0x67, 0xad, 0x35, 0x8b, 0x36, 0xb2, 0x57, 0xcd,
	0xa5, 0xec, 0xcc, 0xc6, 0x5f, 0x9d, 0xa8, 0x77, 0xcd, 0xe2, 0xdd, 0xf4, 0x93, 0xe6, 0x4c, 0xf6,
	0x20, 0xc8, 0xa8, 0xa6, 0x89, 0xe2, 0x95, 0x64, 0x68, 0x2d, 0x18, 0x44, 0x3b, 0x3e, 0xdb, 0x38,
	0x37, 0x3b, 0xe2, 0x8c, 0x16, 0xc7, 0xa9, 0x79, 0x61, 0x31, 0x7e, 0x43, 0x89, 0x25, 0xc3, 0x18,
	0x4c, 0xd2, 0xd0, 0xe6, 0xf4, 0xbf, 0xc2, 0xfd, 0x6b, 0x85, 0xa4, 0x07, 0x6d, 0x2a, 0xf2, 0x64,
	0x24, 0x79, 0x25, 0xbc, 0x53, 0x56, 0xa9, 0xc8, 0x0f, 0x4c, 0x6c, 0xde, 0xe3, 0x79, 0x5e, 0xd6,
	0x0f, 0xd5, 0x9e, 0x67, 0xbd, 0xd1, 0xe8, 0x57, 0x0b, 0xee, 0xce, 0xf4, 0x06, 0x39, 0x85, 0xde,
	0xbe, 0x44, 0xaa, 0x71, 0x36, 0xfd, 0x2f, 0xfe, 0xeb, 0x6e, 0x7a, 0xd1, 0x15, 0x83, 0xf7, 0xff,
	0x23, 0x9f, 0x21, 0x3c, 0x40, 0x3d, 0x97, 0xd2, 0xa7, 0xd0, 0x7b, 0x83, 0x05, 0xce, 0x69, 0xf0,
	0x2f, 0xd0, 0x3d, 0xa1, 0x9a, 0x7d, 0x9f, 0xd7, 0x56, 0x4e, 0xaa, 0xb9, 0x6c, 0x25, 0x5d, 0xb6,
	0xc4, 0x8b, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x49, 0x46, 0x06, 0xb0, 0x62, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PersistentVolumeClaimClient is the client API for PersistentVolumeClaim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PersistentVolumeClaimClient interface {
	CreatePersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimService, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimService, opts ...grpc.CallOption) (*ServiceResponse, error)
	DeletePersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PatchPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PutPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimService, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type persistentVolumeClaimClient struct {
	cc grpc.ClientConnInterface
}

func NewPersistentVolumeClaimClient(cc grpc.ClientConnInterface) PersistentVolumeClaimClient {
	return &persistentVolumeClaimClient{cc}
}

func (c *persistentVolumeClaimClient) CreatePersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.PersistentVolumeClaim/CreatePersistentVolumeClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClaimClient) GetPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.PersistentVolumeClaim/GetPersistentVolumeClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClaimClient) DeletePersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.PersistentVolumeClaim/DeletePersistentVolumeClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClaimClient) PatchPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.PersistentVolumeClaim/PatchPersistentVolumeClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClaimClient) PutPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.PersistentVolumeClaim/PutPersistentVolumeClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersistentVolumeClaimServer is the server API for PersistentVolumeClaim service.
type PersistentVolumeClaimServer interface {
	CreatePersistentVolumeClaim(context.Context, *PersistentVolumeClaimService) (*ServiceResponse, error)
	GetPersistentVolumeClaim(context.Context, *PersistentVolumeClaimService) (*ServiceResponse, error)
	DeletePersistentVolumeClaim(context.Context, *PersistentVolumeClaimService) (*ServiceResponse, error)
	PatchPersistentVolumeClaim(context.Context, *PersistentVolumeClaimService) (*ServiceResponse, error)
	PutPersistentVolumeClaim(context.Context, *PersistentVolumeClaimService) (*ServiceResponse, error)
}

// UnimplementedPersistentVolumeClaimServer can be embedded to have forward compatible implementations.
type UnimplementedPersistentVolumeClaimServer struct {
}

func (*UnimplementedPersistentVolumeClaimServer) CreatePersistentVolumeClaim(ctx context.Context, req *PersistentVolumeClaimService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersistentVolumeClaim not implemented")
}
func (*UnimplementedPersistentVolumeClaimServer) GetPersistentVolumeClaim(ctx context.Context, req *PersistentVolumeClaimService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersistentVolumeClaim not implemented")
}
func (*UnimplementedPersistentVolumeClaimServer) DeletePersistentVolumeClaim(ctx context.Context, req *PersistentVolumeClaimService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersistentVolumeClaim not implemented")
}
func (*UnimplementedPersistentVolumeClaimServer) PatchPersistentVolumeClaim(ctx context.Context, req *PersistentVolumeClaimService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchPersistentVolumeClaim not implemented")
}
func (*UnimplementedPersistentVolumeClaimServer) PutPersistentVolumeClaim(ctx context.Context, req *PersistentVolumeClaimService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPersistentVolumeClaim not implemented")
}

func RegisterPersistentVolumeClaimServer(s *grpc.Server, srv PersistentVolumeClaimServer) {
	s.RegisterService(&_PersistentVolumeClaim_serviceDesc, srv)
}

func _PersistentVolumeClaim_CreatePersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeClaimService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumeClaimServer).CreatePersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersistentVolumeClaim/CreatePersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumeClaimServer).CreatePersistentVolumeClaim(ctx, req.(*PersistentVolumeClaimService))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentVolumeClaim_GetPersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeClaimService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumeClaimServer).GetPersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersistentVolumeClaim/GetPersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumeClaimServer).GetPersistentVolumeClaim(ctx, req.(*PersistentVolumeClaimService))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentVolumeClaim_DeletePersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeClaimService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumeClaimServer).DeletePersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersistentVolumeClaim/DeletePersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumeClaimServer).DeletePersistentVolumeClaim(ctx, req.(*PersistentVolumeClaimService))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentVolumeClaim_PatchPersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeClaimService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumeClaimServer).PatchPersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersistentVolumeClaim/PatchPersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumeClaimServer).PatchPersistentVolumeClaim(ctx, req.(*PersistentVolumeClaimService))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentVolumeClaim_PutPersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeClaimService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumeClaimServer).PutPersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PersistentVolumeClaim/PutPersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumeClaimServer).PutPersistentVolumeClaim(ctx, req.(*PersistentVolumeClaimService))
	}
	return interceptor(ctx, in, info, handler)
}

var _PersistentVolumeClaim_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PersistentVolumeClaim",
	HandlerType: (*PersistentVolumeClaimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePersistentVolumeClaim",
			Handler:    _PersistentVolumeClaim_CreatePersistentVolumeClaim_Handler,
		},
		{
			MethodName: "GetPersistentVolumeClaim",
			Handler:    _PersistentVolumeClaim_GetPersistentVolumeClaim_Handler,
		},
		{
			MethodName: "DeletePersistentVolumeClaim",
			Handler:    _PersistentVolumeClaim_DeletePersistentVolumeClaim_Handler,
		},
		{
			MethodName: "PatchPersistentVolumeClaim",
			Handler:    _PersistentVolumeClaim_PatchPersistentVolumeClaim_Handler,
		},
		{
			MethodName: "PutPersistentVolumeClaim",
			Handler:    _PersistentVolumeClaim_PutPersistentVolumeClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "persistentvolumeclaim.proto",
}
