syntax = "proto3";
package proto;

import "general.proto";
import "service.proto";
import "volume.proto";

service DaemonSet {
    rpc CreateDaemonSet (DaemonSetService) returns (ServiceResponse) {}
    rpc DeleteDaemonSet  (DaemonSetService) returns (ServiceResponse) {}
    rpc GetDaemonSet (DaemonSetService) returns (ServiceResponse) {}
    rpc PatchDaemonSet  (DaemonSetService) returns (ServiceResponse) {}
    rpc PutDaemonSet (DaemonSetService) returns (ServiceResponse) {}
}

message DaemonSetService {
    string application_id = 1;
    string service_id = 2;
    string name = 3;
    string version = 4;
    string service_type = 5;
    string service_sub_type = 6;
    string namespace = 7;
    string token = 8;
    string company_id = 9;
    bool   is_discovered = 10;
    string infra_id = 11;
    DaemonSetServiceAttributes service_attributes = 12;
    HookConfiguration hook_configuration=13;
}

message DaemonSetServiceAttributes {
    map<string, string> labels = 1;
    map<string, string> annotations = 2;
    LabelSelectorObj label_selector = 3;
    DaemonSetUpdateStrategy update_strategy = 4;
    int32 min_ready_seconds = 7;
    RevisionHistoryLimit revision_history_limit = 8;
    Affinity affinity = 5;
    repeated Volume volumes = 9;
    repeated ContainerAttributes containers = 10;
    repeated ContainerAttributes init_containers = 11;
    map<string, string> node_selector = 6;
    IstioConfig istio_config = 12;
    bool is_rbac_enabled = 19;
    repeated K8sRbacAttribute roles= 20;
    repeated IstioRbacAttribute istio_roles = 21;
    TerminationGracePeriodSeconds termination_grace_period_seconds = 22;
    ActiveDeadlineSeconds active_deadline_seconds = 23;
}

