// Code generated by protoc-gen-go. DO NOT EDIT.
// source: deployment.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeploymentService struct {
	ApplicationId        string                       `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ServiceId            string                       `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name                 string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version              string                       `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	ServiceType          string                       `protobuf:"bytes,5,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	ServiceSubType       string                       `protobuf:"bytes,6,opt,name=service_sub_type,json=serviceSubType,proto3" json:"service_sub_type,omitempty"`
	Namespace            string                       `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Token                string                       `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	CompanyId            string                       `protobuf:"bytes,9,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	IsDiscovered         bool                         `protobuf:"varint,10,opt,name=is_discovered,json=isDiscovered,proto3" json:"is_discovered,omitempty"`
	InfraId              string                       `protobuf:"bytes,11,opt,name=infra_id,json=infraId,proto3" json:"infra_id,omitempty"`
	ServiceAttributes    *DeploymentServiceAttributes `protobuf:"bytes,12,opt,name=service_attributes,json=serviceAttributes,proto3" json:"service_attributes,omitempty"`
	HookConfiguration    *HookConfiguration           `protobuf:"bytes,13,opt,name=hook_configuration,json=hookConfiguration,proto3" json:"hook_configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *DeploymentService) Reset()         { *m = DeploymentService{} }
func (m *DeploymentService) String() string { return proto.CompactTextString(m) }
func (*DeploymentService) ProtoMessage()    {}
func (*DeploymentService) Descriptor() ([]byte, []int) {
	return fileDescriptor_fac0ec10f8e4d7ff, []int{0}
}

func (m *DeploymentService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeploymentService.Unmarshal(m, b)
}
func (m *DeploymentService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeploymentService.Marshal(b, m, deterministic)
}
func (m *DeploymentService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentService.Merge(m, src)
}
func (m *DeploymentService) XXX_Size() int {
	return xxx_messageInfo_DeploymentService.Size(m)
}
func (m *DeploymentService) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentService.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentService proto.InternalMessageInfo

func (m *DeploymentService) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *DeploymentService) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *DeploymentService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeploymentService) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DeploymentService) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *DeploymentService) GetServiceSubType() string {
	if m != nil {
		return m.ServiceSubType
	}
	return ""
}

func (m *DeploymentService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeploymentService) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *DeploymentService) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *DeploymentService) GetIsDiscovered() bool {
	if m != nil {
		return m.IsDiscovered
	}
	return false
}

func (m *DeploymentService) GetInfraId() string {
	if m != nil {
		return m.InfraId
	}
	return ""
}

func (m *DeploymentService) GetServiceAttributes() *DeploymentServiceAttributes {
	if m != nil {
		return m.ServiceAttributes
	}
	return nil
}

func (m *DeploymentService) GetHookConfiguration() *HookConfiguration {
	if m != nil {
		return m.HookConfiguration
	}
	return nil
}

type DeploymentServiceAttributes struct {
	Containers                    []*ContainerAttributes         `protobuf:"bytes,1,rep,name=containers,proto3" json:"containers,omitempty"`
	IstioConfig                   *IstioConfig                   `protobuf:"bytes,2,opt,name=istio_config,json=istioConfig,proto3" json:"istio_config,omitempty"`
	LabelSelector                 *LabelSelectorObj              `protobuf:"bytes,3,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	NodeSelector                  map[string]string              `protobuf:"bytes,4,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels                        map[string]string              `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations                   map[string]string              `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Roles                         []*K8SRbacAttribute            `protobuf:"bytes,8,rep,name=roles,proto3" json:"roles,omitempty"`
	IstioRoles                    []*IstioRbacAttribute          `protobuf:"bytes,9,rep,name=istio_roles,json=istioRoles,proto3" json:"istio_roles,omitempty"`
	Strategy                      *DeploymentStrategy            `protobuf:"bytes,10,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Volumes                       []*Volume                      `protobuf:"bytes,11,rep,name=volumes,proto3" json:"volumes,omitempty"`
	Affinity                      *Affinity                      `protobuf:"bytes,12,opt,name=affinity,proto3" json:"affinity,omitempty"`
	InitContainers                []*ContainerAttributes         `protobuf:"bytes,13,rep,name=init_containers,json=initContainers,proto3" json:"init_containers,omitempty"`
	Replicas                      int32                          `protobuf:"varint,14,opt,name=replicas,proto3" json:"replicas,omitempty"`
	TerminationGracePeriodSeconds *TerminationGracePeriodSeconds `protobuf:"bytes,15,opt,name=Termination_grace_period_seconds,json=TerminationGracePeriodSeconds,proto3" json:"Termination_grace_period_seconds,omitempty"`
	ImagePullSecrets              []*LocalObjectReference        `protobuf:"bytes,16,rep,name=image_pull_secrets,json=imagePullSecrets,proto3" json:"image_pull_secrets,omitempty"`
	ServiceAccountName            string                         `protobuf:"bytes,17,opt,name=service_account_name,json=serviceAccountName,proto3" json:"service_account_name,omitempty"`
	AutomountServiceAccountToken  *AutomountServiceAccountToken  `protobuf:"bytes,18,opt,name=automount_service_account_token,json=automountServiceAccountToken,proto3" json:"automount_service_account_token,omitempty"`
	IsRbacEnabled                 bool                           `protobuf:"varint,19,opt,name=is_rbac_enabled,json=isRbacEnabled,proto3" json:"is_rbac_enabled,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                       `json:"-"`
	XXX_unrecognized              []byte                         `json:"-"`
	XXX_sizecache                 int32                          `json:"-"`
}

func (m *DeploymentServiceAttributes) Reset()         { *m = DeploymentServiceAttributes{} }
func (m *DeploymentServiceAttributes) String() string { return proto.CompactTextString(m) }
func (*DeploymentServiceAttributes) ProtoMessage()    {}
func (*DeploymentServiceAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fac0ec10f8e4d7ff, []int{1}
}

func (m *DeploymentServiceAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeploymentServiceAttributes.Unmarshal(m, b)
}
func (m *DeploymentServiceAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeploymentServiceAttributes.Marshal(b, m, deterministic)
}
func (m *DeploymentServiceAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentServiceAttributes.Merge(m, src)
}
func (m *DeploymentServiceAttributes) XXX_Size() int {
	return xxx_messageInfo_DeploymentServiceAttributes.Size(m)
}
func (m *DeploymentServiceAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentServiceAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentServiceAttributes proto.InternalMessageInfo

func (m *DeploymentServiceAttributes) GetContainers() []*ContainerAttributes {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetIstioConfig() *IstioConfig {
	if m != nil {
		return m.IstioConfig
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetLabelSelector() *LabelSelectorObj {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetRoles() []*K8SRbacAttribute {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetIstioRoles() []*IstioRbacAttribute {
	if m != nil {
		return m.IstioRoles
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetStrategy() *DeploymentStrategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetInitContainers() []*ContainerAttributes {
	if m != nil {
		return m.InitContainers
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *DeploymentServiceAttributes) GetTerminationGracePeriodSeconds() *TerminationGracePeriodSeconds {
	if m != nil {
		return m.TerminationGracePeriodSeconds
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetImagePullSecrets() []*LocalObjectReference {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetServiceAccountName() string {
	if m != nil {
		return m.ServiceAccountName
	}
	return ""
}

func (m *DeploymentServiceAttributes) GetAutomountServiceAccountToken() *AutomountServiceAccountToken {
	if m != nil {
		return m.AutomountServiceAccountToken
	}
	return nil
}

func (m *DeploymentServiceAttributes) GetIsRbacEnabled() bool {
	if m != nil {
		return m.IsRbacEnabled
	}
	return false
}

type AutomountServiceAccountToken struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AutomountServiceAccountToken) Reset()         { *m = AutomountServiceAccountToken{} }
func (m *AutomountServiceAccountToken) String() string { return proto.CompactTextString(m) }
func (*AutomountServiceAccountToken) ProtoMessage()    {}
func (*AutomountServiceAccountToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_fac0ec10f8e4d7ff, []int{2}
}

func (m *AutomountServiceAccountToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutomountServiceAccountToken.Unmarshal(m, b)
}
func (m *AutomountServiceAccountToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutomountServiceAccountToken.Marshal(b, m, deterministic)
}
func (m *AutomountServiceAccountToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutomountServiceAccountToken.Merge(m, src)
}
func (m *AutomountServiceAccountToken) XXX_Size() int {
	return xxx_messageInfo_AutomountServiceAccountToken.Size(m)
}
func (m *AutomountServiceAccountToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AutomountServiceAccountToken.DiscardUnknown(m)
}

var xxx_messageInfo_AutomountServiceAccountToken proto.InternalMessageInfo

func (m *AutomountServiceAccountToken) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func init() {
	proto.RegisterType((*DeploymentService)(nil), "proto.DeploymentService")
	proto.RegisterType((*DeploymentServiceAttributes)(nil), "proto.DeploymentServiceAttributes")
	proto.RegisterMapType((map[string]string)(nil), "proto.DeploymentServiceAttributes.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.DeploymentServiceAttributes.LabelsEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.DeploymentServiceAttributes.NodeSelectorEntry")
	proto.RegisterType((*AutomountServiceAccountToken)(nil), "proto.AutomountServiceAccountToken")
}

func init() {
	proto.RegisterFile("deployment.proto", fileDescriptor_fac0ec10f8e4d7ff)
}

var fileDescriptor_fac0ec10f8e4d7ff = []byte{
	// 933 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0xdb, 0x6e, 0x1b, 0x37,
	0x10, 0xad, 0xaf, 0x91, 0x46, 0x17, 0x4b, 0x6c, 0xd0, 0x6e, 0x14, 0x07, 0x4d, 0x95, 0x5e, 0x02,
	0x14, 0x15, 0x0a, 0x27, 0x01, 0xd2, 0x3c, 0xa4, 0x30, 0x64, 0xd7, 0x35, 0x5a, 0xa4, 0x2e, 0xe5,
	0x16, 0xe8, 0xd3, 0x82, 0x5a, 0x51, 0xf2, 0xc6, 0x2b, 0x52, 0x58, 0x72, 0x0d, 0xe8, 0xb9, 0x1f,
	0xda, 0x2f, 0xe8, 0x3f, 0x74, 0x38, 0xe4, 0x4a, 0x1b, 0x07, 0x71, 0x12, 0xf8, 0x49, 0x9a, 0x99,
	0x73, 0xce, 0x0c, 0xc9, 0x99, 0x59, 0xe8, 0x4c, 0xe4, 0x22, 0xd3, 0xcb, 0xb9, 0x54, 0x76, 0xb0,
	0xc8, 0xb5, 0xd5, 0x6c, 0x87, 0x7e, 0x7a, 0xad, 0x99, 0x54, 0x32, 0x17, 0xd9, 0x20, 0x98, 0x46,
	0xe6, 0x57, 0x69, 0x22, 0x83, 0xd9, 0xbc, 0xd2, 0x59, 0x31, 0x0f, 0x56, 0xff, 0x9f, 0x6d, 0xe8,
	0x1e, 0xad, 0x74, 0x46, 0x1e, 0xc9, 0xbe, 0x86, 0xb6, 0x58, 0x2c, 0xb2, 0x34, 0x11, 0x36, 0xd5,
	0x2a, 0x4e, 0x27, 0xd1, 0xc6, 0xc3, 0x8d, 0xc7, 0x75, 0xde, 0xaa, 0x78, 0x4f, 0x27, 0xec, 0x01,
	0x40, 0xd0, 0x76, 0x90, 0x4d, 0x82, 0xd4, 0x83, 0x07, 0xc3, 0x0c, 0xb6, 0x95, 0x98, 0xcb, 0x68,
	0x8b, 0x02, 0xf4, 0x9f, 0x45, 0x70, 0xe7, 0x4a, 0xe6, 0x06, 0xf9, 0xd1, 0x36, 0xb9, 0x4b, 0x93,
	0x7d, 0x09, 0xcd, 0x52, 0xcc, 0x2e, 0x17, 0x32, 0xda, 0xa1, 0x70, 0x23, 0xf8, 0xce, 0xd1, 0xc5,
	0x1e, 0x43, 0xa7, 0x84, 0x98, 0x62, 0xec, 0x61, 0xbb, 0x04, 0x6b, 0x07, 0xff, 0xa8, 0x18, 0x13,
	0x72, 0x1f, 0xea, 0x2e, 0x9d, 0x59, 0x88, 0x44, 0x46, 0x77, 0x7c, 0x61, 0x2b, 0x07, 0xbb, 0x0b,
	0x3b, 0x56, 0x5f, 0x4a, 0x15, 0xd5, 0x28, 0xe2, 0x0d, 0x77, 0x9a, 0x44, 0xcf, 0x17, 0x42, 0x2d,
	0xdd, 0x69, 0xea, 0x9e, 0x14, 0x3c, 0x78, 0x9a, 0x47, 0xd0, 0x4a, 0x4d, 0x3c, 0x49, 0x4d, 0xa2,
	0xb1, 0x64, 0x39, 0x89, 0x00, 0x11, 0x35, 0xde, 0x4c, 0xcd, 0xd1, 0xca, 0xc7, 0xee, 0x41, 0x2d,
	0x55, 0xd3, 0x5c, 0x38, 0x85, 0x86, 0x3f, 0x1f, 0xd9, 0xc8, 0xff, 0x03, 0x58, 0x59, 0xbc, 0xb0,
	0x36, 0x4f, 0xc7, 0x85, 0x95, 0x26, 0x6a, 0x22, 0xa8, 0x71, 0xd0, 0xf7, 0xaf, 0x31, 0x78, 0xeb,
	0x25, 0x0e, 0x57, 0x48, 0xde, 0x35, 0xd7, 0x5d, 0xec, 0x04, 0xd8, 0x85, 0xd6, 0x97, 0x71, 0xa2,
	0xd5, 0x34, 0x9d, 0x15, 0x39, 0xbd, 0x4b, 0xd4, 0x22, 0xc9, 0x28, 0x48, 0xfe, 0x82, 0x80, 0x61,
	0x35, 0xce, 0xbb, 0x17, 0xd7, 0x5d, 0xfd, 0x7f, 0x01, 0xee, 0xdf, 0x90, 0x9b, 0xbd, 0x70, 0x57,
	0xa3, 0xac, 0x48, 0xb1, 0xaf, 0x0c, 0xf6, 0xc2, 0x16, 0x26, 0xe8, 0x85, 0x04, 0xc3, 0x32, 0x50,
	0xa9, 0xb5, 0x82, 0x66, 0xcf, 0x00, 0xaf, 0x08, 0xb3, 0x84, 0x2a, 0xa9, 0x4d, 0x1a, 0x07, 0x2c,
	0xb0, 0x4f, 0x5d, 0xc8, 0x17, 0xc3, 0x1b, 0xe9, 0xda, 0x60, 0x2f, 0xa1, 0x9d, 0x89, 0xb1, 0xcc,
	0x62, 0x23, 0x33, 0x99, 0x58, 0x9d, 0x53, 0x1b, 0x35, 0x0e, 0x3e, 0x0f, 0xc4, 0xdf, 0x5c, 0x70,
	0x14, 0x62, 0xbf, 0x8f, 0x5f, 0xf3, 0x56, 0x56, 0xf5, 0xb0, 0xbf, 0xa1, 0xa5, 0xf4, 0x44, 0xae,
	0xe9, 0xdb, 0x54, 0xf5, 0xd3, 0xf7, 0xdf, 0xf4, 0xe0, 0x15, 0xf2, 0x4a, 0x9d, 0x63, 0x65, 0xf3,
	0x25, 0x6f, 0xaa, 0x8a, 0x8b, 0xfd, 0x0c, 0xbb, 0x94, 0xcb, 0x60, 0x8f, 0x3a, 0xcd, 0xc1, 0x07,
	0x68, 0x52, 0xb9, 0xc6, 0xab, 0x05, 0x36, 0xfb, 0x13, 0x1a, 0x42, 0x29, 0x6d, 0xe9, 0x0d, 0x0c,
	0x76, 0xb2, 0x13, 0x7b, 0xf2, 0x01, 0x62, 0x87, 0x6b, 0x96, 0x57, 0xac, 0xea, 0xb0, 0xef, 0x61,
	0x27, 0xd7, 0x19, 0xf6, 0x56, 0x8d, 0x04, 0xcb, 0x0b, 0xfb, 0xf5, 0xb9, 0xe1, 0x63, 0x91, 0xac,
	0x64, 0xb8, 0x47, 0xe1, 0xdb, 0xfa, 0x7b, 0x8f, 0x3d, 0xa9, 0x4e, 0xa4, 0x7b, 0xd5, 0xe7, 0x79,
	0x93, 0x06, 0x84, 0xe6, 0xc4, 0x7d, 0x06, 0x35, 0x63, 0xb1, 0x87, 0xe4, 0x6c, 0x49, 0xe3, 0xb0,
	0x26, 0x56, 0xca, 0x0f, 0x00, 0xbe, 0x82, 0xb2, 0x6f, 0x71, 0x09, 0xd0, 0x12, 0x32, 0x38, 0x24,
	0x2e, 0x5d, 0x2b, 0xb0, 0xfe, 0x22, 0x2f, 0x2f, 0xa3, 0xec, 0x3b, 0xa8, 0x89, 0xe9, 0x34, 0x55,
	0xa9, 0x5d, 0x86, 0x49, 0xd9, 0x0b, 0xc8, 0xc3, 0xe0, 0xe6, 0x2b, 0x00, 0x1b, 0xc2, 0x9e, 0xfb,
	0x13, 0x57, 0x3a, 0xb5, 0xf5, 0xde, 0x4e, 0x6d, 0x3b, 0xca, 0x70, 0xdd, 0xad, 0x3d, 0xa8, 0xe5,
	0x92, 0x76, 0x9c, 0x89, 0xda, 0x98, 0x71, 0x87, 0xaf, 0x6c, 0x36, 0x87, 0x87, 0xe7, 0x32, 0x9f,
	0xa7, 0xca, 0x6f, 0xc5, 0x59, 0x8e, 0xbb, 0x24, 0x5e, 0xc8, 0x3c, 0xd5, 0x13, 0x6c, 0x33, 0x4c,
	0x3b, 0x31, 0xd1, 0x1e, 0x55, 0xf9, 0x55, 0xc8, 0x58, 0x81, 0x9f, 0x38, 0xf4, 0x19, 0x81, 0x47,
	0x1e, 0xcb, 0x1f, 0xdc, 0x18, 0x66, 0xa7, 0xc0, 0xd2, 0xb9, 0x98, 0x61, 0x8a, 0x22, 0x73, 0x63,
	0x90, 0xe4, 0xd2, 0x9a, 0xa8, 0x43, 0x47, 0xba, 0x5f, 0x4e, 0x81, 0x4e, 0x44, 0x86, 0xdd, 0x8f,
	0x8d, 0xc9, 0xe5, 0x14, 0x57, 0x90, 0x4a, 0x24, 0xef, 0x10, 0xed, 0x0c, 0x59, 0x23, 0x4f, 0x62,
	0x3f, 0xc0, 0xdd, 0xd5, 0xee, 0x49, 0x12, 0x5d, 0x28, 0x1b, 0xd3, 0x66, 0xee, 0xd2, 0x8a, 0x2a,
	0xf7, 0xd2, 0xa1, 0x0f, 0xbd, 0x72, 0x7b, 0xfa, 0x35, 0x7c, 0x21, 0x0a, 0xab, 0xe7, 0x84, 0xbd,
	0xce, 0xf5, 0xcb, 0x93, 0xd1, 0x51, 0x1f, 0x95, 0x0f, 0x52, 0xa2, 0x47, 0x6f, 0x88, 0x9d, 0x3b,
	0x28, 0xdf, 0x17, 0x37, 0x44, 0xd9, 0x37, 0xf8, 0x70, 0x26, 0xce, 0xb1, 0xcb, 0x62, 0xa9, 0xc4,
	0x38, 0xc3, 0xdd, 0xfa, 0x29, 0xed, 0x56, 0x5c, 0xb8, 0xae, 0xf7, 0x8e, 0xbd, 0xb3, 0xf7, 0x13,
	0x74, 0xdf, 0x1a, 0x4d, 0xd6, 0x81, 0xad, 0x4b, 0xb9, 0x0c, 0xdf, 0x27, 0xf7, 0xd7, 0x6d, 0xf7,
	0x2b, 0x91, 0x15, 0x32, 0x7c, 0x90, 0xbc, 0xf1, 0x62, 0xf3, 0xf9, 0x46, 0xef, 0x47, 0x68, 0x54,
	0xe6, 0xf0, 0xa3, 0xa8, 0x2f, 0xa1, 0x73, 0x7d, 0xea, 0x3e, 0x86, 0xdf, 0x7f, 0x0a, 0xfb, 0x37,
	0xdd, 0xd0, 0x9a, 0xb9, 0x41, 0x27, 0xf7, 0xc6, 0xc1, 0x7f, 0x9b, 0x00, 0xeb, 0x49, 0xc2, 0xc5,
	0xd3, 0x19, 0xe6, 0x12, 0x67, 0xa8, 0xe2, 0x8b, 0xde, 0xb5, 0x2f, 0x7a, 0x9f, 0x85, 0x48, 0xb0,
	0x39, 0x7e, 0xfc, 0xb0, 0x74, 0xd9, 0xff, 0xc4, 0xe9, 0x1c, 0xe1, 0x25, 0xde, 0x5a, 0x67, 0x08,
	0xad, 0x13, 0x69, 0x6f, 0x29, 0x72, 0x0c, 0x7b, 0x67, 0xc2, 0x26, 0x17, 0xb7, 0xaf, 0xe5, 0xac,
	0xb8, 0x65, 0x2d, 0xe3, 0x5d, 0x0a, 0x3c, 0xf9, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xe3, 0x6a,
	0x9c, 0x5b, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeploymentClient is the client API for Deployment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeploymentClient interface {
	CreateDeployment(ctx context.Context, in *DeploymentService, opts ...grpc.CallOption) (*ServiceResponse, error)
	DeleteDeployment(ctx context.Context, in *DeploymentService, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetDeployment(ctx context.Context, in *DeploymentService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PatchDeployment(ctx context.Context, in *DeploymentService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PutDeployment(ctx context.Context, in *DeploymentService, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type deploymentClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentClient(cc grpc.ClientConnInterface) DeploymentClient {
	return &deploymentClient{cc}
}

func (c *deploymentClient) CreateDeployment(ctx context.Context, in *DeploymentService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Deployment/CreateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) DeleteDeployment(ctx context.Context, in *DeploymentService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Deployment/DeleteDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) GetDeployment(ctx context.Context, in *DeploymentService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Deployment/GetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) PatchDeployment(ctx context.Context, in *DeploymentService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Deployment/PatchDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) PutDeployment(ctx context.Context, in *DeploymentService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Deployment/PutDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentServer is the server API for Deployment service.
type DeploymentServer interface {
	CreateDeployment(context.Context, *DeploymentService) (*ServiceResponse, error)
	DeleteDeployment(context.Context, *DeploymentService) (*ServiceResponse, error)
	GetDeployment(context.Context, *DeploymentService) (*ServiceResponse, error)
	PatchDeployment(context.Context, *DeploymentService) (*ServiceResponse, error)
	PutDeployment(context.Context, *DeploymentService) (*ServiceResponse, error)
}

// UnimplementedDeploymentServer can be embedded to have forward compatible implementations.
type UnimplementedDeploymentServer struct {
}

func (*UnimplementedDeploymentServer) CreateDeployment(ctx context.Context, req *DeploymentService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (*UnimplementedDeploymentServer) DeleteDeployment(ctx context.Context, req *DeploymentService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (*UnimplementedDeploymentServer) GetDeployment(ctx context.Context, req *DeploymentService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (*UnimplementedDeploymentServer) PatchDeployment(ctx context.Context, req *DeploymentService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDeployment not implemented")
}
func (*UnimplementedDeploymentServer) PutDeployment(ctx context.Context, req *DeploymentService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDeployment not implemented")
}

func RegisterDeploymentServer(s *grpc.Server, srv DeploymentServer) {
	s.RegisterService(&_Deployment_serviceDesc, srv)
}

func _Deployment_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Deployment/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).CreateDeployment(ctx, req.(*DeploymentService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Deployment/DeleteDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).DeleteDeployment(ctx, req.(*DeploymentService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Deployment/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).GetDeployment(ctx, req.(*DeploymentService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_PatchDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).PatchDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Deployment/PatchDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).PatchDeployment(ctx, req.(*DeploymentService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_PutDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).PutDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Deployment/PutDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).PutDeployment(ctx, req.(*DeploymentService))
	}
	return interceptor(ctx, in, info, handler)
}

var _Deployment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Deployment",
	HandlerType: (*DeploymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeployment",
			Handler:    _Deployment_CreateDeployment_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _Deployment_DeleteDeployment_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _Deployment_GetDeployment_Handler,
		},
		{
			MethodName: "PatchDeployment",
			Handler:    _Deployment_PatchDeployment_Handler,
		},
		{
			MethodName: "PutDeployment",
			Handler:    _Deployment_PutDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deployment.proto",
}
