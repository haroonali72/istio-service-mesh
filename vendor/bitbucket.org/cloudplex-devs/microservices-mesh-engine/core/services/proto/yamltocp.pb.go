// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yamltocp.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type YamlToCPServiceResponse struct {
	Service              []byte   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YamlToCPServiceResponse) Reset()         { *m = YamlToCPServiceResponse{} }
func (m *YamlToCPServiceResponse) String() string { return proto.CompactTextString(m) }
func (*YamlToCPServiceResponse) ProtoMessage()    {}
func (*YamlToCPServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74da52d3c48af6af, []int{0}
}

func (m *YamlToCPServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YamlToCPServiceResponse.Unmarshal(m, b)
}
func (m *YamlToCPServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YamlToCPServiceResponse.Marshal(b, m, deterministic)
}
func (m *YamlToCPServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YamlToCPServiceResponse.Merge(m, src)
}
func (m *YamlToCPServiceResponse) XXX_Size() int {
	return xxx_messageInfo_YamlToCPServiceResponse.Size(m)
}
func (m *YamlToCPServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_YamlToCPServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_YamlToCPServiceResponse proto.InternalMessageInfo

func (m *YamlToCPServiceResponse) GetService() []byte {
	if m != nil {
		return m.Service
	}
	return nil
}

type YamlToCPServiceRequest struct {
	Service              []byte   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YamlToCPServiceRequest) Reset()         { *m = YamlToCPServiceRequest{} }
func (m *YamlToCPServiceRequest) String() string { return proto.CompactTextString(m) }
func (*YamlToCPServiceRequest) ProtoMessage()    {}
func (*YamlToCPServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74da52d3c48af6af, []int{1}
}

func (m *YamlToCPServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YamlToCPServiceRequest.Unmarshal(m, b)
}
func (m *YamlToCPServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YamlToCPServiceRequest.Marshal(b, m, deterministic)
}
func (m *YamlToCPServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YamlToCPServiceRequest.Merge(m, src)
}
func (m *YamlToCPServiceRequest) XXX_Size() int {
	return xxx_messageInfo_YamlToCPServiceRequest.Size(m)
}
func (m *YamlToCPServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_YamlToCPServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_YamlToCPServiceRequest proto.InternalMessageInfo

func (m *YamlToCPServiceRequest) GetService() []byte {
	if m != nil {
		return m.Service
	}
	return nil
}

func init() {
	proto.RegisterType((*YamlToCPServiceResponse)(nil), "proto.YamlToCPServiceResponse")
	proto.RegisterType((*YamlToCPServiceRequest)(nil), "proto.YamlToCPServiceRequest")
}

func init() { proto.RegisterFile("yamltocp.proto", fileDescriptor_74da52d3c48af6af) }

var fileDescriptor_74da52d3c48af6af = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xab, 0x4c, 0xcc, 0xcd,
	0x29, 0xc9, 0x4f, 0x2e, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xc6,
	0x5c, 0xe2, 0x91, 0x89, 0xb9, 0x39, 0x21, 0xf9, 0xce, 0x01, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9,
	0xa9, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0x10, 0x21,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x18, 0x57, 0xc9, 0x88, 0x4b, 0x0c, 0x43, 0x53, 0x61,
	0x69, 0x6a, 0x71, 0x09, 0x6e, 0x3d, 0x46, 0x49, 0x5c, 0xfc, 0x68, 0x7a, 0x84, 0xfc, 0xb9, 0x78,
	0xdc, 0x53, 0x4b, 0x10, 0x7c, 0x59, 0x88, 0xd3, 0xf4, 0xb0, 0x9b, 0x2d, 0x25, 0x87, 0x4b, 0x1a,
	0xe2, 0x5e, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x02, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10,
	0x7f, 0x65, 0x1b, 0xec, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// YamlToCPServiceClient is the client API for YamlToCPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YamlToCPServiceClient interface {
	GetCPService(ctx context.Context, in *YamlToCPServiceRequest, opts ...grpc.CallOption) (*YamlToCPServiceResponse, error)
}

type yamlToCPServiceClient struct {
	cc *grpc.ClientConn
}

func NewYamlToCPServiceClient(cc *grpc.ClientConn) YamlToCPServiceClient {
	return &yamlToCPServiceClient{cc}
}

func (c *yamlToCPServiceClient) GetCPService(ctx context.Context, in *YamlToCPServiceRequest, opts ...grpc.CallOption) (*YamlToCPServiceResponse, error) {
	out := new(YamlToCPServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.YamlToCPService/GetCPService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YamlToCPServiceServer is the server API for YamlToCPService service.
type YamlToCPServiceServer interface {
	GetCPService(context.Context, *YamlToCPServiceRequest) (*YamlToCPServiceResponse, error)
}

// UnimplementedYamlToCPServiceServer can be embedded to have forward compatible implementations.
type UnimplementedYamlToCPServiceServer struct {
}

func (*UnimplementedYamlToCPServiceServer) GetCPService(ctx context.Context, req *YamlToCPServiceRequest) (*YamlToCPServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCPService not implemented")
}

func RegisterYamlToCPServiceServer(s *grpc.Server, srv YamlToCPServiceServer) {
	s.RegisterService(&_YamlToCPService_serviceDesc, srv)
}

func _YamlToCPService_GetCPService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YamlToCPServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamlToCPServiceServer).GetCPService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.YamlToCPService/GetCPService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamlToCPServiceServer).GetCPService(ctx, req.(*YamlToCPServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _YamlToCPService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.YamlToCPService",
	HandlerType: (*YamlToCPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCPService",
			Handler:    _YamlToCPService_GetCPService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yamltocp.proto",
}
