// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rolebinding.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RoleBindingService struct {
	ServiceId             string                  `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Token                 string                  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ProjectId             string                  `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CompanyId             string                  `protobuf:"bytes,4,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Name                  string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ServiceType           string                  `protobuf:"bytes,6,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	ServiceSubType        string                  `protobuf:"bytes,7,opt,name=service_sub_type,json=serviceSubType,proto3" json:"service_sub_type,omitempty"`
	ServiceDependencyInfo *any.Any                `protobuf:"bytes,8,opt,name=service_dependency_info,json=serviceDependencyInfo,proto3" json:"service_dependency_info,omitempty"`
	Namespace             string                  `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Version               string                  `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	ServiceAttributes     *RoleBServiceAttributee `protobuf:"bytes,11,opt,name=service_attributes,json=serviceAttributes,proto3" json:"service_attributes,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                `json:"-"`
	XXX_unrecognized      []byte                  `json:"-"`
	XXX_sizecache         int32                   `json:"-"`
}

func (m *RoleBindingService) Reset()         { *m = RoleBindingService{} }
func (m *RoleBindingService) String() string { return proto.CompactTextString(m) }
func (*RoleBindingService) ProtoMessage()    {}
func (*RoleBindingService) Descriptor() ([]byte, []int) {
	return fileDescriptor_a20088c7e9cbc9c7, []int{0}
}

func (m *RoleBindingService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleBindingService.Unmarshal(m, b)
}
func (m *RoleBindingService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleBindingService.Marshal(b, m, deterministic)
}
func (m *RoleBindingService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleBindingService.Merge(m, src)
}
func (m *RoleBindingService) XXX_Size() int {
	return xxx_messageInfo_RoleBindingService.Size(m)
}
func (m *RoleBindingService) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleBindingService.DiscardUnknown(m)
}

var xxx_messageInfo_RoleBindingService proto.InternalMessageInfo

func (m *RoleBindingService) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *RoleBindingService) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RoleBindingService) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *RoleBindingService) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *RoleBindingService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoleBindingService) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *RoleBindingService) GetServiceSubType() string {
	if m != nil {
		return m.ServiceSubType
	}
	return ""
}

func (m *RoleBindingService) GetServiceDependencyInfo() *any.Any {
	if m != nil {
		return m.ServiceDependencyInfo
	}
	return nil
}

func (m *RoleBindingService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RoleBindingService) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RoleBindingService) GetServiceAttributes() *RoleBServiceAttributee {
	if m != nil {
		return m.ServiceAttributes
	}
	return nil
}

type RoleBServiceAttributee struct {
	Subjects             []*RoleBSubject `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
	Reference            *RoleBReference `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RoleBServiceAttributee) Reset()         { *m = RoleBServiceAttributee{} }
func (m *RoleBServiceAttributee) String() string { return proto.CompactTextString(m) }
func (*RoleBServiceAttributee) ProtoMessage()    {}
func (*RoleBServiceAttributee) Descriptor() ([]byte, []int) {
	return fileDescriptor_a20088c7e9cbc9c7, []int{1}
}

func (m *RoleBServiceAttributee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleBServiceAttributee.Unmarshal(m, b)
}
func (m *RoleBServiceAttributee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleBServiceAttributee.Marshal(b, m, deterministic)
}
func (m *RoleBServiceAttributee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleBServiceAttributee.Merge(m, src)
}
func (m *RoleBServiceAttributee) XXX_Size() int {
	return xxx_messageInfo_RoleBServiceAttributee.Size(m)
}
func (m *RoleBServiceAttributee) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleBServiceAttributee.DiscardUnknown(m)
}

var xxx_messageInfo_RoleBServiceAttributee proto.InternalMessageInfo

func (m *RoleBServiceAttributee) GetSubjects() []*RoleBSubject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *RoleBServiceAttributee) GetReference() *RoleBReference {
	if m != nil {
		return m.Reference
	}
	return nil
}

type RoleBSubject struct {
	Kind                 string   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleBSubject) Reset()         { *m = RoleBSubject{} }
func (m *RoleBSubject) String() string { return proto.CompactTextString(m) }
func (*RoleBSubject) ProtoMessage()    {}
func (*RoleBSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_a20088c7e9cbc9c7, []int{2}
}

func (m *RoleBSubject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleBSubject.Unmarshal(m, b)
}
func (m *RoleBSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleBSubject.Marshal(b, m, deterministic)
}
func (m *RoleBSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleBSubject.Merge(m, src)
}
func (m *RoleBSubject) XXX_Size() int {
	return xxx_messageInfo_RoleBSubject.Size(m)
}
func (m *RoleBSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleBSubject.DiscardUnknown(m)
}

var xxx_messageInfo_RoleBSubject proto.InternalMessageInfo

func (m *RoleBSubject) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *RoleBSubject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoleBSubject) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type RoleBReference struct {
	Kind                 string   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleBReference) Reset()         { *m = RoleBReference{} }
func (m *RoleBReference) String() string { return proto.CompactTextString(m) }
func (*RoleBReference) ProtoMessage()    {}
func (*RoleBReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_a20088c7e9cbc9c7, []int{3}
}

func (m *RoleBReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleBReference.Unmarshal(m, b)
}
func (m *RoleBReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleBReference.Marshal(b, m, deterministic)
}
func (m *RoleBReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleBReference.Merge(m, src)
}
func (m *RoleBReference) XXX_Size() int {
	return xxx_messageInfo_RoleBReference.Size(m)
}
func (m *RoleBReference) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleBReference.DiscardUnknown(m)
}

var xxx_messageInfo_RoleBReference proto.InternalMessageInfo

func (m *RoleBReference) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *RoleBReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*RoleBindingService)(nil), "proto.RoleBindingService")
	proto.RegisterType((*RoleBServiceAttributee)(nil), "proto.RoleBServiceAttributee")
	proto.RegisterType((*RoleBSubject)(nil), "proto.RoleBSubject")
	proto.RegisterType((*RoleBReference)(nil), "proto.RoleBReference")
}

func init() { proto.RegisterFile("rolebinding.proto", fileDescriptor_a20088c7e9cbc9c7) }

var fileDescriptor_a20088c7e9cbc9c7 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xcd, 0x4e, 0xdb, 0x40,
	0x10, 0x6e, 0x30, 0x01, 0x3c, 0xa6, 0xa8, 0x6c, 0x09, 0x2c, 0x51, 0x91, 0x52, 0x9f, 0x72, 0x72,
	0xa4, 0x70, 0xe9, 0x95, 0x16, 0xa9, 0x8a, 0x14, 0x15, 0x64, 0xb8, 0x23, 0xff, 0x4c, 0x52, 0x97,
	0xb0, 0xbb, 0xda, 0x5d, 0x23, 0xf9, 0xd2, 0x17, 0xe9, 0xab, 0xf4, 0xe1, 0x2a, 0xef, 0x4f, 0xea,
	0x20, 0x0e, 0x1c, 0x72, 0xb2, 0xe7, 0xfb, 0xdb, 0xd9, 0x99, 0x85, 0x63, 0xc9, 0x57, 0x98, 0x57,
	0xac, 0xac, 0xd8, 0x32, 0x11, 0x92, 0x6b, 0x4e, 0xfa, 0xe6, 0x33, 0x7c, 0xaf, 0x50, 0x3e, 0x57,
	0x05, 0x5a, 0x74, 0x78, 0xbe, 0xe4, 0x7c, 0xb9, 0xc2, 0x89, 0xa9, 0xf2, 0x7a, 0x31, 0xc9, 0x58,
	0x63, 0xa9, 0xf8, 0x6f, 0x00, 0x24, 0xe5, 0x2b, 0xfc, 0x6a, 0x63, 0xee, 0xac, 0x8f, 0x5c, 0x00,
	0xb8, 0x88, 0x87, 0xaa, 0xa4, 0xbd, 0x51, 0x6f, 0x1c, 0xa6, 0xa1, 0x43, 0x66, 0x25, 0x39, 0x81,
	0xbe, 0xe6, 0x8f, 0xc8, 0xe8, 0x8e, 0x61, 0x6c, 0xd1, 0x9a, 0x84, 0xe4, 0xbf, 0xb0, 0xd0, 0xad,
	0x29, 0xb0, 0x26, 0x87, 0xcc, 0xca, 0x96, 0x2e, 0xf8, 0x93, 0xc8, 0x58, 0xd3, 0xd2, 0xbb, 0x96,
	0x76, 0xc8, 0xac, 0x24, 0x04, 0x76, 0x59, 0xf6, 0x84, 0xb4, 0x6f, 0x08, 0xf3, 0x4f, 0x3e, 0xc3,
	0xa1, 0x6f, 0x43, 0x37, 0x02, 0xe9, 0x9e, 0xe1, 0x22, 0x87, 0xdd, 0x37, 0x02, 0xc9, 0x18, 0x3e,
	0x78, 0x89, 0xaa, 0x73, 0x2b, 0xdb, 0x37, 0xb2, 0x23, 0x87, 0xdf, 0xd5, 0xb9, 0x51, 0xce, 0xe1,
	0xcc, 0x2b, 0x4b, 0x14, 0xc8, 0x4a, 0x64, 0x45, 0xf3, 0x50, 0xb1, 0x05, 0xa7, 0x07, 0xa3, 0xde,
	0x38, 0x9a, 0x9e, 0x24, 0x76, 0x4e, 0x89, 0x9f, 0x53, 0x72, 0xc5, 0x9a, 0x74, 0xe0, 0x4c, 0xd7,
	0x6b, 0xcf, 0x8c, 0x2d, 0x38, 0xf9, 0x04, 0x61, 0xdb, 0xa2, 0x12, 0x59, 0x81, 0x34, 0xb4, 0x97,
	0x59, 0x03, 0x84, 0xc2, 0xfe, 0x33, 0x4a, 0x55, 0x71, 0x46, 0xc1, 0x70, 0xbe, 0x24, 0x73, 0x20,
	0xbe, 0x8b, 0x4c, 0x6b, 0x59, 0xe5, 0xb5, 0x46, 0x45, 0x23, 0xd3, 0xc0, 0x85, 0x3d, 0x39, 0x31,
	0x0b, 0x71, 0xab, 0xb8, 0xf2, 0x22, 0x4c, 0x8f, 0xd5, 0x0b, 0x48, 0xc5, 0xbf, 0xe1, 0xf4, 0x75,
	0x31, 0x99, 0xc0, 0x81, 0xaa, 0xf3, 0x76, 0xf4, 0x8a, 0xf6, 0x46, 0xc1, 0x38, 0x9a, 0x7e, 0xdc,
	0x48, 0xb7, 0x5c, 0xba, 0x16, 0x91, 0x4b, 0x08, 0x25, 0x2e, 0x50, 0x22, 0x2b, 0xd0, 0xec, 0x35,
	0x9a, 0x0e, 0xba, 0x8e, 0xd4, 0x93, 0xe9, 0x7f, 0x5d, 0x7c, 0x0f, 0x87, 0xdd, 0xb8, 0x76, 0x89,
	0x8f, 0x15, 0xf3, 0x2f, 0xc6, 0xfc, 0xaf, 0x17, 0xbb, 0xd3, 0x59, 0xec, 0xc6, 0xf4, 0x82, 0x17,
	0xd3, 0x8b, 0xbf, 0xc0, 0xd1, 0xe6, 0x91, 0x6f, 0xcd, 0x9d, 0xfe, 0x09, 0x20, 0xea, 0x3c, 0x67,
	0x72, 0x03, 0xf4, 0x9b, 0xc4, 0x4c, 0xe3, 0x2b, 0x6f, 0xfc, 0xbc, 0x7b, 0xbb, 0x0d, 0x6a, 0x78,
	0xea, 0x28, 0x57, 0xa7, 0xa8, 0x04, 0x67, 0x0a, 0xe3, 0x77, 0x64, 0x0e, 0x83, 0xef, 0xa8, 0xb7,
	0x98, 0x76, 0x5b, 0x6f, 0x2d, 0xed, 0x07, 0x9c, 0xdd, 0x66, 0xba, 0xf8, 0xb9, 0xad, 0xbc, 0x1b,
	0xa0, 0xd7, 0xb8, 0xc2, 0xad, 0x0d, 0x2f, 0xdf, 0x33, 0xc4, 0xe5, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xe1, 0x8c, 0xee, 0x67, 0xb9, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoleBindingClient is the client API for RoleBinding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoleBindingClient interface {
	CreateRoleBindingService(ctx context.Context, in *RoleBindingService, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetRoleBindingService(ctx context.Context, in *RoleBindingService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PutRoleBindingService(ctx context.Context, in *RoleBindingService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PatchRoleBindingService(ctx context.Context, in *RoleBindingService, opts ...grpc.CallOption) (*ServiceResponse, error)
	DeleteRoleBindingService(ctx context.Context, in *RoleBindingService, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type roleBindingClient struct {
	cc *grpc.ClientConn
}

func NewRoleBindingClient(cc *grpc.ClientConn) RoleBindingClient {
	return &roleBindingClient{cc}
}

func (c *roleBindingClient) CreateRoleBindingService(ctx context.Context, in *RoleBindingService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.RoleBinding/CreateRoleBindingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleBindingClient) GetRoleBindingService(ctx context.Context, in *RoleBindingService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.RoleBinding/GetRoleBindingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleBindingClient) PutRoleBindingService(ctx context.Context, in *RoleBindingService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.RoleBinding/PutRoleBindingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleBindingClient) PatchRoleBindingService(ctx context.Context, in *RoleBindingService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.RoleBinding/PatchRoleBindingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleBindingClient) DeleteRoleBindingService(ctx context.Context, in *RoleBindingService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.RoleBinding/DeleteRoleBindingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleBindingServer is the server API for RoleBinding service.
type RoleBindingServer interface {
	CreateRoleBindingService(context.Context, *RoleBindingService) (*ServiceResponse, error)
	GetRoleBindingService(context.Context, *RoleBindingService) (*ServiceResponse, error)
	PutRoleBindingService(context.Context, *RoleBindingService) (*ServiceResponse, error)
	PatchRoleBindingService(context.Context, *RoleBindingService) (*ServiceResponse, error)
	DeleteRoleBindingService(context.Context, *RoleBindingService) (*ServiceResponse, error)
}

// UnimplementedRoleBindingServer can be embedded to have forward compatible implementations.
type UnimplementedRoleBindingServer struct {
}

func (*UnimplementedRoleBindingServer) CreateRoleBindingService(ctx context.Context, req *RoleBindingService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleBindingService not implemented")
}
func (*UnimplementedRoleBindingServer) GetRoleBindingService(ctx context.Context, req *RoleBindingService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleBindingService not implemented")
}
func (*UnimplementedRoleBindingServer) PutRoleBindingService(ctx context.Context, req *RoleBindingService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRoleBindingService not implemented")
}
func (*UnimplementedRoleBindingServer) PatchRoleBindingService(ctx context.Context, req *RoleBindingService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRoleBindingService not implemented")
}
func (*UnimplementedRoleBindingServer) DeleteRoleBindingService(ctx context.Context, req *RoleBindingService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleBindingService not implemented")
}

func RegisterRoleBindingServer(s *grpc.Server, srv RoleBindingServer) {
	s.RegisterService(&_RoleBinding_serviceDesc, srv)
}

func _RoleBinding_CreateRoleBindingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleBindingService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleBindingServer).CreateRoleBindingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleBinding/CreateRoleBindingService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleBindingServer).CreateRoleBindingService(ctx, req.(*RoleBindingService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleBinding_GetRoleBindingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleBindingService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleBindingServer).GetRoleBindingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleBinding/GetRoleBindingService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleBindingServer).GetRoleBindingService(ctx, req.(*RoleBindingService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleBinding_PutRoleBindingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleBindingService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleBindingServer).PutRoleBindingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleBinding/PutRoleBindingService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleBindingServer).PutRoleBindingService(ctx, req.(*RoleBindingService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleBinding_PatchRoleBindingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleBindingService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleBindingServer).PatchRoleBindingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleBinding/PatchRoleBindingService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleBindingServer).PatchRoleBindingService(ctx, req.(*RoleBindingService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleBinding_DeleteRoleBindingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleBindingService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleBindingServer).DeleteRoleBindingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoleBinding/DeleteRoleBindingService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleBindingServer).DeleteRoleBindingService(ctx, req.(*RoleBindingService))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoleBinding_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RoleBinding",
	HandlerType: (*RoleBindingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoleBindingService",
			Handler:    _RoleBinding_CreateRoleBindingService_Handler,
		},
		{
			MethodName: "GetRoleBindingService",
			Handler:    _RoleBinding_GetRoleBindingService_Handler,
		},
		{
			MethodName: "PutRoleBindingService",
			Handler:    _RoleBinding_PutRoleBindingService_Handler,
		},
		{
			MethodName: "PatchRoleBindingService",
			Handler:    _RoleBinding_PatchRoleBindingService_Handler,
		},
		{
			MethodName: "DeleteRoleBindingService",
			Handler:    _RoleBinding_DeleteRoleBindingService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rolebinding.proto",
}
