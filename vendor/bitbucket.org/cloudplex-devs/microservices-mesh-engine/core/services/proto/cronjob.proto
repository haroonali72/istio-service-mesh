syntax = "proto3";
package proto;

import "service.proto";

import "general.proto";
import "volume.proto";

service CronJob {
    rpc CreateCronJob (CronJobService) returns (ServiceResponse) {}
    rpc DeleteCronJob (CronJobService) returns (ServiceResponse) {}
    rpc GetCronJob (CronJobService) returns (ServiceResponse) {}
    rpc PatchCronJob (CronJobService) returns (ServiceResponse) {}
    rpc PutCronJob (CronJobService) returns (ServiceResponse) {}
}

message CronJobService {
    string project_id = 1;
    string service_id = 2;
    string name = 3;
    string version = 4;
    string service_type = 5;
    string service_sub_type = 6;
    string namespace = 7;
    string token = 8;
    string company_id = 9;
    CronJobServiceAttribute CronJobServiceAttribute = 10;
    HookConfiguration hook_configuration=12;
}

message CronJobServiceAttribute {

    string schedule = 1;
    StartingDeadlineSeconds starting_deadline_seconds = 2;
    ConcurrencyPolicy concurrency_policy = 3;
    Suspend suspend = 4;
    FailedJobsHistoryLimit failed_jobs_history_limit = 5;
    SuccessfulJobsHistoryLimit successful_jobs_history_limit = 6;
    map<string, string> labels = 16;
    map<string, string> annotations = 17;
    LabelSelectorObj label_selector = 21;
    repeated Volume volumes = 18;
    repeated ContainerAttributes containers = 19;
    repeated ContainerAttributes init_containers = 20;
    IstioConfig istio_config = 22;
    map<string, string> node_selector = 23;
    repeated K8sRbacAttribute roles= 24;
    repeated IstioRbacAttribute istio_roles = 25;
    bool is_rbac_enabled = 26;
}

message StartingDeadlineSeconds{
    int64 value = 1;
}

message Suspend{
    bool value = 1;
}
message SuccessfulJobsHistoryLimit{
    int32 value = 1;
}

message FailedJobsHistoryLimit{
    int32 value = 1;
}

enum ConcurrencyPolicy{
    Allow = 0;
    Forbid = 1;
    Replace = 2;
}

