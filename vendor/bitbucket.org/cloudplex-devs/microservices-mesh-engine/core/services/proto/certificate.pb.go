// Code generated by protoc-gen-go. DO NOT EDIT.
// source: certificate.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CertificateService struct {
	ApplicationId        string                        `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ServiceId            string                        `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version              string                        `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	ServiceType          string                        `protobuf:"bytes,5,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	ServiceSubType       string                        `protobuf:"bytes,6,opt,name=service_sub_type,json=serviceSubType,proto3" json:"service_sub_type,omitempty"`
	Namespace            string                        `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Token                string                        `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	CompanyId            string                        `protobuf:"bytes,9,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	IsDiscovered         bool                          `protobuf:"varint,10,opt,name=is_discovered,json=isDiscovered,proto3" json:"is_discovered,omitempty"`
	InfraId              string                        `protobuf:"bytes,11,opt,name=infra_id,json=infraId,proto3" json:"infra_id,omitempty"`
	ServiceAttributes    *CertificateServiceAttributes `protobuf:"bytes,12,opt,name=service_attributes,json=serviceAttributes,proto3" json:"service_attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CertificateService) Reset()         { *m = CertificateService{} }
func (m *CertificateService) String() string { return proto.CompactTextString(m) }
func (*CertificateService) ProtoMessage()    {}
func (*CertificateService) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{0}
}

func (m *CertificateService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateService.Unmarshal(m, b)
}
func (m *CertificateService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateService.Marshal(b, m, deterministic)
}
func (m *CertificateService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateService.Merge(m, src)
}
func (m *CertificateService) XXX_Size() int {
	return xxx_messageInfo_CertificateService.Size(m)
}
func (m *CertificateService) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateService.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateService proto.InternalMessageInfo

func (m *CertificateService) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *CertificateService) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *CertificateService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CertificateService) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CertificateService) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *CertificateService) GetServiceSubType() string {
	if m != nil {
		return m.ServiceSubType
	}
	return ""
}

func (m *CertificateService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CertificateService) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CertificateService) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *CertificateService) GetIsDiscovered() bool {
	if m != nil {
		return m.IsDiscovered
	}
	return false
}

func (m *CertificateService) GetInfraId() string {
	if m != nil {
		return m.InfraId
	}
	return ""
}

func (m *CertificateService) GetServiceAttributes() *CertificateServiceAttributes {
	if m != nil {
		return m.ServiceAttributes
	}
	return nil
}

type CertificateServiceAttributes struct {
	SecretName           string     `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	CommonName           string     `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	DnsNames             []string   `protobuf:"bytes,3,rep,name=dns_names,json=dnsNames,proto3" json:"dns_names,omitempty"`
	IssuerRef            *IssuerRef `protobuf:"bytes,4,opt,name=issuer_ref,json=issuerRef,proto3" json:"issuer_ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CertificateServiceAttributes) Reset()         { *m = CertificateServiceAttributes{} }
func (m *CertificateServiceAttributes) String() string { return proto.CompactTextString(m) }
func (*CertificateServiceAttributes) ProtoMessage()    {}
func (*CertificateServiceAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{1}
}

func (m *CertificateServiceAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateServiceAttributes.Unmarshal(m, b)
}
func (m *CertificateServiceAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateServiceAttributes.Marshal(b, m, deterministic)
}
func (m *CertificateServiceAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateServiceAttributes.Merge(m, src)
}
func (m *CertificateServiceAttributes) XXX_Size() int {
	return xxx_messageInfo_CertificateServiceAttributes.Size(m)
}
func (m *CertificateServiceAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateServiceAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateServiceAttributes proto.InternalMessageInfo

func (m *CertificateServiceAttributes) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func (m *CertificateServiceAttributes) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *CertificateServiceAttributes) GetDnsNames() []string {
	if m != nil {
		return m.DnsNames
	}
	return nil
}

func (m *CertificateServiceAttributes) GetIssuerRef() *IssuerRef {
	if m != nil {
		return m.IssuerRef
	}
	return nil
}

type IssuerRef struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 string   `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssuerRef) Reset()         { *m = IssuerRef{} }
func (m *IssuerRef) String() string { return proto.CompactTextString(m) }
func (*IssuerRef) ProtoMessage()    {}
func (*IssuerRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{2}
}

func (m *IssuerRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssuerRef.Unmarshal(m, b)
}
func (m *IssuerRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssuerRef.Marshal(b, m, deterministic)
}
func (m *IssuerRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuerRef.Merge(m, src)
}
func (m *IssuerRef) XXX_Size() int {
	return xxx_messageInfo_IssuerRef.Size(m)
}
func (m *IssuerRef) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuerRef.DiscardUnknown(m)
}

var xxx_messageInfo_IssuerRef proto.InternalMessageInfo

func (m *IssuerRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IssuerRef) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func init() {
	proto.RegisterType((*CertificateService)(nil), "proto.CertificateService")
	proto.RegisterType((*CertificateServiceAttributes)(nil), "proto.CertificateServiceAttributes")
	proto.RegisterType((*IssuerRef)(nil), "proto.IssuerRef")
}

func init() {
	proto.RegisterFile("certificate.proto", fileDescriptor_c0d34c34dd33be4b)
}

var fileDescriptor_c0d34c34dd33be4b = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0x49, 0xd3, 0xb4, 0xd9, 0xd9, 0x24, 0x4a, 0x2c, 0x84, 0xdc, 0x52, 0x04, 0xa4, 0x42,
	0xea, 0xa9, 0x48, 0xe9, 0x13, 0xa0, 0x16, 0x95, 0x5e, 0x50, 0xb5, 0xe5, 0x1e, 0x6d, 0x76, 0x27,
	0xc2, 0x6a, 0xe3, 0x5d, 0xd9, 0xde, 0x4a, 0x7d, 0x29, 0x9e, 0x80, 0x07, 0xe3, 0xc8, 0x78, 0xec,
	0x5d, 0x22, 0x10, 0xbd, 0xb4, 0xa7, 0xd8, 0xdf, 0xff, 0x7b, 0x32, 0xb3, 0xff, 0xc0, 0xac, 0x40,
	0xe3, 0xd4, 0x5a, 0x15, 0xb9, 0xc3, 0xd3, 0xda, 0x54, 0xae, 0x12, 0x03, 0xfe, 0x39, 0x1c, 0x5b,
	0x34, 0xf7, 0xaa, 0x88, 0x74, 0xfe, 0xb3, 0x0f, 0xe2, 0xfc, 0x8f, 0xf7, 0x26, 0x88, 0xe2, 0x03,
	0x4c, 0xf2, 0xba, 0xbe, 0xf3, 0x4c, 0x55, 0x7a, 0xa9, 0x4a, 0xd9, 0x7b, 0xd7, 0x3b, 0x49, 0xb2,
	0xf1, 0x16, 0xbd, 0x2a, 0xc5, 0x1b, 0x80, 0x58, 0xce, 0x5b, 0x76, 0xd8, 0x92, 0x44, 0x42, 0xb2,
	0x80, 0x5d, 0x9d, 0x6f, 0x50, 0xf6, 0x59, 0xe0, 0xb3, 0x90, 0xb0, 0x7f, 0x8f, 0xc6, 0xd2, 0x7b,
	0xb9, 0xcb, 0xb8, 0xbd, 0x8a, 0xf7, 0x30, 0x6a, 0x8b, 0xb9, 0x87, 0x1a, 0xe5, 0x80, 0xe5, 0x34,
	0xb2, 0x6f, 0x84, 0xc4, 0x09, 0x4c, 0x5b, 0x8b, 0x6d, 0x56, 0xc1, 0xb6, 0xc7, 0xb6, 0x49, 0xe4,
	0x37, 0xcd, 0x8a, 0x9d, 0x47, 0x90, 0xf8, 0xbf, 0xb3, 0x75, 0x5e, 0xa0, 0xdc, 0x0f, 0x8d, 0x75,
	0x40, 0xbc, 0x84, 0x81, 0xab, 0x6e, 0x51, 0xcb, 0x21, 0x2b, 0xe1, 0xe2, 0xa7, 0x29, 0xaa, 0x4d,
	0x9d, 0xeb, 0x07, 0x3f, 0x4d, 0x12, 0x1e, 0x45, 0x42, 0xd3, 0x1c, 0xc3, 0x58, 0xd9, 0x65, 0xa9,
	0x6c, 0x51, 0x51, 0xcb, 0x58, 0x4a, 0x20, 0xc7, 0x30, 0x1b, 0x29, 0x7b, 0xd1, 0x31, 0x71, 0x00,
	0x43, 0xa5, 0xd7, 0x26, 0xf7, 0x15, 0xd2, 0x30, 0x1f, 0xdf, 0xe9, 0x7d, 0x06, 0xa2, 0x6d, 0x3e,
	0x77, 0xce, 0xa8, 0x55, 0xe3, 0xd0, 0xca, 0x11, 0x99, 0xd2, 0xc5, 0x71, 0x88, 0xe3, 0xf4, 0xdf,
	0x28, 0x3e, 0x75, 0xd6, 0x6c, 0x66, 0xff, 0x46, 0xf3, 0x1f, 0x3d, 0x38, 0x7a, 0xec, 0x8d, 0x78,
	0x0b, 0xf4, 0x01, 0x0b, 0x83, 0x6e, 0xc9, 0x49, 0x84, 0x14, 0x21, 0xa0, 0xaf, 0x3e, 0x0f, 0x32,
	0xd0, 0x88, 0x1b, 0x0a, 0x99, 0x0d, 0x21, 0x43, 0x08, 0x88, 0x0d, 0xaf, 0x21, 0x29, 0xb5, 0x65,
	0xd5, 0x52, 0x92, 0x7d, 0x92, 0x87, 0x04, 0xbc, 0x66, 0xc5, 0x47, 0x00, 0x65, 0x6d, 0x83, 0x66,
	0x69, 0x70, 0xcd, 0x81, 0xa6, 0x8b, 0x69, 0x9c, 0xe5, 0x8a, 0x85, 0x0c, 0xd7, 0x59, 0xa2, 0xda,
	0xe3, 0xfc, 0x0c, 0x92, 0x8e, 0x77, 0xfb, 0xd1, 0xdb, 0xda, 0x0f, 0x62, 0xb7, 0x4a, 0xb7, 0xcb,
	0xc4, 0xe7, 0xc5, 0xaf, 0x1d, 0x48, 0xb7, 0xa6, 0x14, 0x5f, 0x60, 0x76, 0x6e, 0x90, 0x4e, 0xdb,
	0xf0, 0xe0, 0xbf, 0x9f, 0xf0, 0xf0, 0x55, 0x94, 0xe2, 0x3d, 0xa3, 0x2d, 0xa8, 0xb4, 0xc5, 0xf9,
	0x0b, 0x5f, 0xe9, 0x02, 0xef, 0xf0, 0x19, 0x2a, 0x7d, 0x86, 0xc9, 0x25, 0xba, 0x27, 0x97, 0xb9,
	0x84, 0xe9, 0x75, 0xee, 0x8a, 0xef, 0xcf, 0xd1, 0xcf, 0x75, 0xf3, 0xe4, 0x7e, 0x56, 0x7b, 0x2c,
	0x9c, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x21, 0x22, 0xda, 0xf1, 0x51, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CertificateClient is the client API for Certificate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificateClient interface {
	CreateCertificate(ctx context.Context, in *CertificateService, opts ...grpc.CallOption) (*ServiceResponse, error)
	DeleteCertificate(ctx context.Context, in *CertificateService, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetCertificate(ctx context.Context, in *CertificateService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PatchCertificate(ctx context.Context, in *CertificateService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PutCertificate(ctx context.Context, in *CertificateService, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type certificateClient struct {
	cc grpc.ClientConnInterface
}

func NewCertificateClient(cc grpc.ClientConnInterface) CertificateClient {
	return &certificateClient{cc}
}

func (c *certificateClient) CreateCertificate(ctx context.Context, in *CertificateService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Certificate/CreateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateClient) DeleteCertificate(ctx context.Context, in *CertificateService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Certificate/DeleteCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateClient) GetCertificate(ctx context.Context, in *CertificateService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Certificate/GetCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateClient) PatchCertificate(ctx context.Context, in *CertificateService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Certificate/PatchCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateClient) PutCertificate(ctx context.Context, in *CertificateService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Certificate/PutCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateServer is the server API for Certificate service.
type CertificateServer interface {
	CreateCertificate(context.Context, *CertificateService) (*ServiceResponse, error)
	DeleteCertificate(context.Context, *CertificateService) (*ServiceResponse, error)
	GetCertificate(context.Context, *CertificateService) (*ServiceResponse, error)
	PatchCertificate(context.Context, *CertificateService) (*ServiceResponse, error)
	PutCertificate(context.Context, *CertificateService) (*ServiceResponse, error)
}

// UnimplementedCertificateServer can be embedded to have forward compatible implementations.
type UnimplementedCertificateServer struct {
}

func (*UnimplementedCertificateServer) CreateCertificate(ctx context.Context, req *CertificateService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificate not implemented")
}
func (*UnimplementedCertificateServer) DeleteCertificate(ctx context.Context, req *CertificateService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCertificate not implemented")
}
func (*UnimplementedCertificateServer) GetCertificate(ctx context.Context, req *CertificateService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificate not implemented")
}
func (*UnimplementedCertificateServer) PatchCertificate(ctx context.Context, req *CertificateService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchCertificate not implemented")
}
func (*UnimplementedCertificateServer) PutCertificate(ctx context.Context, req *CertificateService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCertificate not implemented")
}

func RegisterCertificateServer(s *grpc.Server, srv CertificateServer) {
	s.RegisterService(&_Certificate_serviceDesc, srv)
}

func _Certificate_CreateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServer).CreateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Certificate/CreateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServer).CreateCertificate(ctx, req.(*CertificateService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificate_DeleteCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServer).DeleteCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Certificate/DeleteCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServer).DeleteCertificate(ctx, req.(*CertificateService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificate_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Certificate/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServer).GetCertificate(ctx, req.(*CertificateService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificate_PatchCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServer).PatchCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Certificate/PatchCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServer).PatchCertificate(ctx, req.(*CertificateService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificate_PutCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServer).PutCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Certificate/PutCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServer).PutCertificate(ctx, req.(*CertificateService))
	}
	return interceptor(ctx, in, info, handler)
}

var _Certificate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Certificate",
	HandlerType: (*CertificateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCertificate",
			Handler:    _Certificate_CreateCertificate_Handler,
		},
		{
			MethodName: "DeleteCertificate",
			Handler:    _Certificate_DeleteCertificate_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _Certificate_GetCertificate_Handler,
		},
		{
			MethodName: "PatchCertificate",
			Handler:    _Certificate_PatchCertificate_Handler,
		},
		{
			MethodName: "PutCertificate",
			Handler:    _Certificate_PutCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certificate.proto",
}
