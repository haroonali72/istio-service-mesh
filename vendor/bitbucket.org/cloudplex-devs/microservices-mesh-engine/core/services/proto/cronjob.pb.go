// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cronjob.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConcurrencyPolicy int32

const (
	ConcurrencyPolicy_Allow   ConcurrencyPolicy = 0
	ConcurrencyPolicy_Forbid  ConcurrencyPolicy = 1
	ConcurrencyPolicy_Replace ConcurrencyPolicy = 2
)

var ConcurrencyPolicy_name = map[int32]string{
	0: "Allow",
	1: "Forbid",
	2: "Replace",
}

var ConcurrencyPolicy_value = map[string]int32{
	"Allow":   0,
	"Forbid":  1,
	"Replace": 2,
}

func (x ConcurrencyPolicy) String() string {
	return proto.EnumName(ConcurrencyPolicy_name, int32(x))
}

func (ConcurrencyPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9693a1980b1a682f, []int{0}
}

type CronJobService struct {
	ProjectId               string                   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ServiceId               string                   `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name                    string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version                 string                   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	ServiceType             string                   `protobuf:"bytes,5,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	ServiceSubType          string                   `protobuf:"bytes,6,opt,name=service_sub_type,json=serviceSubType,proto3" json:"service_sub_type,omitempty"`
	Namespace               string                   `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Token                   string                   `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	CompanyId               string                   `protobuf:"bytes,9,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	CronJobServiceAttribute *CronJobServiceAttribute `protobuf:"bytes,10,opt,name=CronJobServiceAttribute,proto3" json:"CronJobServiceAttribute,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                 `json:"-"`
	XXX_unrecognized        []byte                   `json:"-"`
	XXX_sizecache           int32                    `json:"-"`
}

func (m *CronJobService) Reset()         { *m = CronJobService{} }
func (m *CronJobService) String() string { return proto.CompactTextString(m) }
func (*CronJobService) ProtoMessage()    {}
func (*CronJobService) Descriptor() ([]byte, []int) {
	return fileDescriptor_9693a1980b1a682f, []int{0}
}

func (m *CronJobService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronJobService.Unmarshal(m, b)
}
func (m *CronJobService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronJobService.Marshal(b, m, deterministic)
}
func (m *CronJobService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronJobService.Merge(m, src)
}
func (m *CronJobService) XXX_Size() int {
	return xxx_messageInfo_CronJobService.Size(m)
}
func (m *CronJobService) XXX_DiscardUnknown() {
	xxx_messageInfo_CronJobService.DiscardUnknown(m)
}

var xxx_messageInfo_CronJobService proto.InternalMessageInfo

func (m *CronJobService) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CronJobService) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *CronJobService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CronJobService) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CronJobService) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *CronJobService) GetServiceSubType() string {
	if m != nil {
		return m.ServiceSubType
	}
	return ""
}

func (m *CronJobService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CronJobService) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CronJobService) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *CronJobService) GetCronJobServiceAttribute() *CronJobServiceAttribute {
	if m != nil {
		return m.CronJobServiceAttribute
	}
	return nil
}

type CronJobServiceAttribute struct {
	Schedule                   string                      `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	StartingDeadlineSeconds    *StartingDeadlineSeconds    `protobuf:"bytes,2,opt,name=starting_deadline_seconds,json=startingDeadlineSeconds,proto3" json:"starting_deadline_seconds,omitempty"`
	ConcurrencyPolicy          ConcurrencyPolicy           `protobuf:"varint,3,opt,name=concurrency_policy,json=concurrencyPolicy,proto3,enum=proto.ConcurrencyPolicy" json:"concurrency_policy,omitempty"`
	Suspend                    *Suspend                    `protobuf:"bytes,4,opt,name=suspend,proto3" json:"suspend,omitempty"`
	FailedJobsHistoryLimit     *FailedJobsHistoryLimit     `protobuf:"bytes,5,opt,name=failed_jobs_history_limit,json=failedJobsHistoryLimit,proto3" json:"failed_jobs_history_limit,omitempty"`
	SuccessfulJobsHistoryLimit *SuccessfulJobsHistoryLimit `protobuf:"bytes,6,opt,name=successful_jobs_history_limit,json=successfulJobsHistoryLimit,proto3" json:"successful_jobs_history_limit,omitempty"`
	Labels                     map[string]string           `protobuf:"bytes,16,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations                map[string]string           `protobuf:"bytes,17,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LabelSelector              *LabelSelectorObj           `protobuf:"bytes,21,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	Volumes                    []*Volume                   `protobuf:"bytes,18,rep,name=volumes,proto3" json:"volumes,omitempty"`
	Containers                 []*ContainerAttributes      `protobuf:"bytes,19,rep,name=containers,proto3" json:"containers,omitempty"`
	InitContainers             []*ContainerAttributes      `protobuf:"bytes,20,rep,name=init_containers,json=initContainers,proto3" json:"init_containers,omitempty"`
	IstioConfig                *IstioConfig                `protobuf:"bytes,22,opt,name=istio_config,json=istioConfig,proto3" json:"istio_config,omitempty"`
	NodeSelector               map[string]string           `protobuf:"bytes,23,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Roles                      []*K8SRbacAttribute         `protobuf:"bytes,24,rep,name=roles,proto3" json:"roles,omitempty"`
	IstioRoles                 []*IstioRbacAttribute       `protobuf:"bytes,25,rep,name=istio_roles,json=istioRoles,proto3" json:"istio_roles,omitempty"`
	IsRbacEnabled              bool                        `protobuf:"varint,26,opt,name=is_rbac_enabled,json=isRbacEnabled,proto3" json:"is_rbac_enabled,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                    `json:"-"`
	XXX_unrecognized           []byte                      `json:"-"`
	XXX_sizecache              int32                       `json:"-"`
}

func (m *CronJobServiceAttribute) Reset()         { *m = CronJobServiceAttribute{} }
func (m *CronJobServiceAttribute) String() string { return proto.CompactTextString(m) }
func (*CronJobServiceAttribute) ProtoMessage()    {}
func (*CronJobServiceAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_9693a1980b1a682f, []int{1}
}

func (m *CronJobServiceAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronJobServiceAttribute.Unmarshal(m, b)
}
func (m *CronJobServiceAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronJobServiceAttribute.Marshal(b, m, deterministic)
}
func (m *CronJobServiceAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronJobServiceAttribute.Merge(m, src)
}
func (m *CronJobServiceAttribute) XXX_Size() int {
	return xxx_messageInfo_CronJobServiceAttribute.Size(m)
}
func (m *CronJobServiceAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_CronJobServiceAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_CronJobServiceAttribute proto.InternalMessageInfo

func (m *CronJobServiceAttribute) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *CronJobServiceAttribute) GetStartingDeadlineSeconds() *StartingDeadlineSeconds {
	if m != nil {
		return m.StartingDeadlineSeconds
	}
	return nil
}

func (m *CronJobServiceAttribute) GetConcurrencyPolicy() ConcurrencyPolicy {
	if m != nil {
		return m.ConcurrencyPolicy
	}
	return ConcurrencyPolicy_Allow
}

func (m *CronJobServiceAttribute) GetSuspend() *Suspend {
	if m != nil {
		return m.Suspend
	}
	return nil
}

func (m *CronJobServiceAttribute) GetFailedJobsHistoryLimit() *FailedJobsHistoryLimit {
	if m != nil {
		return m.FailedJobsHistoryLimit
	}
	return nil
}

func (m *CronJobServiceAttribute) GetSuccessfulJobsHistoryLimit() *SuccessfulJobsHistoryLimit {
	if m != nil {
		return m.SuccessfulJobsHistoryLimit
	}
	return nil
}

func (m *CronJobServiceAttribute) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CronJobServiceAttribute) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *CronJobServiceAttribute) GetLabelSelector() *LabelSelectorObj {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *CronJobServiceAttribute) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *CronJobServiceAttribute) GetContainers() []*ContainerAttributes {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *CronJobServiceAttribute) GetInitContainers() []*ContainerAttributes {
	if m != nil {
		return m.InitContainers
	}
	return nil
}

func (m *CronJobServiceAttribute) GetIstioConfig() *IstioConfig {
	if m != nil {
		return m.IstioConfig
	}
	return nil
}

func (m *CronJobServiceAttribute) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *CronJobServiceAttribute) GetRoles() []*K8SRbacAttribute {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *CronJobServiceAttribute) GetIstioRoles() []*IstioRbacAttribute {
	if m != nil {
		return m.IstioRoles
	}
	return nil
}

func (m *CronJobServiceAttribute) GetIsRbacEnabled() bool {
	if m != nil {
		return m.IsRbacEnabled
	}
	return false
}

type StartingDeadlineSeconds struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartingDeadlineSeconds) Reset()         { *m = StartingDeadlineSeconds{} }
func (m *StartingDeadlineSeconds) String() string { return proto.CompactTextString(m) }
func (*StartingDeadlineSeconds) ProtoMessage()    {}
func (*StartingDeadlineSeconds) Descriptor() ([]byte, []int) {
	return fileDescriptor_9693a1980b1a682f, []int{2}
}

func (m *StartingDeadlineSeconds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartingDeadlineSeconds.Unmarshal(m, b)
}
func (m *StartingDeadlineSeconds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartingDeadlineSeconds.Marshal(b, m, deterministic)
}
func (m *StartingDeadlineSeconds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartingDeadlineSeconds.Merge(m, src)
}
func (m *StartingDeadlineSeconds) XXX_Size() int {
	return xxx_messageInfo_StartingDeadlineSeconds.Size(m)
}
func (m *StartingDeadlineSeconds) XXX_DiscardUnknown() {
	xxx_messageInfo_StartingDeadlineSeconds.DiscardUnknown(m)
}

var xxx_messageInfo_StartingDeadlineSeconds proto.InternalMessageInfo

func (m *StartingDeadlineSeconds) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Suspend struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Suspend) Reset()         { *m = Suspend{} }
func (m *Suspend) String() string { return proto.CompactTextString(m) }
func (*Suspend) ProtoMessage()    {}
func (*Suspend) Descriptor() ([]byte, []int) {
	return fileDescriptor_9693a1980b1a682f, []int{3}
}

func (m *Suspend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Suspend.Unmarshal(m, b)
}
func (m *Suspend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Suspend.Marshal(b, m, deterministic)
}
func (m *Suspend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Suspend.Merge(m, src)
}
func (m *Suspend) XXX_Size() int {
	return xxx_messageInfo_Suspend.Size(m)
}
func (m *Suspend) XXX_DiscardUnknown() {
	xxx_messageInfo_Suspend.DiscardUnknown(m)
}

var xxx_messageInfo_Suspend proto.InternalMessageInfo

func (m *Suspend) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type SuccessfulJobsHistoryLimit struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuccessfulJobsHistoryLimit) Reset()         { *m = SuccessfulJobsHistoryLimit{} }
func (m *SuccessfulJobsHistoryLimit) String() string { return proto.CompactTextString(m) }
func (*SuccessfulJobsHistoryLimit) ProtoMessage()    {}
func (*SuccessfulJobsHistoryLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9693a1980b1a682f, []int{4}
}

func (m *SuccessfulJobsHistoryLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuccessfulJobsHistoryLimit.Unmarshal(m, b)
}
func (m *SuccessfulJobsHistoryLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuccessfulJobsHistoryLimit.Marshal(b, m, deterministic)
}
func (m *SuccessfulJobsHistoryLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuccessfulJobsHistoryLimit.Merge(m, src)
}
func (m *SuccessfulJobsHistoryLimit) XXX_Size() int {
	return xxx_messageInfo_SuccessfulJobsHistoryLimit.Size(m)
}
func (m *SuccessfulJobsHistoryLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_SuccessfulJobsHistoryLimit.DiscardUnknown(m)
}

var xxx_messageInfo_SuccessfulJobsHistoryLimit proto.InternalMessageInfo

func (m *SuccessfulJobsHistoryLimit) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type FailedJobsHistoryLimit struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FailedJobsHistoryLimit) Reset()         { *m = FailedJobsHistoryLimit{} }
func (m *FailedJobsHistoryLimit) String() string { return proto.CompactTextString(m) }
func (*FailedJobsHistoryLimit) ProtoMessage()    {}
func (*FailedJobsHistoryLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9693a1980b1a682f, []int{5}
}

func (m *FailedJobsHistoryLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailedJobsHistoryLimit.Unmarshal(m, b)
}
func (m *FailedJobsHistoryLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailedJobsHistoryLimit.Marshal(b, m, deterministic)
}
func (m *FailedJobsHistoryLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailedJobsHistoryLimit.Merge(m, src)
}
func (m *FailedJobsHistoryLimit) XXX_Size() int {
	return xxx_messageInfo_FailedJobsHistoryLimit.Size(m)
}
func (m *FailedJobsHistoryLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_FailedJobsHistoryLimit.DiscardUnknown(m)
}

var xxx_messageInfo_FailedJobsHistoryLimit proto.InternalMessageInfo

func (m *FailedJobsHistoryLimit) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.ConcurrencyPolicy", ConcurrencyPolicy_name, ConcurrencyPolicy_value)
	proto.RegisterType((*CronJobService)(nil), "proto.CronJobService")
	proto.RegisterType((*CronJobServiceAttribute)(nil), "proto.CronJobServiceAttribute")
	proto.RegisterMapType((map[string]string)(nil), "proto.CronJobServiceAttribute.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.CronJobServiceAttribute.LabelsEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.CronJobServiceAttribute.NodeSelectorEntry")
	proto.RegisterType((*StartingDeadlineSeconds)(nil), "proto.StartingDeadlineSeconds")
	proto.RegisterType((*Suspend)(nil), "proto.Suspend")
	proto.RegisterType((*SuccessfulJobsHistoryLimit)(nil), "proto.SuccessfulJobsHistoryLimit")
	proto.RegisterType((*FailedJobsHistoryLimit)(nil), "proto.FailedJobsHistoryLimit")
}

func init() {
	proto.RegisterFile("cronjob.proto", fileDescriptor_9693a1980b1a682f)
}

var fileDescriptor_9693a1980b1a682f = []byte{
	// 897 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xae, 0x9d, 0xda, 0x8e, 0x8f, 0x7f, 0xea, 0x0c, 0x6d, 0xbc, 0xb1, 0x08, 0xa4, 0xbe, 0x00,
	0xab, 0x12, 0x2e, 0x32, 0x42, 0x94, 0x48, 0xb4, 0x04, 0xf7, 0x87, 0x94, 0x0a, 0xc2, 0x1a, 0x50,
	0xc5, 0xcd, 0x6a, 0x77, 0xf6, 0x24, 0x99, 0x74, 0x32, 0xb3, 0x9a, 0x99, 0x0d, 0xf2, 0xeb, 0xf0,
	0x3c, 0x3c, 0x0f, 0xd7, 0x68, 0x67, 0x66, 0x63, 0xa7, 0xb1, 0x89, 0xda, 0x5e, 0x25, 0xe7, 0xfb,
	0x9b, 0x33, 0x67, 0xc7, 0x07, 0x3a, 0x54, 0x49, 0x71, 0x26, 0x93, 0x71, 0xa6, 0xa4, 0x91, 0xa4,
	0x66, 0xff, 0x0c, 0x3a, 0x1a, 0xd5, 0x05, 0xa3, 0x38, 0xf6, 0xe5, 0x09, 0x0a, 0x54, 0x31, 0xf7,
	0x65, 0xfb, 0x42, 0xf2, 0xfc, 0xdc, 0x93, 0xc3, 0x7f, 0xab, 0xd0, 0x9d, 0x2a, 0x29, 0x5e, 0xca,
	0x64, 0xe6, 0x5c, 0x64, 0x17, 0x20, 0x53, 0xf2, 0x0c, 0xa9, 0x89, 0x58, 0x1a, 0x54, 0xf6, 0x2a,
	0xa3, 0x66, 0xd8, 0xf4, 0xc8, 0x61, 0x5a, 0xd0, 0x3e, 0xbf, 0xa0, 0xab, 0x8e, 0xf6, 0xc8, 0x61,
	0x4a, 0x08, 0xdc, 0x16, 0xf1, 0x39, 0x06, 0x1b, 0x96, 0xb0, 0xff, 0x93, 0x00, 0x1a, 0x17, 0xa8,
	0x34, 0x93, 0x22, 0xb8, 0x6d, 0xe1, 0xb2, 0x24, 0xf7, 0xa1, 0x5d, 0x86, 0x99, 0x79, 0x86, 0x41,
	0xcd, 0xd2, 0x2d, 0x8f, 0xfd, 0x36, 0xcf, 0x90, 0x8c, 0xa0, 0x57, 0x4a, 0x74, 0x9e, 0x38, 0x59,
	0xdd, 0xca, 0xba, 0x1e, 0x9f, 0xe5, 0x89, 0x55, 0x7e, 0x0c, 0xcd, 0xe2, 0x38, 0x9d, 0xc5, 0x14,
	0x83, 0x86, 0x6b, 0xec, 0x12, 0x20, 0x77, 0xa1, 0x66, 0xe4, 0x1b, 0x14, 0xc1, 0xa6, 0x65, 0x5c,
	0x51, 0xdc, 0x86, 0xca, 0xf3, 0x2c, 0x16, 0xf3, 0xe2, 0x36, 0x4d, 0x67, 0xf2, 0xc8, 0x61, 0x4a,
	0x5e, 0x43, 0xff, 0xea, 0x74, 0x0e, 0x8c, 0x51, 0x2c, 0xc9, 0x0d, 0x06, 0xb0, 0x57, 0x19, 0xb5,
	0x26, 0x9f, 0xb8, 0x39, 0x8e, 0xd7, 0xa8, 0xc2, 0x75, 0xf6, 0xe1, 0xdf, 0xb0, 0x36, 0x9a, 0x0c,
	0x60, 0x53, 0xd3, 0x53, 0x4c, 0x73, 0x8e, 0x7e, 0xfe, 0x97, 0x35, 0xf9, 0x13, 0x76, 0xb4, 0x89,
	0x95, 0x61, 0xe2, 0x24, 0x4a, 0x31, 0x4e, 0x39, 0x13, 0x18, 0x69, 0xa4, 0x52, 0xa4, 0xda, 0x7e,
	0x8d, 0x45, 0x4f, 0x33, 0xaf, 0x7b, 0xea, 0x65, 0x33, 0xa7, 0x0a, 0xfb, 0x7a, 0x35, 0x41, 0x5e,
	0x00, 0xa1, 0x52, 0xd0, 0x5c, 0x29, 0x14, 0x74, 0x1e, 0x65, 0x92, 0x33, 0x3a, 0xb7, 0x5f, 0xb2,
	0x3b, 0x09, 0xca, 0x8b, 0x2e, 0x04, 0x47, 0x96, 0x0f, 0xb7, 0xe8, 0xdb, 0x10, 0x19, 0x41, 0x43,
	0xe7, 0x3a, 0x43, 0x91, 0xda, 0x0f, 0xde, 0x9a, 0x74, 0xcb, 0x96, 0x1c, 0x1a, 0x96, 0x34, 0x79,
	0x0d, 0x3b, 0xc7, 0x31, 0xe3, 0x98, 0x46, 0x67, 0x32, 0xd1, 0xd1, 0x29, 0xd3, 0x46, 0xaa, 0x79,
	0xc4, 0xd9, 0x39, 0x33, 0xf6, 0x35, 0xb4, 0x26, 0xbb, 0xde, 0xfb, 0xdc, 0xea, 0x5e, 0xca, 0x44,
	0xff, 0xe8, 0x54, 0xaf, 0x0a, 0x51, 0xb8, 0x7d, 0xbc, 0x12, 0x27, 0x29, 0xec, 0xea, 0x9c, 0x52,
	0xd4, 0xfa, 0x38, 0xe7, 0xab, 0xd2, 0xeb, 0x36, 0xfd, 0xfe, 0x65, 0x67, 0xa5, 0xf6, 0xda, 0x09,
	0x03, 0xbd, 0x96, 0x23, 0x3f, 0x40, 0x9d, 0xc7, 0x09, 0x72, 0x1d, 0xf4, 0xf6, 0x36, 0x46, 0xad,
	0xc9, 0x83, 0xff, 0x7f, 0x0f, 0xe3, 0x57, 0x56, 0xfc, 0x4c, 0x18, 0x35, 0x0f, 0xbd, 0x93, 0xfc,
	0x0a, 0xad, 0x58, 0x08, 0x69, 0x62, 0xc3, 0xa4, 0xd0, 0xc1, 0x96, 0x0d, 0x7a, 0x78, 0x43, 0xd0,
	0xc1, 0xc2, 0xe1, 0xd2, 0x96, 0x33, 0xc8, 0x63, 0xe8, 0xda, 0xf0, 0x48, 0x23, 0x47, 0x6a, 0xa4,
	0x0a, 0xee, 0xd9, 0xdb, 0xf6, 0x7d, 0xaa, 0x6d, 0x63, 0xe6, 0xb9, 0x5f, 0x92, 0xb3, 0xb0, 0xc3,
	0x97, 0x11, 0xf2, 0x39, 0x34, 0xdc, 0x9a, 0xd0, 0x01, 0xb1, 0xed, 0x74, 0xbc, 0xf1, 0x0f, 0x8b,
	0x86, 0x25, 0x4b, 0xf6, 0x8b, 0xdf, 0x8f, 0x30, 0x31, 0x13, 0xa8, 0x74, 0xf0, 0x91, 0xd5, 0x0e,
	0x16, 0x4f, 0xc5, 0x11, 0x97, 0x5d, 0xeb, 0x70, 0x49, 0x4d, 0xa6, 0x70, 0x87, 0x09, 0x66, 0xa2,
	0xa5, 0x80, 0xbb, 0x37, 0x06, 0x74, 0x0b, 0xcb, 0x74, 0x11, 0xf2, 0x35, 0xb4, 0x99, 0x36, 0x4c,
	0x16, 0x29, 0xc7, 0xec, 0x24, 0xd8, 0xb6, 0xf7, 0x24, 0x3e, 0xe1, 0xb0, 0xa0, 0xa6, 0x96, 0x09,
	0x5b, 0x6c, 0x51, 0x90, 0xdf, 0xa1, 0x23, 0x64, 0x8a, 0x8b, 0xf9, 0xf4, 0xed, 0xc9, 0x5f, 0xde,
	0x30, 0xf5, 0x9f, 0x65, 0x8a, 0xe5, 0x90, 0xdc, 0xd8, 0xdb, 0x62, 0x09, 0x22, 0x5f, 0x40, 0x4d,
	0x49, 0x8e, 0x3a, 0x08, 0x6c, 0x5c, 0x39, 0xee, 0x9f, 0x1e, 0xe9, 0x30, 0x89, 0xe9, 0x62, 0x2d,
	0x38, 0x15, 0xd9, 0x07, 0xd7, 0x54, 0xe4, 0x4c, 0x3b, 0xd6, 0xb4, 0xb3, 0xdc, 0xfb, 0x55, 0x1b,
	0x58, 0x75, 0x68, 0xbd, 0x9f, 0xc1, 0x1d, 0xa6, 0x23, 0x95, 0xc4, 0x34, 0x42, 0x11, 0x27, 0x1c,
	0xd3, 0x60, 0xb0, 0x57, 0x19, 0x6d, 0x86, 0x1d, 0x66, 0x0f, 0x7b, 0xe6, 0xc0, 0xc1, 0xb7, 0xd0,
	0x5a, 0x7a, 0x74, 0xa4, 0x07, 0x1b, 0x6f, 0x70, 0xee, 0xd7, 0x4a, 0xf1, 0x6f, 0xb1, 0x18, 0x2f,
	0x62, 0x9e, 0xa3, 0xdf, 0xe5, 0xae, 0xd8, 0xaf, 0x3e, 0xaa, 0x0c, 0x1e, 0x43, 0xef, 0xed, 0x67,
	0xf6, 0x4e, 0xfe, 0x27, 0xb0, 0x75, 0x6d, 0x60, 0xef, 0x12, 0x30, 0x7c, 0x08, 0xfd, 0x35, 0x4b,
	0x6c, 0x61, 0x2a, 0x82, 0x36, 0xbc, 0x69, 0xf8, 0x29, 0x34, 0xfc, 0x8a, 0xb9, 0x2a, 0xd8, 0x2c,
	0x05, 0x13, 0x18, 0xac, 0xff, 0xa5, 0x5f, 0xf5, 0xd4, 0x4a, 0xcf, 0x18, 0xb6, 0x57, 0xef, 0x9e,
	0xd5, 0xfa, 0x07, 0xdf, 0xc0, 0xd6, 0xb5, 0x2d, 0x49, 0x9a, 0x50, 0x3b, 0xe0, 0x5c, 0xfe, 0xd5,
	0xbb, 0x45, 0x00, 0xea, 0xcf, 0xa5, 0x4a, 0x58, 0xda, 0xab, 0x90, 0x16, 0x34, 0x42, 0xcc, 0x78,
	0x4c, 0xb1, 0x57, 0x9d, 0xfc, 0x53, 0x85, 0x86, 0x7f, 0x79, 0xe4, 0x7b, 0xe8, 0x4c, 0x15, 0xc6,
	0x06, 0x4b, 0xe0, 0xde, 0xca, 0xa7, 0x39, 0xd8, 0x2e, 0xf7, 0x97, 0xab, 0x43, 0xd4, 0x99, 0x14,
	0x1a, 0x87, 0xb7, 0x8a, 0x84, 0xa7, 0xc8, 0xf1, 0x03, 0x12, 0xbe, 0x03, 0x78, 0x81, 0xe6, 0xbd,
	0xed, 0x4f, 0xa0, 0x7d, 0x14, 0x1b, 0x7a, 0xfa, 0x21, 0xe7, 0x1f, 0xe5, 0xef, 0x7d, 0x7e, 0x52,
	0xb7, 0xc4, 0x57, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x34, 0x62, 0x12, 0x26, 0x09, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CronJobClient is the client API for CronJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronJobClient interface {
	CreateCronJob(ctx context.Context, in *CronJobService, opts ...grpc.CallOption) (*ServiceResponse, error)
	DeleteCronJob(ctx context.Context, in *CronJobService, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetCronJob(ctx context.Context, in *CronJobService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PatchCronJob(ctx context.Context, in *CronJobService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PutCronJob(ctx context.Context, in *CronJobService, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type cronJobClient struct {
	cc grpc.ClientConnInterface
}

func NewCronJobClient(cc grpc.ClientConnInterface) CronJobClient {
	return &cronJobClient{cc}
}

func (c *cronJobClient) CreateCronJob(ctx context.Context, in *CronJobService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.CronJob/CreateCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronJobClient) DeleteCronJob(ctx context.Context, in *CronJobService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.CronJob/DeleteCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronJobClient) GetCronJob(ctx context.Context, in *CronJobService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.CronJob/GetCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronJobClient) PatchCronJob(ctx context.Context, in *CronJobService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.CronJob/PatchCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronJobClient) PutCronJob(ctx context.Context, in *CronJobService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.CronJob/PutCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronJobServer is the server API for CronJob service.
type CronJobServer interface {
	CreateCronJob(context.Context, *CronJobService) (*ServiceResponse, error)
	DeleteCronJob(context.Context, *CronJobService) (*ServiceResponse, error)
	GetCronJob(context.Context, *CronJobService) (*ServiceResponse, error)
	PatchCronJob(context.Context, *CronJobService) (*ServiceResponse, error)
	PutCronJob(context.Context, *CronJobService) (*ServiceResponse, error)
}

// UnimplementedCronJobServer can be embedded to have forward compatible implementations.
type UnimplementedCronJobServer struct {
}

func (*UnimplementedCronJobServer) CreateCronJob(ctx context.Context, req *CronJobService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronJob not implemented")
}
func (*UnimplementedCronJobServer) DeleteCronJob(ctx context.Context, req *CronJobService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronJob not implemented")
}
func (*UnimplementedCronJobServer) GetCronJob(ctx context.Context, req *CronJobService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronJob not implemented")
}
func (*UnimplementedCronJobServer) PatchCronJob(ctx context.Context, req *CronJobService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchCronJob not implemented")
}
func (*UnimplementedCronJobServer) PutCronJob(ctx context.Context, req *CronJobService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCronJob not implemented")
}

func RegisterCronJobServer(s *grpc.Server, srv CronJobServer) {
	s.RegisterService(&_CronJob_serviceDesc, srv)
}

func _CronJob_CreateCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronJobService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobServer).CreateCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CronJob/CreateCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobServer).CreateCronJob(ctx, req.(*CronJobService))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronJob_DeleteCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronJobService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobServer).DeleteCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CronJob/DeleteCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobServer).DeleteCronJob(ctx, req.(*CronJobService))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronJob_GetCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronJobService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobServer).GetCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CronJob/GetCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobServer).GetCronJob(ctx, req.(*CronJobService))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronJob_PatchCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronJobService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobServer).PatchCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CronJob/PatchCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobServer).PatchCronJob(ctx, req.(*CronJobService))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronJob_PutCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronJobService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobServer).PutCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CronJob/PutCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobServer).PutCronJob(ctx, req.(*CronJobService))
	}
	return interceptor(ctx, in, info, handler)
}

var _CronJob_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CronJob",
	HandlerType: (*CronJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCronJob",
			Handler:    _CronJob_CreateCronJob_Handler,
		},
		{
			MethodName: "DeleteCronJob",
			Handler:    _CronJob_DeleteCronJob_Handler,
		},
		{
			MethodName: "GetCronJob",
			Handler:    _CronJob_GetCronJob_Handler,
		},
		{
			MethodName: "PatchCronJob",
			Handler:    _CronJob_PatchCronJob_Handler,
		},
		{
			MethodName: "PutCronJob",
			Handler:    _CronJob_PutCronJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cronjob.proto",
}
