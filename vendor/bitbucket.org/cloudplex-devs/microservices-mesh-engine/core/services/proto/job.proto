syntax = "proto3";
package proto;

import "general.proto";
import "service.proto";
import "volume.proto";

service Job {
    rpc CreateJob (JobService) returns (ServiceResponse) {}
    rpc DeleteJob (JobService) returns (ServiceResponse) {}
    rpc GetJob (JobService) returns (ServiceResponse) {}
    rpc PatchJob (JobService) returns (ServiceResponse) {}
    rpc PutJob (JobService) returns (ServiceResponse) {}
}

message JobService {
    string application_id = 1;
    string service_id = 2;
    string name = 3;
    string version = 4;
    string service_type = 5;
    string service_sub_type = 6;
    string namespace = 7;
    string token = 8;
    string company_id = 9;
    bool   is_discovered = 10;
    string infra_id = 11;
    JobServiceAttribute service_attributes = 12;
    HookConfiguration hook_configuration=13;
}

message JobServiceAttribute {
    Parallelism parallelism = 1;
    Completions completions = 2;
    ActiveDeadlineSeconds active_deadline_seconds = 3;
    BackoffLimit backoff_limit = 4;
    LabelSelectorObj label_selector = 5;
    ManualSelector manual_selector = 6;
    IstioConfig istio_config = 7;
    repeated Volume volumes = 8;
    map<string, string> node_selector = 9;
    Affinity affinity = 10;
    TTLSecondsAfterFinished ttl_seconds_after_finished = 11;
    map<string, string> labels = 15;
    map<string, string> annotations = 16;
    repeated K8sRbacAttribute roles= 20;
    repeated IstioRbacAttribute istio_roles = 21;
    repeated ContainerAttributes containers = 22;
    repeated ContainerAttributes init_containers = 23;
    bool is_rbac_enabled = 24;
}

message Parallelism{
    int32 value = 1;
}
message Completions{
    int32 value = 1;
}

message BackoffLimit{
    int32 value = 1;
}

message ManualSelector {
    bool value = 1;
}

message TTLSecondsAfterFinished{
    int32 value = 1;
}