// Code generated by protoc-gen-go. DO NOT EDIT.
// source: clusterrolebinding.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClusterRoleBinding struct {
	ProjectId             string                     `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ServiceId             string                     `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name                  string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ServiceType           string                     `protobuf:"bytes,4,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	ServiceSubType        string                     `protobuf:"bytes,5,opt,name=service_sub_type,json=serviceSubType,proto3" json:"service_sub_type,omitempty"`
	Status                string                     `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Token                 string                     `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	ServiceDependencyInfo *any.Any                   `protobuf:"bytes,8,opt,name=service_dependency_info,json=serviceDependencyInfo,proto3" json:"service_dependency_info,omitempty"`
	ServiceAttributes     *ClusterRoleBindingSvcAttr `protobuf:"bytes,9,opt,name=service_attributes,json=serviceAttributes,proto3" json:"service_attributes,omitempty"`
	CompanyId             string                     `protobuf:"bytes,10,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Version               string                     `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	Namespace             string                     `protobuf:"bytes,12,opt,name=namespace,proto3" json:"namespace,omitempty"`
	HookConfiguration     *HookConfiguration         `protobuf:"bytes,13,opt,name=hook_configuration,json=hookConfiguration,proto3" json:"hook_configuration,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                   `json:"-"`
	XXX_unrecognized      []byte                     `json:"-"`
	XXX_sizecache         int32                      `json:"-"`
}

func (m *ClusterRoleBinding) Reset()         { *m = ClusterRoleBinding{} }
func (m *ClusterRoleBinding) String() string { return proto.CompactTextString(m) }
func (*ClusterRoleBinding) ProtoMessage()    {}
func (*ClusterRoleBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_140be91298cfcbfd, []int{0}
}

func (m *ClusterRoleBinding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterRoleBinding.Unmarshal(m, b)
}
func (m *ClusterRoleBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterRoleBinding.Marshal(b, m, deterministic)
}
func (m *ClusterRoleBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterRoleBinding.Merge(m, src)
}
func (m *ClusterRoleBinding) XXX_Size() int {
	return xxx_messageInfo_ClusterRoleBinding.Size(m)
}
func (m *ClusterRoleBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterRoleBinding.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterRoleBinding proto.InternalMessageInfo

func (m *ClusterRoleBinding) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ClusterRoleBinding) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *ClusterRoleBinding) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterRoleBinding) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *ClusterRoleBinding) GetServiceSubType() string {
	if m != nil {
		return m.ServiceSubType
	}
	return ""
}

func (m *ClusterRoleBinding) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ClusterRoleBinding) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ClusterRoleBinding) GetServiceDependencyInfo() *any.Any {
	if m != nil {
		return m.ServiceDependencyInfo
	}
	return nil
}

func (m *ClusterRoleBinding) GetServiceAttributes() *ClusterRoleBindingSvcAttr {
	if m != nil {
		return m.ServiceAttributes
	}
	return nil
}

func (m *ClusterRoleBinding) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *ClusterRoleBinding) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ClusterRoleBinding) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ClusterRoleBinding) GetHookConfiguration() *HookConfiguration {
	if m != nil {
		return m.HookConfiguration
	}
	return nil
}

type ClusterRoleBindingSvcAttr struct {
	Subjects             []*Subject     `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
	RoleReference        *RoleReference `protobuf:"bytes,2,opt,name=role_reference,json=roleReference,proto3" json:"role_reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ClusterRoleBindingSvcAttr) Reset()         { *m = ClusterRoleBindingSvcAttr{} }
func (m *ClusterRoleBindingSvcAttr) String() string { return proto.CompactTextString(m) }
func (*ClusterRoleBindingSvcAttr) ProtoMessage()    {}
func (*ClusterRoleBindingSvcAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_140be91298cfcbfd, []int{1}
}

func (m *ClusterRoleBindingSvcAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterRoleBindingSvcAttr.Unmarshal(m, b)
}
func (m *ClusterRoleBindingSvcAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterRoleBindingSvcAttr.Marshal(b, m, deterministic)
}
func (m *ClusterRoleBindingSvcAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterRoleBindingSvcAttr.Merge(m, src)
}
func (m *ClusterRoleBindingSvcAttr) XXX_Size() int {
	return xxx_messageInfo_ClusterRoleBindingSvcAttr.Size(m)
}
func (m *ClusterRoleBindingSvcAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterRoleBindingSvcAttr.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterRoleBindingSvcAttr proto.InternalMessageInfo

func (m *ClusterRoleBindingSvcAttr) GetSubjects() []*Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *ClusterRoleBindingSvcAttr) GetRoleReference() *RoleReference {
	if m != nil {
		return m.RoleReference
	}
	return nil
}

func init() {
	proto.RegisterType((*ClusterRoleBinding)(nil), "proto.ClusterRoleBinding")
	proto.RegisterType((*ClusterRoleBindingSvcAttr)(nil), "proto.ClusterRoleBindingSvcAttr")
}

func init() { proto.RegisterFile("clusterrolebinding.proto", fileDescriptor_140be91298cfcbfd) }

var fileDescriptor_140be91298cfcbfd = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0x2d, 0x0d, 0x90, 0x30, 0x04, 0x54, 0x56, 0xf9, 0x58, 0x50, 0x2b, 0x51, 0x4e, 0xa8, 0x07,
	0x22, 0xd1, 0x63, 0x4f, 0x94, 0x48, 0x29, 0x52, 0x54, 0x22, 0xd3, 0x3b, 0xb2, 0xd7, 0x03, 0xb8,
	0x38, 0xbb, 0xd6, 0xee, 0x1a, 0xc9, 0xf7, 0xfe, 0x90, 0xaa, 0xbf, 0xb4, 0xda, 0x0f, 0x5b, 0xa8,
	0x69, 0x6e, 0x9c, 0x60, 0xde, 0x9b, 0xf7, 0x3c, 0xf3, 0x76, 0x80, 0xb2, 0x34, 0x57, 0x1a, 0xa5,
	0x14, 0x29, 0x46, 0x09, 0x8f, 0x13, 0xbe, 0x9d, 0x64, 0x52, 0x68, 0x41, 0x1a, 0xf6, 0x67, 0xd0,
	0x51, 0x28, 0x0f, 0x09, 0x43, 0x87, 0x0e, 0xfa, 0x5b, 0x21, 0xb6, 0x29, 0xde, 0xd9, 0x2a, 0xca,
	0x37, 0x77, 0x21, 0x2f, 0x3c, 0xd5, 0x7b, 0xe1, 0x31, 0xe8, 0x6c, 0x91, 0xa3, 0x0c, 0x53, 0x57,
	0x8e, 0x7e, 0xd7, 0x81, 0xcc, 0xdd, 0xf7, 0x02, 0x91, 0xe2, 0x57, 0xd7, 0x4b, 0x3e, 0x00, 0x64,
	0x52, 0xfc, 0x44, 0xa6, 0xd7, 0x49, 0x4c, 0x6b, 0xc3, 0xda, 0xb8, 0x15, 0xb4, 0x3c, 0xb2, 0x88,
	0x0d, 0xed, 0x67, 0x30, 0xf4, 0x5b, 0x47, 0x7b, 0x64, 0x11, 0x13, 0x02, 0x75, 0x1e, 0x3e, 0x23,
	0x3d, 0xb3, 0x84, 0xfd, 0x4f, 0x3e, 0xc2, 0x65, 0x29, 0xd1, 0x45, 0x86, 0xb4, 0x6e, 0xb9, 0xb6,
	0xc7, 0x7e, 0x14, 0x19, 0x92, 0x31, 0xbc, 0x2b, 0x5b, 0x54, 0x1e, 0xb9, 0xb6, 0x86, 0x6d, 0xeb,
	0x7a, 0x7c, 0x95, 0x47, 0xb6, 0xf3, 0x06, 0x9a, 0x4a, 0x87, 0x3a, 0x57, 0xb4, 0x69, 0x79, 0x5f,
	0x91, 0x2b, 0x68, 0x68, 0xb1, 0x47, 0x4e, 0xcf, 0x2d, 0xec, 0x0a, 0xf2, 0x08, 0xb7, 0xa5, 0x6f,
	0x8c, 0x19, 0xf2, 0x18, 0x39, 0x2b, 0xd6, 0x09, 0xdf, 0x08, 0x7a, 0x31, 0xac, 0x8d, 0xdb, 0xd3,
	0xab, 0x89, 0x8b, 0x70, 0x52, 0x46, 0x38, 0x99, 0xf1, 0x22, 0xb8, 0xf6, 0xa2, 0xfb, 0x4a, 0xb3,
	0xe0, 0x1b, 0x41, 0x96, 0x40, 0x4a, 0xb7, 0x50, 0x6b, 0x99, 0x44, 0xb9, 0x46, 0x45, 0x5b, 0xd6,
	0x68, 0xe8, 0x1c, 0x26, 0x2f, 0x13, 0x5d, 0x1d, 0xd8, 0x4c, 0x6b, 0x19, 0xf4, 0xbc, 0x76, 0x56,
	0x49, 0x4d, 0x98, 0x4c, 0x3c, 0x67, 0x21, 0x2f, 0x4c, 0x98, 0xe0, 0xc2, 0xf4, 0xc8, 0x22, 0x26,
	0x14, 0xce, 0x0f, 0x28, 0x55, 0x22, 0x38, 0x6d, 0x5b, 0xae, 0x2c, 0xc9, 0x7b, 0x68, 0x99, 0x68,
	0x55, 0x16, 0x32, 0xa4, 0x97, 0x4e, 0x57, 0x01, 0xe4, 0x01, 0xc8, 0x4e, 0x88, 0xfd, 0x9a, 0x09,
	0xbe, 0x49, 0xb6, 0xb9, 0x0c, 0xb5, 0xb1, 0xe8, 0xd8, 0x39, 0xa9, 0x9f, 0xf3, 0x9b, 0x10, 0xfb,
	0xf9, 0x31, 0x1f, 0xf4, 0x76, 0xff, 0x42, 0xa3, 0x5f, 0x35, 0xe8, 0xbf, 0xba, 0x10, 0xf9, 0x04,
	0x17, 0x2a, 0x8f, 0xcc, 0x5d, 0x28, 0x5a, 0x1b, 0x9e, 0x8d, 0xdb, 0xd3, 0xae, 0x37, 0x5f, 0x39,
	0x38, 0xa8, 0x78, 0xf2, 0x05, 0xba, 0xe6, 0x20, 0xd7, 0x12, 0x37, 0x28, 0x91, 0x33, 0xb4, 0xa7,
	0x63, 0xf2, 0x77, 0x0a, 0x63, 0x1f, 0x94, 0x5c, 0xd0, 0x91, 0xc7, 0xe5, 0xf4, 0xcf, 0x59, 0x75,
	0xa9, 0x47, 0x57, 0x4d, 0x96, 0x40, 0xe7, 0x12, 0x43, 0x8d, 0xff, 0xb9, 0xe2, 0xfe, 0xab, 0xcf,
	0x31, 0xb8, 0x29, 0x87, 0x74, 0xcf, 0x11, 0xa0, 0xca, 0x04, 0x57, 0x38, 0x7a, 0x43, 0x1e, 0xe1,
	0xfa, 0x01, 0xf5, 0xa9, 0xdc, 0x96, 0x40, 0xef, 0x31, 0xc5, 0xd3, 0x8d, 0xf7, 0x1d, 0x6e, 0x9f,
	0x42, 0xcd, 0x76, 0x27, 0x5c, 0xf7, 0x29, 0x3f, 0xd5, 0xba, 0x51, 0xd3, 0x12, 0x9f, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xac, 0xcc, 0xd1, 0xdf, 0xc4, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterrolebindingClient is the client API for Clusterrolebinding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterrolebindingClient interface {
	CreateClusterRoleBinding(ctx context.Context, in *ClusterRoleBinding, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetClusterRoleBinding(ctx context.Context, in *ClusterRoleBinding, opts ...grpc.CallOption) (*ServiceResponse, error)
	DeleteClusterRoleBinding(ctx context.Context, in *ClusterRoleBinding, opts ...grpc.CallOption) (*ServiceResponse, error)
	PatchClusterRoleBinding(ctx context.Context, in *ClusterRoleBinding, opts ...grpc.CallOption) (*ServiceResponse, error)
	PutClusterRoleBinding(ctx context.Context, in *ClusterRoleBinding, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type clusterrolebindingClient struct {
	cc *grpc.ClientConn
}

func NewClusterrolebindingClient(cc *grpc.ClientConn) ClusterrolebindingClient {
	return &clusterrolebindingClient{cc}
}

func (c *clusterrolebindingClient) CreateClusterRoleBinding(ctx context.Context, in *ClusterRoleBinding, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Clusterrolebinding/CreateClusterRoleBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterrolebindingClient) GetClusterRoleBinding(ctx context.Context, in *ClusterRoleBinding, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Clusterrolebinding/GetClusterRoleBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterrolebindingClient) DeleteClusterRoleBinding(ctx context.Context, in *ClusterRoleBinding, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Clusterrolebinding/DeleteClusterRoleBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterrolebindingClient) PatchClusterRoleBinding(ctx context.Context, in *ClusterRoleBinding, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Clusterrolebinding/PatchClusterRoleBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterrolebindingClient) PutClusterRoleBinding(ctx context.Context, in *ClusterRoleBinding, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Clusterrolebinding/PutClusterRoleBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterrolebindingServer is the server API for Clusterrolebinding service.
type ClusterrolebindingServer interface {
	CreateClusterRoleBinding(context.Context, *ClusterRoleBinding) (*ServiceResponse, error)
	GetClusterRoleBinding(context.Context, *ClusterRoleBinding) (*ServiceResponse, error)
	DeleteClusterRoleBinding(context.Context, *ClusterRoleBinding) (*ServiceResponse, error)
	PatchClusterRoleBinding(context.Context, *ClusterRoleBinding) (*ServiceResponse, error)
	PutClusterRoleBinding(context.Context, *ClusterRoleBinding) (*ServiceResponse, error)
}

// UnimplementedClusterrolebindingServer can be embedded to have forward compatible implementations.
type UnimplementedClusterrolebindingServer struct {
}

func (*UnimplementedClusterrolebindingServer) CreateClusterRoleBinding(ctx context.Context, req *ClusterRoleBinding) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClusterRoleBinding not implemented")
}
func (*UnimplementedClusterrolebindingServer) GetClusterRoleBinding(ctx context.Context, req *ClusterRoleBinding) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterRoleBinding not implemented")
}
func (*UnimplementedClusterrolebindingServer) DeleteClusterRoleBinding(ctx context.Context, req *ClusterRoleBinding) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterRoleBinding not implemented")
}
func (*UnimplementedClusterrolebindingServer) PatchClusterRoleBinding(ctx context.Context, req *ClusterRoleBinding) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchClusterRoleBinding not implemented")
}
func (*UnimplementedClusterrolebindingServer) PutClusterRoleBinding(ctx context.Context, req *ClusterRoleBinding) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutClusterRoleBinding not implemented")
}

func RegisterClusterrolebindingServer(s *grpc.Server, srv ClusterrolebindingServer) {
	s.RegisterService(&_Clusterrolebinding_serviceDesc, srv)
}

func _Clusterrolebinding_CreateClusterRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterrolebindingServer).CreateClusterRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Clusterrolebinding/CreateClusterRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterrolebindingServer).CreateClusterRoleBinding(ctx, req.(*ClusterRoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusterrolebinding_GetClusterRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterrolebindingServer).GetClusterRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Clusterrolebinding/GetClusterRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterrolebindingServer).GetClusterRoleBinding(ctx, req.(*ClusterRoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusterrolebinding_DeleteClusterRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterrolebindingServer).DeleteClusterRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Clusterrolebinding/DeleteClusterRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterrolebindingServer).DeleteClusterRoleBinding(ctx, req.(*ClusterRoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusterrolebinding_PatchClusterRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterrolebindingServer).PatchClusterRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Clusterrolebinding/PatchClusterRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterrolebindingServer).PatchClusterRoleBinding(ctx, req.(*ClusterRoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusterrolebinding_PutClusterRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterrolebindingServer).PutClusterRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Clusterrolebinding/PutClusterRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterrolebindingServer).PutClusterRoleBinding(ctx, req.(*ClusterRoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clusterrolebinding_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Clusterrolebinding",
	HandlerType: (*ClusterrolebindingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClusterRoleBinding",
			Handler:    _Clusterrolebinding_CreateClusterRoleBinding_Handler,
		},
		{
			MethodName: "GetClusterRoleBinding",
			Handler:    _Clusterrolebinding_GetClusterRoleBinding_Handler,
		},
		{
			MethodName: "DeleteClusterRoleBinding",
			Handler:    _Clusterrolebinding_DeleteClusterRoleBinding_Handler,
		},
		{
			MethodName: "PatchClusterRoleBinding",
			Handler:    _Clusterrolebinding_PatchClusterRoleBinding_Handler,
		},
		{
			MethodName: "PutClusterRoleBinding",
			Handler:    _Clusterrolebinding_PutClusterRoleBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clusterrolebinding.proto",
}
