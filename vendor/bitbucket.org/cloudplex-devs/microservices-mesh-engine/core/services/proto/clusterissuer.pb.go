// Code generated by protoc-gen-go. DO NOT EDIT.
// source: clusterissuer.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClusterIssuerService struct {
	ProjectId            string                          `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ServiceId            string                          `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name                 string                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version              string                          `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	ServiceType          string                          `protobuf:"bytes,5,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	ServiceSubType       string                          `protobuf:"bytes,6,opt,name=service_sub_type,json=serviceSubType,proto3" json:"service_sub_type,omitempty"`
	Namespace            string                          `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Token                string                          `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	CompanyId            string                          `protobuf:"bytes,9,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	IsDiscovered         bool                            `protobuf:"varint,10,opt,name=is_discovered,json=isDiscovered,proto3" json:"is_discovered,omitempty"`
	ServiceAttributes    *ClusterIssuerServiceAttributes `protobuf:"bytes,11,opt,name=service_attributes,json=serviceAttributes,proto3" json:"service_attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ClusterIssuerService) Reset()         { *m = ClusterIssuerService{} }
func (m *ClusterIssuerService) String() string { return proto.CompactTextString(m) }
func (*ClusterIssuerService) ProtoMessage()    {}
func (*ClusterIssuerService) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dafc6455e7a877b, []int{0}
}

func (m *ClusterIssuerService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterIssuerService.Unmarshal(m, b)
}
func (m *ClusterIssuerService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterIssuerService.Marshal(b, m, deterministic)
}
func (m *ClusterIssuerService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterIssuerService.Merge(m, src)
}
func (m *ClusterIssuerService) XXX_Size() int {
	return xxx_messageInfo_ClusterIssuerService.Size(m)
}
func (m *ClusterIssuerService) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterIssuerService.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterIssuerService proto.InternalMessageInfo

func (m *ClusterIssuerService) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ClusterIssuerService) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *ClusterIssuerService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterIssuerService) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ClusterIssuerService) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *ClusterIssuerService) GetServiceSubType() string {
	if m != nil {
		return m.ServiceSubType
	}
	return ""
}

func (m *ClusterIssuerService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ClusterIssuerService) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ClusterIssuerService) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *ClusterIssuerService) GetIsDiscovered() bool {
	if m != nil {
		return m.IsDiscovered
	}
	return false
}

func (m *ClusterIssuerService) GetServiceAttributes() *ClusterIssuerServiceAttributes {
	if m != nil {
		return m.ServiceAttributes
	}
	return nil
}

type ClusterIssuerServiceAttributes struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterIssuerServiceAttributes) Reset()         { *m = ClusterIssuerServiceAttributes{} }
func (m *ClusterIssuerServiceAttributes) String() string { return proto.CompactTextString(m) }
func (*ClusterIssuerServiceAttributes) ProtoMessage()    {}
func (*ClusterIssuerServiceAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dafc6455e7a877b, []int{1}
}

func (m *ClusterIssuerServiceAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterIssuerServiceAttributes.Unmarshal(m, b)
}
func (m *ClusterIssuerServiceAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterIssuerServiceAttributes.Marshal(b, m, deterministic)
}
func (m *ClusterIssuerServiceAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterIssuerServiceAttributes.Merge(m, src)
}
func (m *ClusterIssuerServiceAttributes) XXX_Size() int {
	return xxx_messageInfo_ClusterIssuerServiceAttributes.Size(m)
}
func (m *ClusterIssuerServiceAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterIssuerServiceAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterIssuerServiceAttributes proto.InternalMessageInfo

func (m *ClusterIssuerServiceAttributes) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func init() {
	proto.RegisterType((*ClusterIssuerService)(nil), "proto.ClusterIssuerService")
	proto.RegisterType((*ClusterIssuerServiceAttributes)(nil), "proto.ClusterIssuerServiceAttributes")
}

func init() {
	proto.RegisterFile("clusterissuer.proto", fileDescriptor_7dafc6455e7a877b)
}

var fileDescriptor_7dafc6455e7a877b = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x91, 0x4d, 0x6b, 0xea, 0x40,
	0x14, 0x86, 0xaf, 0xd7, 0xcf, 0x1c, 0xf5, 0xe2, 0x1d, 0xe5, 0x32, 0x78, 0xdb, 0xd2, 0x5a, 0x0a,
	0xae, 0x5c, 0x58, 0xe8, 0xbe, 0x28, 0x14, 0x69, 0x17, 0x12, 0xdd, 0x4b, 0x3e, 0x0e, 0x74, 0x5a,
	0x4d, 0xc2, 0xcc, 0x44, 0xf0, 0x4f, 0xf4, 0x1f, 0xf4, 0xbf, 0x76, 0xbe, 0x22, 0x58, 0x8a, 0xab,
	0xac, 0x92, 0xf3, 0xbc, 0xef, 0x39, 0x79, 0xcf, 0x09, 0xf4, 0xa3, 0x6d, 0x2e, 0x24, 0x72, 0x26,
	0x44, 0x8e, 0x7c, 0x92, 0xf1, 0x54, 0xa6, 0xa4, 0x6e, 0x1e, 0xc3, 0xae, 0x40, 0xbe, 0x67, 0x11,
	0x5a, 0x3a, 0xfa, 0xac, 0xc2, 0x60, 0x66, 0xdd, 0x0b, 0xe3, 0x5e, 0x59, 0x99, 0x5c, 0x02, 0x28,
	0xc7, 0x1b, 0x46, 0x72, 0xc3, 0x62, 0x5a, 0xb9, 0xae, 0x8c, 0x3d, 0xdf, 0x73, 0x64, 0x11, 0x6b,
	0xd9, 0x0d, 0xd2, 0xf2, 0x6f, 0x2b, 0x3b, 0xa2, 0x64, 0x02, 0xb5, 0x24, 0xd8, 0x21, 0xad, 0x1a,
	0xc1, 0xbc, 0x13, 0x0a, 0xcd, 0x3d, 0x72, 0xc1, 0xd2, 0x84, 0xd6, 0x0c, 0x2e, 0x4a, 0x72, 0x03,
	0x9d, 0x62, 0x98, 0x3c, 0x64, 0x48, 0xeb, 0x46, 0x6e, 0x3b, 0xb6, 0x56, 0x88, 0x8c, 0xa1, 0x57,
	0x58, 0x44, 0x1e, 0x5a, 0x5b, 0xc3, 0xd8, 0xfe, 0x38, 0xbe, 0xca, 0x43, 0xe3, 0xbc, 0x00, 0x4f,
	0x7f, 0x4e, 0x64, 0x41, 0x84, 0xb4, 0x69, 0x83, 0x1d, 0x01, 0x19, 0x40, 0x5d, 0xa6, 0xef, 0x98,
	0xd0, 0x96, 0x51, 0x6c, 0xa1, 0xb7, 0x89, 0xd2, 0x5d, 0x16, 0x24, 0x07, 0xbd, 0x8d, 0x67, 0x9b,
	0x1c, 0x51, 0xdb, 0xdc, 0x42, 0x97, 0x89, 0x4d, 0xcc, 0x44, 0x94, 0xaa, 0xc8, 0x18, 0x53, 0x50,
	0x8e, 0x96, 0xdf, 0x61, 0x62, 0x7e, 0x64, 0x64, 0x0d, 0xa4, 0x48, 0x18, 0x48, 0xc9, 0x59, 0x98,
	0x4b, 0x14, 0xb4, 0xad, 0x9c, 0xed, 0xe9, 0x9d, 0xbd, 0xf6, 0xe4, 0xa7, 0x4b, 0x3f, 0x1e, 0xcd,
	0xfe, 0x5f, 0xf1, 0x1d, 0x8d, 0x1e, 0xe0, 0xea, 0x7c, 0x93, 0xde, 0x08, 0x77, 0x01, 0xdb, 0xba,
	0x7f, 0x64, 0x8b, 0xe9, 0x47, 0x15, 0xba, 0x27, 0x8d, 0xe4, 0x05, 0xfa, 0x33, 0x8e, 0x81, 0xc4,
	0x53, 0xfc, 0xff, 0x4c, 0xb4, 0xe1, 0x3f, 0x27, 0xba, 0xda, 0x57, 0x47, 0x4c, 0x13, 0x81, 0xa3,
	0x5f, 0x7a, 0xda, 0x1c, 0xb7, 0x58, 0xd2, 0xb4, 0x05, 0xf4, 0x9e, 0x50, 0x96, 0x32, 0xea, 0x19,
	0xc8, 0x32, 0x90, 0xd1, 0x6b, 0x59, 0xb9, 0x96, 0x79, 0x29, 0xb9, 0xc2, 0x86, 0x11, 0xee, 0xbf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x47, 0x9d, 0x69, 0x06, 0x9c, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClusterIssuerClient is the client API for ClusterIssuer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterIssuerClient interface {
	CreateClusterIssuer(ctx context.Context, in *ClusterIssuerService, opts ...grpc.CallOption) (*ServiceResponse, error)
	DeleteClusterIssuer(ctx context.Context, in *ClusterIssuerService, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetClusterIssuer(ctx context.Context, in *ClusterIssuerService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PatchClusterIssuer(ctx context.Context, in *ClusterIssuerService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PutClusterIssuer(ctx context.Context, in *ClusterIssuerService, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type clusterIssuerClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterIssuerClient(cc grpc.ClientConnInterface) ClusterIssuerClient {
	return &clusterIssuerClient{cc}
}

func (c *clusterIssuerClient) CreateClusterIssuer(ctx context.Context, in *ClusterIssuerService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.ClusterIssuer/CreateClusterIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterIssuerClient) DeleteClusterIssuer(ctx context.Context, in *ClusterIssuerService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.ClusterIssuer/DeleteClusterIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterIssuerClient) GetClusterIssuer(ctx context.Context, in *ClusterIssuerService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.ClusterIssuer/GetClusterIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterIssuerClient) PatchClusterIssuer(ctx context.Context, in *ClusterIssuerService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.ClusterIssuer/PatchClusterIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterIssuerClient) PutClusterIssuer(ctx context.Context, in *ClusterIssuerService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.ClusterIssuer/PutClusterIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterIssuerServer is the server API for ClusterIssuer service.
type ClusterIssuerServer interface {
	CreateClusterIssuer(context.Context, *ClusterIssuerService) (*ServiceResponse, error)
	DeleteClusterIssuer(context.Context, *ClusterIssuerService) (*ServiceResponse, error)
	GetClusterIssuer(context.Context, *ClusterIssuerService) (*ServiceResponse, error)
	PatchClusterIssuer(context.Context, *ClusterIssuerService) (*ServiceResponse, error)
	PutClusterIssuer(context.Context, *ClusterIssuerService) (*ServiceResponse, error)
}

// UnimplementedClusterIssuerServer can be embedded to have forward compatible implementations.
type UnimplementedClusterIssuerServer struct {
}

func (*UnimplementedClusterIssuerServer) CreateClusterIssuer(ctx context.Context, req *ClusterIssuerService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClusterIssuer not implemented")
}
func (*UnimplementedClusterIssuerServer) DeleteClusterIssuer(ctx context.Context, req *ClusterIssuerService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterIssuer not implemented")
}
func (*UnimplementedClusterIssuerServer) GetClusterIssuer(ctx context.Context, req *ClusterIssuerService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterIssuer not implemented")
}
func (*UnimplementedClusterIssuerServer) PatchClusterIssuer(ctx context.Context, req *ClusterIssuerService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchClusterIssuer not implemented")
}
func (*UnimplementedClusterIssuerServer) PutClusterIssuer(ctx context.Context, req *ClusterIssuerService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutClusterIssuer not implemented")
}

func RegisterClusterIssuerServer(s *grpc.Server, srv ClusterIssuerServer) {
	s.RegisterService(&_ClusterIssuer_serviceDesc, srv)
}

func _ClusterIssuer_CreateClusterIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIssuerService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterIssuerServer).CreateClusterIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClusterIssuer/CreateClusterIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterIssuerServer).CreateClusterIssuer(ctx, req.(*ClusterIssuerService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterIssuer_DeleteClusterIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIssuerService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterIssuerServer).DeleteClusterIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClusterIssuer/DeleteClusterIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterIssuerServer).DeleteClusterIssuer(ctx, req.(*ClusterIssuerService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterIssuer_GetClusterIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIssuerService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterIssuerServer).GetClusterIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClusterIssuer/GetClusterIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterIssuerServer).GetClusterIssuer(ctx, req.(*ClusterIssuerService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterIssuer_PatchClusterIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIssuerService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterIssuerServer).PatchClusterIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClusterIssuer/PatchClusterIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterIssuerServer).PatchClusterIssuer(ctx, req.(*ClusterIssuerService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterIssuer_PutClusterIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIssuerService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterIssuerServer).PutClusterIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClusterIssuer/PutClusterIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterIssuerServer).PutClusterIssuer(ctx, req.(*ClusterIssuerService))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterIssuer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClusterIssuer",
	HandlerType: (*ClusterIssuerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClusterIssuer",
			Handler:    _ClusterIssuer_CreateClusterIssuer_Handler,
		},
		{
			MethodName: "DeleteClusterIssuer",
			Handler:    _ClusterIssuer_DeleteClusterIssuer_Handler,
		},
		{
			MethodName: "GetClusterIssuer",
			Handler:    _ClusterIssuer_GetClusterIssuer_Handler,
		},
		{
			MethodName: "PatchClusterIssuer",
			Handler:    _ClusterIssuer_PatchClusterIssuer_Handler,
		},
		{
			MethodName: "PutClusterIssuer",
			Handler:    _ClusterIssuer_PutClusterIssuer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clusterissuer.proto",
}
