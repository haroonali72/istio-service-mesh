syntax = "proto3";

package proto;
import "service.proto";
import "general.proto";
service Virtual{
    rpc CreateVirtualService (VirtualService) returns (ServiceResponse) {}
    rpc GetVirtualService (VirtualService) returns (ServiceResponse) {}
    rpc DeleteVirtualService (VirtualService) returns (ServiceResponse) {}
    rpc PatchVirtualService (VirtualService) returns (ServiceResponse) {}
    rpc PutVirtualService (VirtualService) returns (ServiceResponse) {}
}


message VirtualService {
    string                      project_id          =1;
    string                      service_id          =2;
    string                      name                =3;
    string                      version             =4;
    string                      service_type        =5;
    string                      service_sub_type    =6;
    string                      namespace           =7;
    string                      token               =8;
    string                      company_id          =9;
    VSAttributes                service_attributes  =10;
    HookConfiguration hook_configuration=11;
}
message VSAttributes {
    repeated        string      hosts	            =1;
    repeated        string      gateways	        =2;
    repeated        Http        http		        =3;
    repeated        Tls         tls			        =4;
    repeated        Tcp         tcp 		        =5;
}
message Http {
    string                      name 		        =1;
    repeated        HttpMatchRequest    http_match       =2;
    repeated        HttpRoute			        http_route               =3;
    HttpRedirect		        http_redirect       =4;
    HttpRewrite			        http_rewrite        =5;
    int32                      timeout			    =6;
    HttpRetry				    retry               =7;
    HttpFaultInjection		    fault_injection     =8;
    HttpCorsPolicy 			    cors_policy         =9;
}

message HttpMatchRequest {
    string                      name				=1;
    HttpMatch                   uri					=2;
    HttpMatch                   scheme				=3;
    HttpMatch                   method				=4;
    HttpMatch                   authority 			=5;
    map<string, HttpMatch>      headers             =6;
}
message  HttpMatch {
    string                      type				=1;
    string                      value				=2;
}
message HttpRoute {
    repeated HttpRouteDestination        routes			    =1;
    int32                       weight				=2;
}
message HttpRouteDestination {
    int32                      port 			    =1;
    string                      host				=2;
    string                      subset				=3;
}
message HttpRedirect {
    string                      uri				    =1;
    string                      authority			=2;
    int32                     redirect_code		=3;
}
message HttpRewrite {
    string                      uri					=1;
    string                      authority			=2;
}
message HttpRetry {
    int32                       total_attempt		=1;
    int64                     per_try_timeout		=2;
    string                      retry_on			=3;
}
message  HttpFaultInjection {
    string                      delay_type		    =1;
    int32                       delay_value			=2;
    float                       fault_percentage	=3;
    string                      abort_error_value	=4;
    string                      abort_error_type	=5;
    string                       abort_percentage    =6;
}
message HttpCorsPolicy{
    repeated          string    allow_origin        =1;
    repeated          string    allow_method			=2;
    repeated          string    allow_headers		=3;
    repeated          string    expose_headers		=4;
    int32                       max_age				=5;
    bool                        allow_credentials	=6;
}

message Tls{
    repeated    TlsMatchAttribute  tls_match 				=1;
    repeated    TlsRoute           tls_route				=2;
}
message TlsMatchAttribute{
    repeated        string      sni_hosts			=1;
    repeated        string      destination_subnets	=2;
    int32                       port				=3;
    string                      source_subnet		=4;
    repeated        string      gateways			=5;
}
message TlsRoute{
    RouteDestination		    route_destination    =1;
    int32                       weight		    	 =2;
}
message RouteDestination{
    string                      host			     =1;
    string                      subnet				 =2;
    int32                       port				 =3;
}
message Tcp{
    repeated       TcpMatchRequest tcp_match 			 =1;
    repeated       TcpRoutes       tcp_routes			 =2;
}
message TcpMatchRequest {
    repeated          string    destination_subnets	 =1;
    int32                       port				 =2;
    string                      source_subnet		 =3;
    map<string,string>			Source_labels        =4;
    repeated          string    gateways			 =5;
}
message SourceLabel{
    string                      key					 =1;
}
message TcpRoutes {
    RouteDestination            destination          =1;
    int32                      weight               =2;
}
