syntax = "proto3";

import "general.proto";
import "service.proto";
import "volume.proto";
import "deployment.proto";
package proto;

service Pod {
    rpc CreatePod (PodService) returns (ServiceResponse) {}
    rpc DeletePod (PodService) returns (ServiceResponse) {}
    rpc GetPod (PodService) returns (ServiceResponse) {}
    rpc PatchPod (PodService) returns (ServiceResponse) {}
    rpc PutPod (PodService) returns (ServiceResponse) {}
}

message PodService {
    string application_id = 1;
    string service_id = 2;
    string name = 3;
    string version = 4;
    string service_type = 5;
    string service_sub_type = 6;
    string namespace = 7;
    string token = 8;
    string company_id = 9;
    string infra_id = 10;
    PodServiceServiceAttributes service_attributes = 11;
    HookConfiguration hook_configuration=12;
}

message PodServiceServiceAttributes {
    repeated  ContainerAttributes containers = 1;
    IstioConfig istio_config = 2;
    map<string, string> node_selector = 4;
    map<string, string> labels = 5;
    map<string, string> annotations = 6;
    repeated K8sRbacAttribute roles= 8;
    repeated IstioRbacAttribute istio_roles = 9;
    RestartPolicy restart_Policy = 10;
    repeated Volume volumes = 11;
    Affinity affinity = 12;
    repeated ContainerAttributes init_containers = 13;
    TerminationGracePeriodSeconds Termination_grace_period_seconds = 15;
    repeated LocalObjectReference image_pull_secrets = 16;
    string serviceAccountName = 17;
    AutomountServiceAccountToken automount_service_account_token = 18;
    bool is_rbac_enabled = 19;
}


enum RestartPolicy{
    Always=0;
    OnFailure=1;
    Never=2;
}