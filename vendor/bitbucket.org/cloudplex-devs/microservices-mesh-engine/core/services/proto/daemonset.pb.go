// Code generated by protoc-gen-go. DO NOT EDIT.
// source: daemonset.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DaemonSetService struct {
	ProjectId            string                      `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ServiceId            string                      `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name                 string                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version              string                      `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	ServiceType          string                      `protobuf:"bytes,5,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	ServiceSubType       string                      `protobuf:"bytes,6,opt,name=service_sub_type,json=serviceSubType,proto3" json:"service_sub_type,omitempty"`
	Namespace            string                      `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Token                string                      `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	CompanyId            string                      `protobuf:"bytes,9,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ServiceAttributes    *DaemonSetServiceAttributes `protobuf:"bytes,10,opt,name=service_attributes,json=serviceAttributes,proto3" json:"service_attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DaemonSetService) Reset()         { *m = DaemonSetService{} }
func (m *DaemonSetService) String() string { return proto.CompactTextString(m) }
func (*DaemonSetService) ProtoMessage()    {}
func (*DaemonSetService) Descriptor() ([]byte, []int) {
	return fileDescriptor_6841f345540e0841, []int{0}
}

func (m *DaemonSetService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaemonSetService.Unmarshal(m, b)
}
func (m *DaemonSetService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaemonSetService.Marshal(b, m, deterministic)
}
func (m *DaemonSetService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaemonSetService.Merge(m, src)
}
func (m *DaemonSetService) XXX_Size() int {
	return xxx_messageInfo_DaemonSetService.Size(m)
}
func (m *DaemonSetService) XXX_DiscardUnknown() {
	xxx_messageInfo_DaemonSetService.DiscardUnknown(m)
}

var xxx_messageInfo_DaemonSetService proto.InternalMessageInfo

func (m *DaemonSetService) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *DaemonSetService) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *DaemonSetService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DaemonSetService) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DaemonSetService) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *DaemonSetService) GetServiceSubType() string {
	if m != nil {
		return m.ServiceSubType
	}
	return ""
}

func (m *DaemonSetService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DaemonSetService) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *DaemonSetService) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *DaemonSetService) GetServiceAttributes() *DaemonSetServiceAttributes {
	if m != nil {
		return m.ServiceAttributes
	}
	return nil
}

type DaemonSetServiceAttributes struct {
	Labels                        map[string]string              `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations                   map[string]string              `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LabelSelector                 *LabelSelectorObj              `protobuf:"bytes,3,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	UpdateStrategy                *DaemonSetUpdateStrategy       `protobuf:"bytes,4,opt,name=update_strategy,json=updateStrategy,proto3" json:"update_strategy,omitempty"`
	MinReadySeconds               int32                          `protobuf:"varint,7,opt,name=min_ready_seconds,json=minReadySeconds,proto3" json:"min_ready_seconds,omitempty"`
	RevisionHistoryLimit          *RevisionHistoryLimit          `protobuf:"bytes,8,opt,name=revision_history_limit,json=revisionHistoryLimit,proto3" json:"revision_history_limit,omitempty"`
	Affinity                      *Affinity                      `protobuf:"bytes,5,opt,name=affinity,proto3" json:"affinity,omitempty"`
	Volumes                       []*Volume                      `protobuf:"bytes,9,rep,name=volumes,proto3" json:"volumes,omitempty"`
	Containers                    []*ContainerAttributes         `protobuf:"bytes,10,rep,name=containers,proto3" json:"containers,omitempty"`
	InitContainers                []*ContainerAttributes         `protobuf:"bytes,11,rep,name=init_containers,json=initContainers,proto3" json:"init_containers,omitempty"`
	NodeSelector                  map[string]string              `protobuf:"bytes,6,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IstioConfig                   *IstioConfig                   `protobuf:"bytes,12,opt,name=istio_config,json=istioConfig,proto3" json:"istio_config,omitempty"`
	IsRbacEnabled                 bool                           `protobuf:"varint,19,opt,name=is_rbac_enabled,json=isRbacEnabled,proto3" json:"is_rbac_enabled,omitempty"`
	Roles                         []*K8SRbacAttribute            `protobuf:"bytes,20,rep,name=roles,proto3" json:"roles,omitempty"`
	IstioRoles                    []*IstioRbacAttribute          `protobuf:"bytes,21,rep,name=istio_roles,json=istioRoles,proto3" json:"istio_roles,omitempty"`
	TerminationGracePeriodSeconds *TerminationGracePeriodSeconds `protobuf:"bytes,22,opt,name=termination_grace_period_seconds,json=terminationGracePeriodSeconds,proto3" json:"termination_grace_period_seconds,omitempty"`
	ActiveDeadlineSeconds         *ActiveDeadlineSeconds         `protobuf:"bytes,23,opt,name=active_deadline_seconds,json=activeDeadlineSeconds,proto3" json:"active_deadline_seconds,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                       `json:"-"`
	XXX_unrecognized              []byte                         `json:"-"`
	XXX_sizecache                 int32                          `json:"-"`
}

func (m *DaemonSetServiceAttributes) Reset()         { *m = DaemonSetServiceAttributes{} }
func (m *DaemonSetServiceAttributes) String() string { return proto.CompactTextString(m) }
func (*DaemonSetServiceAttributes) ProtoMessage()    {}
func (*DaemonSetServiceAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6841f345540e0841, []int{1}
}

func (m *DaemonSetServiceAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaemonSetServiceAttributes.Unmarshal(m, b)
}
func (m *DaemonSetServiceAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaemonSetServiceAttributes.Marshal(b, m, deterministic)
}
func (m *DaemonSetServiceAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaemonSetServiceAttributes.Merge(m, src)
}
func (m *DaemonSetServiceAttributes) XXX_Size() int {
	return xxx_messageInfo_DaemonSetServiceAttributes.Size(m)
}
func (m *DaemonSetServiceAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_DaemonSetServiceAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_DaemonSetServiceAttributes proto.InternalMessageInfo

func (m *DaemonSetServiceAttributes) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetLabelSelector() *LabelSelectorObj {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetUpdateStrategy() *DaemonSetUpdateStrategy {
	if m != nil {
		return m.UpdateStrategy
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetMinReadySeconds() int32 {
	if m != nil {
		return m.MinReadySeconds
	}
	return 0
}

func (m *DaemonSetServiceAttributes) GetRevisionHistoryLimit() *RevisionHistoryLimit {
	if m != nil {
		return m.RevisionHistoryLimit
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetContainers() []*ContainerAttributes {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetInitContainers() []*ContainerAttributes {
	if m != nil {
		return m.InitContainers
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetIstioConfig() *IstioConfig {
	if m != nil {
		return m.IstioConfig
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetIsRbacEnabled() bool {
	if m != nil {
		return m.IsRbacEnabled
	}
	return false
}

func (m *DaemonSetServiceAttributes) GetRoles() []*K8SRbacAttribute {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetIstioRoles() []*IstioRbacAttribute {
	if m != nil {
		return m.IstioRoles
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetTerminationGracePeriodSeconds() *TerminationGracePeriodSeconds {
	if m != nil {
		return m.TerminationGracePeriodSeconds
	}
	return nil
}

func (m *DaemonSetServiceAttributes) GetActiveDeadlineSeconds() *ActiveDeadlineSeconds {
	if m != nil {
		return m.ActiveDeadlineSeconds
	}
	return nil
}

func init() {
	proto.RegisterType((*DaemonSetService)(nil), "proto.DaemonSetService")
	proto.RegisterType((*DaemonSetServiceAttributes)(nil), "proto.DaemonSetServiceAttributes")
	proto.RegisterMapType((map[string]string)(nil), "proto.DaemonSetServiceAttributes.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.DaemonSetServiceAttributes.LabelsEntry")
	proto.RegisterMapType((map[string]string)(nil), "proto.DaemonSetServiceAttributes.NodeSelectorEntry")
}

func init() {
	proto.RegisterFile("daemonset.proto", fileDescriptor_6841f345540e0841)
}

var fileDescriptor_6841f345540e0841 = []byte{
	// 845 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xed, 0x4e, 0x1b, 0x47,
	0x14, 0xad, 0x4d, 0x0c, 0xf8, 0xae, 0x3f, 0x60, 0x4a, 0x60, 0xeb, 0x26, 0x95, 0x83, 0xaa, 0xd6,
	0x6a, 0x15, 0x7e, 0x38, 0xaa, 0x94, 0xf2, 0x23, 0x15, 0x32, 0x88, 0xa2, 0x46, 0x2d, 0x1d, 0xd3,
	0xaa, 0xff, 0x56, 0xe3, 0xdd, 0x0b, 0x99, 0x64, 0x3d, 0x63, 0xcd, 0x8c, 0x2d, 0xed, 0xc3, 0xf5,
	0x65, 0xfa, 0x04, 0x7d, 0x84, 0x6a, 0xee, 0xce, 0xda, 0x0e, 0x4d, 0x82, 0x10, 0xbf, 0xf0, 0x3d,
	0xe7, 0xdc, 0x73, 0xef, 0xee, 0x9c, 0x1d, 0xa0, 0x9b, 0x09, 0x9c, 0x6a, 0x65, 0xd1, 0x1d, 0xcd,
	0x8c, 0x76, 0x9a, 0x35, 0xe8, 0x4f, 0xaf, 0x7d, 0x83, 0x0a, 0x8d, 0xc8, 0x8f, 0x42, 0x69, 0xd1,
	0x2c, 0x64, 0x8a, 0xa1, 0x6c, 0x2d, 0x74, 0x3e, 0x9f, 0x86, 0xea, 0xf0, 0xdf, 0x3a, 0xec, 0x9c,
	0x92, 0xcd, 0x18, 0xdd, 0xb8, 0x14, 0xb2, 0xa7, 0x00, 0x33, 0xa3, 0xdf, 0x62, 0xea, 0x12, 0x99,
	0xc5, 0xb5, 0x7e, 0x6d, 0xd0, 0xe4, 0xcd, 0x80, 0x5c, 0x64, 0x9e, 0x0e, 0x96, 0x9e, 0xae, 0x97,
	0x74, 0x40, 0x2e, 0x32, 0xc6, 0xe0, 0x91, 0x12, 0x53, 0x8c, 0x37, 0x88, 0xa0, 0xdf, 0x2c, 0x86,
	0xad, 0x05, 0x1a, 0x2b, 0xb5, 0x8a, 0x1f, 0x11, 0x5c, 0x95, 0xec, 0x19, 0xb4, 0x2a, 0x33, 0x57,
	0xcc, 0x30, 0x6e, 0x10, 0x1d, 0x05, 0xec, 0xaa, 0x98, 0x21, 0x1b, 0xc0, 0x4e, 0x25, 0xb1, 0xf3,
	0x49, 0x29, 0xdb, 0x24, 0x59, 0x27, 0xe0, 0xe3, 0xf9, 0x84, 0x94, 0x4f, 0xa0, 0xe9, 0xc7, 0xd9,
	0x99, 0x48, 0x31, 0xde, 0x2a, 0x17, 0x5b, 0x02, 0x6c, 0x0f, 0x1a, 0x4e, 0xbf, 0x43, 0x15, 0x6f,
	0x13, 0x53, 0x16, 0xfe, 0x69, 0x52, 0x3d, 0x9d, 0x09, 0x55, 0xf8, 0xa7, 0x69, 0x96, 0x4d, 0x01,
	0xb9, 0xc8, 0xd8, 0x25, 0xb0, 0x6a, 0xb8, 0x70, 0xce, 0xc8, 0xc9, 0xdc, 0xa1, 0x8d, 0xa1, 0x5f,
	0x1b, 0x44, 0xc3, 0x67, 0xe5, 0x4b, 0x3c, 0xba, 0xfd, 0x02, 0x4f, 0x96, 0x42, 0xbe, 0x6b, 0x6f,
	0x43, 0x87, 0x7f, 0x03, 0xf4, 0x3e, 0xde, 0xc1, 0xce, 0x60, 0x33, 0x17, 0x13, 0xcc, 0x6d, 0x5c,
	0xeb, 0x6f, 0x0c, 0xa2, 0xe1, 0xf3, 0x3b, 0x87, 0x1c, 0xbd, 0x26, 0xfd, 0x99, 0x72, 0xa6, 0xe0,
	0xa1, 0x99, 0x5d, 0x41, 0x24, 0x94, 0xd2, 0x4e, 0x38, 0xa9, 0x95, 0x8d, 0xeb, 0xe4, 0x35, 0xbc,
	0xdb, 0xeb, 0x64, 0xd5, 0x54, 0x1a, 0xae, 0xdb, 0xb0, 0x57, 0xd0, 0x21, 0xff, 0xc4, 0x62, 0x8e,
	0xa9, 0xd3, 0x86, 0x4e, 0x39, 0x1a, 0x1e, 0x04, 0x63, 0xda, 0x64, 0x1c, 0xb8, 0xdf, 0x26, 0x6f,
	0x79, 0x3b, 0x5f, 0x47, 0xd8, 0x39, 0x74, 0xe7, 0xb3, 0x4c, 0x38, 0x4c, 0xac, 0x33, 0xc2, 0xe1,
	0x4d, 0x41, 0x79, 0x88, 0x86, 0x5f, 0xdd, 0xde, 0xec, 0x0f, 0x92, 0x8d, 0x83, 0x8a, 0x77, 0xe6,
	0xef, 0xd5, 0xec, 0x3b, 0xd8, 0x9d, 0x4a, 0x95, 0x18, 0x14, 0x59, 0x91, 0x58, 0x4c, 0xb5, 0xca,
	0x2c, 0x9d, 0x78, 0x83, 0x77, 0xa7, 0x52, 0x71, 0x8f, 0x8f, 0x4b, 0x98, 0xfd, 0x0e, 0xfb, 0x06,
	0x17, 0xd2, 0xc7, 0x2d, 0x79, 0x23, 0xad, 0xd3, 0xa6, 0x48, 0x72, 0x39, 0x95, 0x8e, 0x82, 0x10,
	0x0d, 0xbf, 0x0c, 0xb3, 0x79, 0x10, 0xfd, 0x5c, 0x6a, 0x5e, 0x7b, 0x09, 0xdf, 0x33, 0x1f, 0x40,
	0xd9, 0xf7, 0xb0, 0x2d, 0xae, 0xaf, 0xa5, 0x92, 0xae, 0xa0, 0xc4, 0x46, 0xc3, 0x6e, 0x30, 0x39,
	0x09, 0x30, 0x5f, 0x0a, 0xd8, 0xb7, 0xb0, 0x55, 0x7e, 0x73, 0x36, 0x6e, 0xd2, 0x31, 0xb4, 0x83,
	0xf6, 0x4f, 0x42, 0x79, 0xc5, 0xb2, 0x63, 0x1f, 0x45, 0xe5, 0x84, 0x54, 0x68, 0x7c, 0xc6, 0xbc,
	0xb6, 0x17, 0xb4, 0xa3, 0x8a, 0x58, 0x0b, 0xd7, 0x9a, 0x9a, 0x8d, 0xa0, 0xeb, 0xa7, 0x25, 0x6b,
	0x06, 0xd1, 0x9d, 0x06, 0x1d, 0xdf, 0x32, 0x5a, 0x99, 0xfc, 0x05, 0x6d, 0xa5, 0x33, 0x5c, 0x9d,
	0xee, 0x26, 0x59, 0xbc, 0xb8, 0x3b, 0x36, 0xbf, 0xea, 0x0c, 0xab, 0x53, 0x2e, 0x73, 0xd3, 0x52,
	0x6b, 0x10, 0xfb, 0x01, 0x5a, 0xd2, 0x3a, 0xa9, 0xfd, 0x7e, 0xd7, 0xf2, 0x26, 0x6e, 0xd1, 0x4b,
	0x63, 0xc1, 0xf8, 0xc2, 0x53, 0x23, 0x62, 0x78, 0x24, 0x57, 0x05, 0xfb, 0x06, 0xba, 0xd2, 0x26,
	0x66, 0x22, 0xd2, 0x04, 0x95, 0x98, 0xe4, 0x98, 0xc5, 0x9f, 0xf7, 0x6b, 0x83, 0x6d, 0xde, 0x96,
	0x96, 0x4f, 0x44, 0x7a, 0x56, 0x82, 0xec, 0x39, 0x34, 0x8c, 0xce, 0xd1, 0xc6, 0x7b, 0xb4, 0x70,
	0x15, 0xc7, 0x5f, 0x5e, 0x92, 0x6a, 0xb9, 0x27, 0x2f, 0x55, 0xec, 0x18, 0xca, 0x29, 0x49, 0xd9,
	0xf4, 0x98, 0x9a, 0xbe, 0x58, 0x5f, 0xe6, 0xfd, 0x36, 0x20, 0x35, 0xa7, 0xde, 0x29, 0xf4, 0x1d,
	0x9a, 0xa9, 0x54, 0xf4, 0x49, 0x24, 0x37, 0x46, 0xa4, 0x98, 0xcc, 0xd0, 0x48, 0x9d, 0x2d, 0x83,
	0xb8, 0x4f, 0x4f, 0xf7, 0x75, 0x30, 0xbc, 0x5a, 0xc9, 0xcf, 0xbd, 0xfa, 0x92, 0xc4, 0x21, 0x9d,
	0xfc, 0xa9, 0xfb, 0x14, 0xcd, 0xae, 0xe0, 0x40, 0xa4, 0x4e, 0x2e, 0x30, 0xc9, 0x50, 0x64, 0xb9,
	0x54, 0xb8, 0x9c, 0x72, 0x40, 0x53, 0x9e, 0x54, 0xc1, 0x23, 0xd5, 0x69, 0x10, 0x55, 0xee, 0x8f,
	0xc5, 0x87, 0xe0, 0xde, 0x8f, 0x10, 0xad, 0x5d, 0x1a, 0x6c, 0x07, 0x36, 0xde, 0x61, 0x11, 0x6e,
	0x7a, 0xff, 0xd3, 0xdf, 0x95, 0x0b, 0x91, 0xcf, 0x31, 0x5c, 0xef, 0x65, 0x71, 0x5c, 0x7f, 0x59,
	0xeb, 0xbd, 0x82, 0x9d, 0xdb, 0x77, 0xc4, 0xbd, 0xfa, 0x7f, 0x82, 0xdd, 0xff, 0x85, 0xe5, 0x3e,
	0x06, 0xc3, 0x7f, 0xea, 0xd0, 0x5c, 0x26, 0x91, 0x9d, 0x42, 0x77, 0x64, 0x50, 0x38, 0x5c, 0x41,
	0x07, 0x1f, 0x89, 0x6b, 0x6f, 0x3f, 0x10, 0xa1, 0xe6, 0x68, 0x67, 0xfe, 0xdf, 0xe7, 0xe1, 0x67,
	0xde, 0xe5, 0x14, 0x73, 0x7c, 0xa0, 0xcb, 0x09, 0xb4, 0xce, 0xd1, 0x3d, 0xc8, 0x62, 0x04, 0x9d,
	0x4b, 0xe1, 0xd2, 0x37, 0x0f, 0xdd, 0xe3, 0x72, 0xfe, 0xa0, 0x3d, 0x26, 0x9b, 0x44, 0xbc, 0xf8,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xc4, 0x22, 0x8d, 0x64, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DaemonSetClient is the client API for DaemonSet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DaemonSetClient interface {
	CreateDaemonSet(ctx context.Context, in *DaemonSetService, opts ...grpc.CallOption) (*ServiceResponse, error)
	DeleteDaemonSet(ctx context.Context, in *DaemonSetService, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetDaemonSet(ctx context.Context, in *DaemonSetService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PatchDaemonSet(ctx context.Context, in *DaemonSetService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PutDaemonSet(ctx context.Context, in *DaemonSetService, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type daemonSetClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonSetClient(cc grpc.ClientConnInterface) DaemonSetClient {
	return &daemonSetClient{cc}
}

func (c *daemonSetClient) CreateDaemonSet(ctx context.Context, in *DaemonSetService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.DaemonSet/CreateDaemonSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonSetClient) DeleteDaemonSet(ctx context.Context, in *DaemonSetService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.DaemonSet/DeleteDaemonSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonSetClient) GetDaemonSet(ctx context.Context, in *DaemonSetService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.DaemonSet/GetDaemonSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonSetClient) PatchDaemonSet(ctx context.Context, in *DaemonSetService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.DaemonSet/PatchDaemonSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonSetClient) PutDaemonSet(ctx context.Context, in *DaemonSetService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.DaemonSet/PutDaemonSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonSetServer is the server API for DaemonSet service.
type DaemonSetServer interface {
	CreateDaemonSet(context.Context, *DaemonSetService) (*ServiceResponse, error)
	DeleteDaemonSet(context.Context, *DaemonSetService) (*ServiceResponse, error)
	GetDaemonSet(context.Context, *DaemonSetService) (*ServiceResponse, error)
	PatchDaemonSet(context.Context, *DaemonSetService) (*ServiceResponse, error)
	PutDaemonSet(context.Context, *DaemonSetService) (*ServiceResponse, error)
}

// UnimplementedDaemonSetServer can be embedded to have forward compatible implementations.
type UnimplementedDaemonSetServer struct {
}

func (*UnimplementedDaemonSetServer) CreateDaemonSet(ctx context.Context, req *DaemonSetService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDaemonSet not implemented")
}
func (*UnimplementedDaemonSetServer) DeleteDaemonSet(ctx context.Context, req *DaemonSetService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDaemonSet not implemented")
}
func (*UnimplementedDaemonSetServer) GetDaemonSet(ctx context.Context, req *DaemonSetService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDaemonSet not implemented")
}
func (*UnimplementedDaemonSetServer) PatchDaemonSet(ctx context.Context, req *DaemonSetService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDaemonSet not implemented")
}
func (*UnimplementedDaemonSetServer) PutDaemonSet(ctx context.Context, req *DaemonSetService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDaemonSet not implemented")
}

func RegisterDaemonSetServer(s *grpc.Server, srv DaemonSetServer) {
	s.RegisterService(&_DaemonSet_serviceDesc, srv)
}

func _DaemonSet_CreateDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonSetService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).CreateDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DaemonSet/CreateDaemonSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).CreateDaemonSet(ctx, req.(*DaemonSetService))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonSet_DeleteDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonSetService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).DeleteDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DaemonSet/DeleteDaemonSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).DeleteDaemonSet(ctx, req.(*DaemonSetService))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonSet_GetDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonSetService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).GetDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DaemonSet/GetDaemonSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).GetDaemonSet(ctx, req.(*DaemonSetService))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonSet_PatchDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonSetService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).PatchDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DaemonSet/PatchDaemonSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).PatchDaemonSet(ctx, req.(*DaemonSetService))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonSet_PutDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonSetService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).PutDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DaemonSet/PutDaemonSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).PutDaemonSet(ctx, req.(*DaemonSetService))
	}
	return interceptor(ctx, in, info, handler)
}

var _DaemonSet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DaemonSet",
	HandlerType: (*DaemonSetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDaemonSet",
			Handler:    _DaemonSet_CreateDaemonSet_Handler,
		},
		{
			MethodName: "DeleteDaemonSet",
			Handler:    _DaemonSet_DeleteDaemonSet_Handler,
		},
		{
			MethodName: "GetDaemonSet",
			Handler:    _DaemonSet_GetDaemonSet_Handler,
		},
		{
			MethodName: "PatchDaemonSet",
			Handler:    _DaemonSet_PatchDaemonSet_Handler,
		},
		{
			MethodName: "PutDaemonSet",
			Handler:    _DaemonSet_PutDaemonSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemonset.proto",
}
