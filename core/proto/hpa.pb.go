// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hpa.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HPA struct {
	ProjectId            string      `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ServiceId            string      `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name                 string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ServiceType          string      `protobuf:"bytes,4,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	ServiceSubType       string      `protobuf:"bytes,5,opt,name=service_sub_type,json=serviceSubType,proto3" json:"service_sub_type,omitempty"`
	Status               string      `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Token                string      `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	Namespace            string      `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ServiceAttributes    *HpaSvcAttr `protobuf:"bytes,10,opt,name=service_attributes,json=serviceAttributes,proto3" json:"service_attributes,omitempty"`
	CompanyId            string      `protobuf:"bytes,11,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Version              string      `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *HPA) Reset()         { *m = HPA{} }
func (m *HPA) String() string { return proto.CompactTextString(m) }
func (*HPA) ProtoMessage()    {}
func (*HPA) Descriptor() ([]byte, []int) {
	return fileDescriptor_deb39c4c53a32fc9, []int{0}
}

func (m *HPA) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HPA.Unmarshal(m, b)
}
func (m *HPA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HPA.Marshal(b, m, deterministic)
}
func (m *HPA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HPA.Merge(m, src)
}
func (m *HPA) XXX_Size() int {
	return xxx_messageInfo_HPA.Size(m)
}
func (m *HPA) XXX_DiscardUnknown() {
	xxx_messageInfo_HPA.DiscardUnknown(m)
}

var xxx_messageInfo_HPA proto.InternalMessageInfo

func (m *HPA) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *HPA) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *HPA) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HPA) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *HPA) GetServiceSubType() string {
	if m != nil {
		return m.ServiceSubType
	}
	return ""
}

func (m *HPA) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HPA) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *HPA) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *HPA) GetServiceAttributes() *HpaSvcAttr {
	if m != nil {
		return m.ServiceAttributes
	}
	return nil
}

func (m *HPA) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *HPA) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type HpaSvcAttr struct {
	MinReplicas          int64               `protobuf:"varint,1,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,omitempty"`
	MaxReplicas          int64               `protobuf:"varint,2,opt,name=max_replicas,json=maxReplicas,proto3" json:"max_replicas,omitempty"`
	CrossObjectVersion   *CrossObjectVersion `protobuf:"bytes,3,opt,name=cross_object_version,json=crossObjectVersion,proto3" json:"cross_object_version,omitempty"`
	MetricValues         []*MetricValue      `protobuf:"bytes,4,rep,name=metric_values,json=metricValues,proto3" json:"metric_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *HpaSvcAttr) Reset()         { *m = HpaSvcAttr{} }
func (m *HpaSvcAttr) String() string { return proto.CompactTextString(m) }
func (*HpaSvcAttr) ProtoMessage()    {}
func (*HpaSvcAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_deb39c4c53a32fc9, []int{1}
}

func (m *HpaSvcAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HpaSvcAttr.Unmarshal(m, b)
}
func (m *HpaSvcAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HpaSvcAttr.Marshal(b, m, deterministic)
}
func (m *HpaSvcAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HpaSvcAttr.Merge(m, src)
}
func (m *HpaSvcAttr) XXX_Size() int {
	return xxx_messageInfo_HpaSvcAttr.Size(m)
}
func (m *HpaSvcAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_HpaSvcAttr.DiscardUnknown(m)
}

var xxx_messageInfo_HpaSvcAttr proto.InternalMessageInfo

func (m *HpaSvcAttr) GetMinReplicas() int64 {
	if m != nil {
		return m.MinReplicas
	}
	return 0
}

func (m *HpaSvcAttr) GetMaxReplicas() int64 {
	if m != nil {
		return m.MaxReplicas
	}
	return 0
}

func (m *HpaSvcAttr) GetCrossObjectVersion() *CrossObjectVersion {
	if m != nil {
		return m.CrossObjectVersion
	}
	return nil
}

func (m *HpaSvcAttr) GetMetricValues() []*MetricValue {
	if m != nil {
		return m.MetricValues
	}
	return nil
}

type CrossObjectVersion struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrossObjectVersion) Reset()         { *m = CrossObjectVersion{} }
func (m *CrossObjectVersion) String() string { return proto.CompactTextString(m) }
func (*CrossObjectVersion) ProtoMessage()    {}
func (*CrossObjectVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_deb39c4c53a32fc9, []int{2}
}

func (m *CrossObjectVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrossObjectVersion.Unmarshal(m, b)
}
func (m *CrossObjectVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrossObjectVersion.Marshal(b, m, deterministic)
}
func (m *CrossObjectVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossObjectVersion.Merge(m, src)
}
func (m *CrossObjectVersion) XXX_Size() int {
	return xxx_messageInfo_CrossObjectVersion.Size(m)
}
func (m *CrossObjectVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossObjectVersion.DiscardUnknown(m)
}

var xxx_messageInfo_CrossObjectVersion proto.InternalMessageInfo

func (m *CrossObjectVersion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CrossObjectVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CrossObjectVersion) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type MetricValue struct {
	TargetValueKind      string   `protobuf:"bytes,1,opt,name=target_value_kind,json=targetValueKind,proto3" json:"target_value_kind,omitempty"`
	TargetValue          string   `protobuf:"bytes,2,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
	ResourceKind         string   `protobuf:"bytes,4,opt,name=resource_kind,json=resourceKind,proto3" json:"resource_kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricValue) Reset()         { *m = MetricValue{} }
func (m *MetricValue) String() string { return proto.CompactTextString(m) }
func (*MetricValue) ProtoMessage()    {}
func (*MetricValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_deb39c4c53a32fc9, []int{3}
}

func (m *MetricValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricValue.Unmarshal(m, b)
}
func (m *MetricValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricValue.Marshal(b, m, deterministic)
}
func (m *MetricValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricValue.Merge(m, src)
}
func (m *MetricValue) XXX_Size() int {
	return xxx_messageInfo_MetricValue.Size(m)
}
func (m *MetricValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricValue.DiscardUnknown(m)
}

var xxx_messageInfo_MetricValue proto.InternalMessageInfo

func (m *MetricValue) GetTargetValueKind() string {
	if m != nil {
		return m.TargetValueKind
	}
	return ""
}

func (m *MetricValue) GetTargetValue() string {
	if m != nil {
		return m.TargetValue
	}
	return ""
}

func (m *MetricValue) GetResourceKind() string {
	if m != nil {
		return m.ResourceKind
	}
	return ""
}

func init() {
	proto.RegisterType((*HPA)(nil), "proto.HPA")
	proto.RegisterType((*HpaSvcAttr)(nil), "proto.HpaSvcAttr")
	proto.RegisterType((*CrossObjectVersion)(nil), "proto.CrossObjectVersion")
	proto.RegisterType((*MetricValue)(nil), "proto.MetricValue")
}

func init() { proto.RegisterFile("hpa.proto", fileDescriptor_deb39c4c53a32fc9) }

var fileDescriptor_deb39c4c53a32fc9 = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x5f, 0x6f, 0x12, 0x4d,
	0x14, 0xc6, 0xdf, 0x65, 0x81, 0xbe, 0x7b, 0x96, 0xaa, 0x4c, 0x6a, 0xb3, 0x36, 0x9a, 0x20, 0xde,
	0x10, 0x2f, 0x88, 0xc5, 0x0b, 0x6f, 0x25, 0x35, 0xb1, 0xa4, 0x31, 0x92, 0xc5, 0x70, 0x4b, 0x86,
	0xe1, 0x44, 0xc6, 0xb2, 0x3b, 0x93, 0x99, 0x59, 0x52, 0x2e, 0xfd, 0x96, 0x7e, 0x07, 0x3f, 0x83,
	0x89, 0x99, 0x3f, 0x0b, 0x98, 0xde, 0xb4, 0x57, 0xcc, 0x3c, 0xcf, 0x6f, 0xcf, 0x39, 0x7b, 0x78,
	0x16, 0x92, 0xb5, 0xa4, 0x43, 0xa9, 0x84, 0x11, 0xa4, 0xe5, 0x7e, 0x2e, 0x9e, 0x6b, 0x54, 0x5b,
	0xce, 0x50, 0xa1, 0x96, 0xa2, 0xd4, 0xe8, 0xdd, 0xfe, 0xef, 0x06, 0xc4, 0xd7, 0xd3, 0x31, 0x79,
	0x05, 0x20, 0x95, 0xf8, 0x81, 0xcc, 0x2c, 0xf8, 0x2a, 0x8b, 0x7a, 0xd1, 0x20, 0xc9, 0x93, 0xa0,
	0x4c, 0x56, 0xd6, 0x0e, 0xcf, 0x5b, 0xbb, 0xe1, 0xed, 0xa0, 0x4c, 0x56, 0x84, 0x40, 0xb3, 0xa4,
	0x05, 0x66, 0xb1, 0x33, 0xdc, 0x99, 0xbc, 0x86, 0x4e, 0xfd, 0x88, 0xd9, 0x49, 0xcc, 0x9a, 0xce,
	0x4b, 0x83, 0xf6, 0x6d, 0x27, 0x91, 0x0c, 0xe0, 0x59, 0x8d, 0xe8, 0x6a, 0xe9, 0xb1, 0x96, 0xc3,
	0x9e, 0x04, 0x7d, 0x56, 0x2d, 0x1d, 0x79, 0x0e, 0x6d, 0x6d, 0xa8, 0xa9, 0x74, 0xd6, 0x76, 0x7e,
	0xb8, 0x91, 0x33, 0x68, 0x19, 0x71, 0x8b, 0x65, 0x76, 0xe2, 0x64, 0x7f, 0x21, 0x2f, 0x21, 0xb1,
	0x23, 0x68, 0x49, 0x19, 0x66, 0x89, 0x1f, 0x76, 0x2f, 0x90, 0x8f, 0x40, 0xea, 0xae, 0xd4, 0x18,
	0xc5, 0x97, 0x95, 0x41, 0x9d, 0x41, 0x2f, 0x1a, 0xa4, 0xa3, 0xae, 0x5f, 0xcb, 0xf0, 0x5a, 0xd2,
	0xd9, 0x96, 0x8d, 0x8d, 0x51, 0x79, 0x37, 0xc0, 0xe3, 0x3d, 0x6b, 0xb7, 0xc1, 0x44, 0x21, 0x69,
	0xb9, 0xb3, 0xdb, 0x48, 0x7d, 0x83, 0xa0, 0x4c, 0x56, 0x24, 0x83, 0x93, 0x2d, 0x2a, 0xcd, 0x45,
	0x99, 0x75, 0x9c, 0x57, 0x5f, 0xfb, 0xbf, 0x22, 0x80, 0x43, 0x69, 0xbb, 0xa2, 0x82, 0x97, 0x0b,
	0x85, 0x72, 0xc3, 0x19, 0xd5, 0x6e, 0xed, 0x71, 0x9e, 0x16, 0xbc, 0xcc, 0x83, 0xe4, 0x10, 0x7a,
	0x77, 0x40, 0x1a, 0x01, 0xa1, 0x77, 0x7b, 0xe4, 0x06, 0xce, 0x98, 0x12, 0x5a, 0x2f, 0xc4, 0xd2,
	0xfd, 0x7f, 0x75, 0xef, 0xd8, 0xbd, 0xd1, 0x8b, 0xf0, 0x46, 0x57, 0x16, 0xf9, 0xea, 0x88, 0xb9,
	0x07, 0x72, 0xc2, 0xee, 0x69, 0xe4, 0x03, 0x9c, 0x16, 0x68, 0x14, 0x67, 0x8b, 0x2d, 0xdd, 0x54,
	0xa8, 0xb3, 0x66, 0x2f, 0x1e, 0xa4, 0x23, 0x12, 0xaa, 0x7c, 0x71, 0xde, 0xdc, 0x5a, 0x79, 0xa7,
	0x38, 0x5c, 0x74, 0x7f, 0x0e, 0xe4, 0x7e, 0x8b, 0x7d, 0x30, 0xa2, 0xa3, 0x60, 0x1c, 0xad, 0xa7,
	0xf1, 0xcf, 0x7a, 0x2c, 0xed, 0x32, 0x10, 0x62, 0x64, 0xcf, 0xfd, 0x9f, 0x11, 0xa4, 0x47, 0x5d,
	0xc9, 0x5b, 0xe8, 0x1a, 0xaa, 0xbe, 0xa3, 0xf1, 0x03, 0x2e, 0x6e, 0x79, 0x59, 0xe7, 0xf5, 0xa9,
	0x37, 0x1c, 0x77, 0xc3, 0xcb, 0x95, 0x5d, 0xde, 0x31, 0x1b, 0xda, 0xa5, 0x47, 0x18, 0x79, 0x03,
	0xa7, 0x0a, 0xb5, 0xa8, 0x14, 0x0b, 0xa5, 0x7c, 0x4c, 0x3b, 0xb5, 0x68, 0xeb, 0x8c, 0xfe, 0x44,
	0x10, 0xaf, 0x25, 0x25, 0x97, 0x90, 0x5c, 0x29, 0xa4, 0x06, 0xed, 0x17, 0x03, 0x75, 0x54, 0xa6,
	0xe3, 0x8b, 0xf3, 0x70, 0x9e, 0xf9, 0xa8, 0xe4, 0xe1, 0x1b, 0xeb, 0xff, 0x47, 0x86, 0xd0, 0xfe,
	0x8c, 0xe6, 0xe1, 0xfc, 0x25, 0x24, 0x9f, 0x70, 0x83, 0x8f, 0x69, 0xf1, 0x0e, 0xfe, 0x9f, 0x52,
	0xc3, 0xd6, 0x8f, 0x1a, 0x6a, 0x5a, 0x3d, 0x7c, 0xa8, 0x65, 0xdb, 0x19, 0xef, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0xe6, 0x5a, 0xbb, 0x90, 0x56, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HpaClient is the client API for Hpa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HpaClient interface {
	CreateHPA(ctx context.Context, in *HPA, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetHPA(ctx context.Context, in *HPA, opts ...grpc.CallOption) (*ServiceResponse, error)
	DeleteHPA(ctx context.Context, in *HPA, opts ...grpc.CallOption) (*ServiceResponse, error)
	PatchHPA(ctx context.Context, in *HPA, opts ...grpc.CallOption) (*ServiceResponse, error)
	PutHPA(ctx context.Context, in *HPA, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type hpaClient struct {
	cc grpc.ClientConnInterface
}

func NewHpaClient(cc grpc.ClientConnInterface) HpaClient {
	return &hpaClient{cc}
}

func (c *hpaClient) CreateHPA(ctx context.Context, in *HPA, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.hpa/CreateHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpaClient) GetHPA(ctx context.Context, in *HPA, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.hpa/GetHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpaClient) DeleteHPA(ctx context.Context, in *HPA, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.hpa/DeleteHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpaClient) PatchHPA(ctx context.Context, in *HPA, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.hpa/PatchHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpaClient) PutHPA(ctx context.Context, in *HPA, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.hpa/PutHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HpaServer is the server API for Hpa service.
type HpaServer interface {
	CreateHPA(context.Context, *HPA) (*ServiceResponse, error)
	GetHPA(context.Context, *HPA) (*ServiceResponse, error)
	DeleteHPA(context.Context, *HPA) (*ServiceResponse, error)
	PatchHPA(context.Context, *HPA) (*ServiceResponse, error)
	PutHPA(context.Context, *HPA) (*ServiceResponse, error)
}

// UnimplementedHpaServer can be embedded to have forward compatible implementations.
type UnimplementedHpaServer struct {
}

func (*UnimplementedHpaServer) CreateHPA(ctx context.Context, req *HPA) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHPA not implemented")
}
func (*UnimplementedHpaServer) GetHPA(ctx context.Context, req *HPA) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHPA not implemented")
}
func (*UnimplementedHpaServer) DeleteHPA(ctx context.Context, req *HPA) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHPA not implemented")
}
func (*UnimplementedHpaServer) PatchHPA(ctx context.Context, req *HPA) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchHPA not implemented")
}
func (*UnimplementedHpaServer) PutHPA(ctx context.Context, req *HPA) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutHPA not implemented")
}

func RegisterHpaServer(s *grpc.Server, srv HpaServer) {
	s.RegisterService(&_Hpa_serviceDesc, srv)
}

func _Hpa_CreateHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HPA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpaServer).CreateHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.hpa/CreateHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpaServer).CreateHPA(ctx, req.(*HPA))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hpa_GetHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HPA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpaServer).GetHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.hpa/GetHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpaServer).GetHPA(ctx, req.(*HPA))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hpa_DeleteHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HPA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpaServer).DeleteHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.hpa/DeleteHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpaServer).DeleteHPA(ctx, req.(*HPA))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hpa_PatchHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HPA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpaServer).PatchHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.hpa/PatchHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpaServer).PatchHPA(ctx, req.(*HPA))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hpa_PutHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HPA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpaServer).PutHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.hpa/PutHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpaServer).PutHPA(ctx, req.(*HPA))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hpa_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.hpa",
	HandlerType: (*HpaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHPA",
			Handler:    _Hpa_CreateHPA_Handler,
		},
		{
			MethodName: "GetHPA",
			Handler:    _Hpa_GetHPA_Handler,
		},
		{
			MethodName: "DeleteHPA",
			Handler:    _Hpa_DeleteHPA_Handler,
		},
		{
			MethodName: "PatchHPA",
			Handler:    _Hpa_PatchHPA_Handler,
		},
		{
			MethodName: "PutHPA",
			Handler:    _Hpa_PutHPA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hpa.proto",
}
