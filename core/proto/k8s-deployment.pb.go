// Code generated by protoc-gen-go. DO NOT EDIT.
// source: k8s-deployment.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServiceRequest struct {
	ProjectId            string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CompanyId            string   `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Service              []byte   `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceRequest) Reset()         { *m = ServiceRequest{} }
func (m *ServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceRequest) ProtoMessage()    {}
func (*ServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e1ee85abb0a032, []int{0}
}

func (m *ServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceRequest.Unmarshal(m, b)
}
func (m *ServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceRequest.Marshal(b, m, deterministic)
}
func (m *ServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRequest.Merge(m, src)
}
func (m *ServiceRequest) XXX_Size() int {
	return xxx_messageInfo_ServiceRequest.Size(m)
}
func (m *ServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRequest proto.InternalMessageInfo

func (m *ServiceRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ServiceRequest) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *ServiceRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ServiceRequest) GetService() []byte {
	if m != nil {
		return m.Service
	}
	return nil
}

type SerivceFResponse struct {
	Service              []byte   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerivceFResponse) Reset()         { *m = SerivceFResponse{} }
func (m *SerivceFResponse) String() string { return proto.CompactTextString(m) }
func (*SerivceFResponse) ProtoMessage()    {}
func (*SerivceFResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e1ee85abb0a032, []int{1}
}

func (m *SerivceFResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerivceFResponse.Unmarshal(m, b)
}
func (m *SerivceFResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerivceFResponse.Marshal(b, m, deterministic)
}
func (m *SerivceFResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerivceFResponse.Merge(m, src)
}
func (m *SerivceFResponse) XXX_Size() int {
	return xxx_messageInfo_SerivceFResponse.Size(m)
}
func (m *SerivceFResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SerivceFResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SerivceFResponse proto.InternalMessageInfo

func (m *SerivceFResponse) GetService() []byte {
	if m != nil {
		return m.Service
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceRequest)(nil), "proto.ServiceRequest")
	proto.RegisterType((*SerivceFResponse)(nil), "proto.SerivceFResponse")
}

func init() { proto.RegisterFile("k8s-deployment.proto", fileDescriptor_07e1ee85abb0a032) }

var fileDescriptor_07e1ee85abb0a032 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0xb6, 0x28, 0xd6,
	0x4d, 0x49, 0x2d, 0xc8, 0xc9, 0xaf, 0xcc, 0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x05, 0x53, 0x4a, 0x75, 0x5c, 0x7c, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x41,
	0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0xb2, 0x5c, 0x5c, 0x05, 0x45, 0xf9, 0x59, 0xa9, 0xc9,
	0x25, 0xf1, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x9c, 0x50, 0x11, 0xcf, 0x14,
	0x90, 0x74, 0x72, 0x7e, 0x6e, 0x41, 0x62, 0x5e, 0x25, 0x48, 0x9a, 0x09, 0x22, 0x0d, 0x15, 0xf1,
	0x4c, 0x11, 0x12, 0xe1, 0x62, 0x2d, 0xc9, 0xcf, 0x4e, 0xcd, 0x93, 0x60, 0x06, 0xcb, 0x40, 0x38,
	0x42, 0x12, 0x5c, 0xec, 0xc5, 0x10, 0x5b, 0x24, 0x58, 0x14, 0x18, 0x35, 0x78, 0x82, 0x60, 0x5c,
	0x25, 0x1d, 0x2e, 0x81, 0xe0, 0xd4, 0xa2, 0xcc, 0xb2, 0xe4, 0x54, 0xb7, 0xa0, 0xd4, 0xe2, 0x82,
	0xfc, 0xbc, 0xe2, 0x54, 0x64, 0xd5, 0x8c, 0x28, 0xaa, 0x8d, 0x2e, 0x32, 0x71, 0xb1, 0x43, 0x9d,
	0x2b, 0xe4, 0xc8, 0xc5, 0xeb, 0x5c, 0x94, 0x9a, 0x58, 0x92, 0x0a, 0x13, 0x10, 0x85, 0xf8, 0x4c,
	0x0f, 0xd5, 0x3f, 0x52, 0xe2, 0x08, 0x61, 0x14, 0x6b, 0x94, 0x18, 0x84, 0xec, 0xb8, 0xb8, 0xdc,
	0x53, 0x4b, 0xc8, 0xd7, 0xef, 0xc8, 0xc5, 0xeb, 0x92, 0x9a, 0x93, 0x4a, 0x89, 0x13, 0x1c, 0xb8,
	0x78, 0x02, 0x12, 0x4b, 0x92, 0x33, 0x28, 0xf2, 0x44, 0x40, 0x29, 0xf9, 0x9e, 0x48, 0x62, 0x03,
	0xcb, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x75, 0xac, 0x81, 0x7b, 0x27, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	CreateService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*SerivceFResponse, error)
	GetService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*SerivceFResponse, error)
	DeleteService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*SerivceFResponse, error)
	PatchService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*SerivceFResponse, error)
	PutService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*SerivceFResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CreateService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*SerivceFResponse, error) {
	out := new(SerivceFResponse)
	err := c.cc.Invoke(ctx, "/proto.Service/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*SerivceFResponse, error) {
	out := new(SerivceFResponse)
	err := c.cc.Invoke(ctx, "/proto.Service/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*SerivceFResponse, error) {
	out := new(SerivceFResponse)
	err := c.cc.Invoke(ctx, "/proto.Service/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PatchService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*SerivceFResponse, error) {
	out := new(SerivceFResponse)
	err := c.cc.Invoke(ctx, "/proto.Service/PatchService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PutService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*SerivceFResponse, error) {
	out := new(SerivceFResponse)
	err := c.cc.Invoke(ctx, "/proto.Service/PutService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	CreateService(context.Context, *ServiceRequest) (*SerivceFResponse, error)
	GetService(context.Context, *ServiceRequest) (*SerivceFResponse, error)
	DeleteService(context.Context, *ServiceRequest) (*SerivceFResponse, error)
	PatchService(context.Context, *ServiceRequest) (*SerivceFResponse, error)
	PutService(context.Context, *ServiceRequest) (*SerivceFResponse, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) CreateService(ctx context.Context, req *ServiceRequest) (*SerivceFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (*UnimplementedServiceServer) GetService(ctx context.Context, req *ServiceRequest) (*SerivceFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (*UnimplementedServiceServer) DeleteService(ctx context.Context, req *ServiceRequest) (*SerivceFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (*UnimplementedServiceServer) PatchService(ctx context.Context, req *ServiceRequest) (*SerivceFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchService not implemented")
}
func (*UnimplementedServiceServer) PutService(ctx context.Context, req *ServiceRequest) (*SerivceFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutService not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PatchService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PatchService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/PatchService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PatchService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PutService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PutService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/PutService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PutService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _Service_CreateService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Service_GetService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Service_DeleteService_Handler,
		},
		{
			MethodName: "PatchService",
			Handler:    _Service_PatchService_Handler,
		},
		{
			MethodName: "PutService",
			Handler:    _Service_PutService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8s-deployment.proto",
}
