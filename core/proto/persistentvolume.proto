syntax = "proto3";

package proto;
import "storageclass.proto";
import "service.proto";
service PersistentVolume {
    rpc CreatePersistentVolume (PersistentVolumeService) returns (ServiceResponse) {}
    rpc GetPersistentVolume (PersistentVolumeService) returns (ServiceResponse) {}
    rpc DeletePersistentVolume (PersistentVolumeService) returns (ServiceResponse) {}
    rpc PatchPersistentVolume (PersistentVolumeService) returns (ServiceResponse) {}
    rpc PutPersistentVolume (PersistentVolumeService) returns (ServiceResponse) {}
}

message PersistentVolumeService {
    string project_id = 1;
    string service_id = 2;
    string name = 3;
    string version = 4;
    string service_type = 5;
    string service_sub_type = 6;
    string token = 7;
    string company_id = 8;
    PersistentVolumeAttributes service_attributes = 9;
}

message PersistentVolumeAttributes{
    map<string,string>  labels    =1;
    ReclaimPolicy reclaimPolicy =2;
    repeated AccessMode accessMode =3;
    string capcity =4;
    PersistentVolumeSource persistentVolumeSource=5;
   string storageClassName =6;
    repeated string mountOptions=7;
    PersistentVolumeMode volumeMode=8;
    VolumeNodeAffinity nodeAffinity=9;
}

message PersistentVolumeSource {
    GCPPD  gcpPd=1;
    AWSEBS  awsEbs=2;
    AzureDisk azureDisk=3;
    AzureFile azureFile=4;
}
message GCPPD {
string pdName=1;
string fileSystem=2;
int64 partation=3;
bool readOnly=4;
}

message AWSEBS {
    string volumeId=1;
    string fileSystem=2;
    int64 partation=3;
    bool readOnly=4;
}

message AzureDisk {
    AzureDataDiskCachingMode cachingMode=1;
    AzureDataDiskKind kind=6;
    string fileSystem=2;
    string diskName=3;
    bool readOnly=4;
    string diskURI =5;
}


message AzureFile {
    string secretName=1;
    string shareName=2;
    bool readOnly=3;
    string secretNamespace=4;
}

enum AccessMode{
    ReadWriteOnce=0;
    ReadOnlyMany=1;
    ReadWriteMany=2;
}

enum PersistentVolumeMode{
    Block=0;
    Filesystem=1;
}

enum AzureDataDiskCachingMode {
    None=0;
    ReadOnly=1;
    ReadWrite=2;
}

enum AzureDataDiskKind {
    Shared=0;
    Dedicated=1;
    Managed=2;
}
message VolumeNodeAffinity  {
    NodeSelector required=1;
}

message NodeSelector {
    repeated NodeSelectorTerm nodeSelectorTerms = 1;
}
message NodeSelectorTerm{
    repeated NodeSelectorRequirement matchExpressions = 1;
    repeated NodeSelectorRequirement matchFields = 2;
}
message NodeSelectorRequirement{
    string key = 1;
    NodeSelectorOperator operator = 2;
    repeated string values = 3;
}
enum NodeSelectorOperator{
    NodeSelectorOpIn = 0;
    NodeSelectorOpNotIn = 1;
    NodeSelectorOpExists = 2;
    NodeSelectorOpDoesNotExists = 3;
    NodeSelectorOpGt = 4;
    NodeSelectorOpLt = 5;
}