// Code generated by protoc-gen-go. DO NOT EDIT.
// source: configmap.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConfigMapService struct {
	ServiceId             string                      `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Token                 string                      `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ProjectId             string                      `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CompanyId             string                      `protobuf:"bytes,4,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Name                  string                      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ServiceType           string                      `protobuf:"bytes,6,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	ServiceSubType        string                      `protobuf:"bytes,7,opt,name=service_sub_type,json=serviceSubType,proto3" json:"service_sub_type,omitempty"`
	ServiceDependencyInfo *any.Any                    `protobuf:"bytes,8,opt,name=service_dependency_info,json=serviceDependencyInfo,proto3" json:"service_dependency_info,omitempty"`
	Namespace             string                      `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Version               string                      `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	ServiceAttribute      *ConfigMapServiceAttributes `protobuf:"bytes,11,opt,name=service_attribute,json=serviceAttribute,proto3" json:"service_attribute,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                    `json:"-"`
	XXX_unrecognized      []byte                      `json:"-"`
	XXX_sizecache         int32                       `json:"-"`
}

func (m *ConfigMapService) Reset()         { *m = ConfigMapService{} }
func (m *ConfigMapService) String() string { return proto.CompactTextString(m) }
func (*ConfigMapService) ProtoMessage()    {}
func (*ConfigMapService) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9a4fcd82d33260, []int{0}
}

func (m *ConfigMapService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigMapService.Unmarshal(m, b)
}
func (m *ConfigMapService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigMapService.Marshal(b, m, deterministic)
}
func (m *ConfigMapService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMapService.Merge(m, src)
}
func (m *ConfigMapService) XXX_Size() int {
	return xxx_messageInfo_ConfigMapService.Size(m)
}
func (m *ConfigMapService) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMapService.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMapService proto.InternalMessageInfo

func (m *ConfigMapService) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *ConfigMapService) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ConfigMapService) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ConfigMapService) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *ConfigMapService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigMapService) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *ConfigMapService) GetServiceSubType() string {
	if m != nil {
		return m.ServiceSubType
	}
	return ""
}

func (m *ConfigMapService) GetServiceDependencyInfo() *any.Any {
	if m != nil {
		return m.ServiceDependencyInfo
	}
	return nil
}

func (m *ConfigMapService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ConfigMapService) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ConfigMapService) GetServiceAttribute() *ConfigMapServiceAttributes {
	if m != nil {
		return m.ServiceAttribute
	}
	return nil
}

type ConfigMapServiceAttributes struct {
	Data                 map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ConfigMapServiceAttributes) Reset()         { *m = ConfigMapServiceAttributes{} }
func (m *ConfigMapServiceAttributes) String() string { return proto.CompactTextString(m) }
func (*ConfigMapServiceAttributes) ProtoMessage()    {}
func (*ConfigMapServiceAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd9a4fcd82d33260, []int{1}
}

func (m *ConfigMapServiceAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigMapServiceAttributes.Unmarshal(m, b)
}
func (m *ConfigMapServiceAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigMapServiceAttributes.Marshal(b, m, deterministic)
}
func (m *ConfigMapServiceAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMapServiceAttributes.Merge(m, src)
}
func (m *ConfigMapServiceAttributes) XXX_Size() int {
	return xxx_messageInfo_ConfigMapServiceAttributes.Size(m)
}
func (m *ConfigMapServiceAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMapServiceAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMapServiceAttributes proto.InternalMessageInfo

func (m *ConfigMapServiceAttributes) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ConfigMapService)(nil), "proto.ConfigMapService")
	proto.RegisterType((*ConfigMapServiceAttributes)(nil), "proto.ConfigMapServiceAttributes")
	proto.RegisterMapType((map[string]string)(nil), "proto.ConfigMapServiceAttributes.DataEntry")
}

func init() { proto.RegisterFile("configmap.proto", fileDescriptor_fd9a4fcd82d33260) }

var fileDescriptor_fd9a4fcd82d33260 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x75, 0xd2, 0xe2, 0x09, 0x3f, 0x61, 0x69, 0xd3, 0xc5, 0x02, 0x29, 0xcd, 0x29, 0x12,
	0x92, 0x2b, 0x85, 0x03, 0x88, 0x0b, 0xaa, 0x1a, 0x04, 0xa1, 0x80, 0x2a, 0x97, 0x7b, 0xb5, 0xb6,
	0x27, 0xc1, 0x34, 0xd9, 0x5d, 0xd9, 0xeb, 0x48, 0xfb, 0x00, 0xbc, 0x02, 0x4f, 0xc3, 0xc3, 0x21,
	0xef, 0x8f, 0x0f, 0xa0, 0x88, 0x4b, 0x4e, 0xde, 0xf9, 0xfe, 0x66, 0x76, 0x3d, 0xf0, 0x38, 0x17,
	0x7c, 0x59, 0xae, 0x36, 0x4c, 0x26, 0xb2, 0x12, 0x4a, 0x90, 0xbe, 0xf9, 0xc4, 0x0f, 0x6b, 0xac,
	0xb6, 0x65, 0x8e, 0x16, 0x8d, 0x9f, 0xad, 0x84, 0x58, 0xad, 0xf1, 0xdc, 0x54, 0x59, 0xb3, 0x3c,
	0x67, 0x5c, 0x5b, 0x6a, 0xf2, 0x3b, 0x84, 0xe1, 0xa5, 0x09, 0xf9, 0xc2, 0xe4, 0x8d, 0x75, 0x91,
	0x17, 0x00, 0x2e, 0xe0, 0xb6, 0x2c, 0x68, 0x30, 0x0e, 0xa6, 0x51, 0x1a, 0x39, 0x64, 0x51, 0x90,
	0x63, 0xe8, 0x2b, 0x71, 0x87, 0x9c, 0x1e, 0x18, 0xc6, 0x16, 0xad, 0x49, 0x56, 0xe2, 0x07, 0xe6,
	0xaa, 0x35, 0x85, 0xd6, 0xe4, 0x90, 0x45, 0xd1, 0xd2, 0xb9, 0xd8, 0x48, 0xc6, 0x75, 0x4b, 0xf7,
	0x2c, 0xed, 0x90, 0x45, 0x41, 0x08, 0xf4, 0x38, 0xdb, 0x20, 0xed, 0x1b, 0xc2, 0x9c, 0xc9, 0x19,
	0x3c, 0xf0, 0x63, 0x28, 0x2d, 0x91, 0x1e, 0x1a, 0x6e, 0xe0, 0xb0, 0x6f, 0x5a, 0x22, 0x99, 0xc2,
	0xd0, 0x4b, 0xea, 0x26, 0xb3, 0xb2, 0x23, 0x23, 0x7b, 0xe4, 0xf0, 0x9b, 0x26, 0x33, 0xca, 0xcf,
	0x70, 0xea, 0x95, 0x05, 0x4a, 0xe4, 0x05, 0xf2, 0x5c, 0xdf, 0x96, 0x7c, 0x29, 0xe8, 0xfd, 0x71,
	0x30, 0x1d, 0xcc, 0x8e, 0x13, 0xfb, 0x4a, 0x89, 0x7f, 0xa5, 0xe4, 0x82, 0xeb, 0xf4, 0xc4, 0x99,
	0xe6, 0x9d, 0x67, 0xc1, 0x97, 0x82, 0x3c, 0x87, 0xa8, 0x1d, 0xb1, 0x96, 0x2c, 0x47, 0x1a, 0xd9,
	0xcb, 0x74, 0x00, 0xa1, 0x70, 0xb4, 0xc5, 0xaa, 0x2e, 0x05, 0xa7, 0x60, 0x38, 0x5f, 0x92, 0xaf,
	0xf0, 0xc4, 0x4f, 0xc1, 0x94, 0xaa, 0xca, 0xac, 0x51, 0x48, 0x07, 0xa6, 0xff, 0x99, 0x6d, 0x9c,
	0xfc, 0xfd, 0x37, 0x2e, 0xbc, 0xae, 0x4e, 0xfd, 0x5d, 0x3b, 0x68, 0xf2, 0x2b, 0x80, 0x78, 0xb7,
	0x81, 0xbc, 0x83, 0x5e, 0xc1, 0x14, 0xa3, 0xc1, 0x38, 0x9c, 0x0e, 0x66, 0x2f, 0xff, 0xdb, 0x21,
	0x99, 0x33, 0xc5, 0xde, 0x73, 0x55, 0xe9, 0xd4, 0x18, 0xe3, 0xd7, 0x10, 0x75, 0x10, 0x19, 0x42,
	0x78, 0x87, 0xda, 0xed, 0x43, 0x7b, 0x6c, 0x37, 0x61, 0xcb, 0xd6, 0x0d, 0xfa, 0x4d, 0x30, 0xc5,
	0xdb, 0x83, 0x37, 0xc1, 0xec, 0x67, 0x08, 0x51, 0xd7, 0x87, 0x5c, 0xc1, 0xe8, 0xb2, 0x42, 0xa6,
	0xf0, 0x9f, 0x55, 0x3b, 0xdd, 0x31, 0x53, 0x3c, 0x72, 0x84, 0xab, 0x53, 0xac, 0xa5, 0xe0, 0x35,
	0x4e, 0xee, 0x91, 0x8f, 0xf0, 0xf4, 0x03, 0xaa, 0x3d, 0x25, 0x5d, 0x37, 0x7b, 0x49, 0xfa, 0x04,
	0x27, 0xd7, 0x4c, 0xe5, 0xdf, 0xf7, 0x91, 0x75, 0x05, 0xa3, 0x39, 0xae, 0x71, 0x2f, 0x8f, 0x95,
	0x1d, 0x1a, 0xe2, 0xd5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x39, 0xc8, 0xca, 0x2a, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigMapClient is the client API for ConfigMap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigMapClient interface {
	CreateConfigMapService(ctx context.Context, in *ConfigMapService, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetConfigMapService(ctx context.Context, in *ConfigMapService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PutConfigMapService(ctx context.Context, in *ConfigMapService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PatchConfigMapService(ctx context.Context, in *ConfigMapService, opts ...grpc.CallOption) (*ServiceResponse, error)
	DeleteConfigMapService(ctx context.Context, in *ConfigMapService, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type configMapClient struct {
	cc *grpc.ClientConn
}

func NewConfigMapClient(cc *grpc.ClientConn) ConfigMapClient {
	return &configMapClient{cc}
}

func (c *configMapClient) CreateConfigMapService(ctx context.Context, in *ConfigMapService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.ConfigMap/CreateConfigMapService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapClient) GetConfigMapService(ctx context.Context, in *ConfigMapService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.ConfigMap/GetConfigMapService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapClient) PutConfigMapService(ctx context.Context, in *ConfigMapService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.ConfigMap/PutConfigMapService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapClient) PatchConfigMapService(ctx context.Context, in *ConfigMapService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.ConfigMap/PatchConfigMapService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapClient) DeleteConfigMapService(ctx context.Context, in *ConfigMapService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.ConfigMap/DeleteConfigMapService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigMapServer is the server API for ConfigMap service.
type ConfigMapServer interface {
	CreateConfigMapService(context.Context, *ConfigMapService) (*ServiceResponse, error)
	GetConfigMapService(context.Context, *ConfigMapService) (*ServiceResponse, error)
	PutConfigMapService(context.Context, *ConfigMapService) (*ServiceResponse, error)
	PatchConfigMapService(context.Context, *ConfigMapService) (*ServiceResponse, error)
	DeleteConfigMapService(context.Context, *ConfigMapService) (*ServiceResponse, error)
}

// UnimplementedConfigMapServer can be embedded to have forward compatible implementations.
type UnimplementedConfigMapServer struct {
}

func (*UnimplementedConfigMapServer) CreateConfigMapService(ctx context.Context, req *ConfigMapService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigMapService not implemented")
}
func (*UnimplementedConfigMapServer) GetConfigMapService(ctx context.Context, req *ConfigMapService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigMapService not implemented")
}
func (*UnimplementedConfigMapServer) PutConfigMapService(ctx context.Context, req *ConfigMapService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutConfigMapService not implemented")
}
func (*UnimplementedConfigMapServer) PatchConfigMapService(ctx context.Context, req *ConfigMapService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchConfigMapService not implemented")
}
func (*UnimplementedConfigMapServer) DeleteConfigMapService(ctx context.Context, req *ConfigMapService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigMapService not implemented")
}

func RegisterConfigMapServer(s *grpc.Server, srv ConfigMapServer) {
	s.RegisterService(&_ConfigMap_serviceDesc, srv)
}

func _ConfigMap_CreateConfigMapService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServer).CreateConfigMapService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConfigMap/CreateConfigMapService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServer).CreateConfigMapService(ctx, req.(*ConfigMapService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMap_GetConfigMapService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServer).GetConfigMapService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConfigMap/GetConfigMapService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServer).GetConfigMapService(ctx, req.(*ConfigMapService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMap_PutConfigMapService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServer).PutConfigMapService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConfigMap/PutConfigMapService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServer).PutConfigMapService(ctx, req.(*ConfigMapService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMap_PatchConfigMapService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServer).PatchConfigMapService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConfigMap/PatchConfigMapService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServer).PatchConfigMapService(ctx, req.(*ConfigMapService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMap_DeleteConfigMapService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServer).DeleteConfigMapService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConfigMap/DeleteConfigMapService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServer).DeleteConfigMapService(ctx, req.(*ConfigMapService))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigMap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ConfigMap",
	HandlerType: (*ConfigMapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConfigMapService",
			Handler:    _ConfigMap_CreateConfigMapService_Handler,
		},
		{
			MethodName: "GetConfigMapService",
			Handler:    _ConfigMap_GetConfigMapService_Handler,
		},
		{
			MethodName: "PutConfigMapService",
			Handler:    _ConfigMap_PutConfigMapService_Handler,
		},
		{
			MethodName: "PatchConfigMapService",
			Handler:    _ConfigMap_PatchConfigMapService_Handler,
		},
		{
			MethodName: "DeleteConfigMapService",
			Handler:    _ConfigMap_DeleteConfigMapService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configmap.proto",
}
