// Code generated by protoc-gen-go. DO NOT EDIT.
// source: networkpolicy.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Protocol int32

const (
	Protocol_TCP  Protocol = 0
	Protocol_UDP  Protocol = 1
	Protocol_SCTP Protocol = 2
)

var Protocol_name = map[int32]string{
	0: "TCP",
	1: "UDP",
	2: "SCTP",
}

var Protocol_value = map[string]int32{
	"TCP":  0,
	"UDP":  1,
	"SCTP": 2,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}

func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c7cd28eea6ccfad, []int{0}
}

type NetworkPolicyService struct {
	ProjectId            string                   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ServiceId            string                   `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Name                 string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version              string                   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	ServiceType          string                   `protobuf:"bytes,5,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	ServiceSubType       string                   `protobuf:"bytes,6,opt,name=service_sub_type,json=serviceSubType,proto3" json:"service_sub_type,omitempty"`
	Token                string                   `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	CompanyId            string                   `protobuf:"bytes,8,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ServiceAttributes    *NetworkPolicyAttributes `protobuf:"bytes,9,opt,name=service_attributes,json=serviceAttributes,proto3" json:"service_attributes,omitempty"`
	Namespace            string                   `protobuf:"bytes,10,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NetworkPolicyService) Reset()         { *m = NetworkPolicyService{} }
func (m *NetworkPolicyService) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyService) ProtoMessage()    {}
func (*NetworkPolicyService) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c7cd28eea6ccfad, []int{0}
}

func (m *NetworkPolicyService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkPolicyService.Unmarshal(m, b)
}
func (m *NetworkPolicyService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkPolicyService.Marshal(b, m, deterministic)
}
func (m *NetworkPolicyService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyService.Merge(m, src)
}
func (m *NetworkPolicyService) XXX_Size() int {
	return xxx_messageInfo_NetworkPolicyService.Size(m)
}
func (m *NetworkPolicyService) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyService.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyService proto.InternalMessageInfo

func (m *NetworkPolicyService) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *NetworkPolicyService) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *NetworkPolicyService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkPolicyService) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *NetworkPolicyService) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *NetworkPolicyService) GetServiceSubType() string {
	if m != nil {
		return m.ServiceSubType
	}
	return ""
}

func (m *NetworkPolicyService) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *NetworkPolicyService) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *NetworkPolicyService) GetServiceAttributes() *NetworkPolicyAttributes {
	if m != nil {
		return m.ServiceAttributes
	}
	return nil
}

func (m *NetworkPolicyService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type NetworkPolicyAttributes struct {
	PodSelector          *LabelSelectorObj `protobuf:"bytes,1,opt,name=podSelector,proto3" json:"podSelector,omitempty"`
	Ingress              []*IngressRule    `protobuf:"bytes,2,rep,name=ingress,proto3" json:"ingress,omitempty"`
	Egress               []*EgressRule     `protobuf:"bytes,3,rep,name=egress,proto3" json:"egress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NetworkPolicyAttributes) Reset()         { *m = NetworkPolicyAttributes{} }
func (m *NetworkPolicyAttributes) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyAttributes) ProtoMessage()    {}
func (*NetworkPolicyAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c7cd28eea6ccfad, []int{1}
}

func (m *NetworkPolicyAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkPolicyAttributes.Unmarshal(m, b)
}
func (m *NetworkPolicyAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkPolicyAttributes.Marshal(b, m, deterministic)
}
func (m *NetworkPolicyAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyAttributes.Merge(m, src)
}
func (m *NetworkPolicyAttributes) XXX_Size() int {
	return xxx_messageInfo_NetworkPolicyAttributes.Size(m)
}
func (m *NetworkPolicyAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyAttributes proto.InternalMessageInfo

func (m *NetworkPolicyAttributes) GetPodSelector() *LabelSelectorObj {
	if m != nil {
		return m.PodSelector
	}
	return nil
}

func (m *NetworkPolicyAttributes) GetIngress() []*IngressRule {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *NetworkPolicyAttributes) GetEgress() []*EgressRule {
	if m != nil {
		return m.Egress
	}
	return nil
}

type IngressRule struct {
	Ports                []*NetworkPolicyPort `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	From                 []*NetworkPolicyPeer `protobuf:"bytes,2,rep,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IngressRule) Reset()         { *m = IngressRule{} }
func (m *IngressRule) String() string { return proto.CompactTextString(m) }
func (*IngressRule) ProtoMessage()    {}
func (*IngressRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c7cd28eea6ccfad, []int{2}
}

func (m *IngressRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngressRule.Unmarshal(m, b)
}
func (m *IngressRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngressRule.Marshal(b, m, deterministic)
}
func (m *IngressRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngressRule.Merge(m, src)
}
func (m *IngressRule) XXX_Size() int {
	return xxx_messageInfo_IngressRule.Size(m)
}
func (m *IngressRule) XXX_DiscardUnknown() {
	xxx_messageInfo_IngressRule.DiscardUnknown(m)
}

var xxx_messageInfo_IngressRule proto.InternalMessageInfo

func (m *IngressRule) GetPorts() []*NetworkPolicyPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *IngressRule) GetFrom() []*NetworkPolicyPeer {
	if m != nil {
		return m.From
	}
	return nil
}

type EgressRule struct {
	Ports                []*NetworkPolicyPort `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	To                   []*NetworkPolicyPeer `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EgressRule) Reset()         { *m = EgressRule{} }
func (m *EgressRule) String() string { return proto.CompactTextString(m) }
func (*EgressRule) ProtoMessage()    {}
func (*EgressRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c7cd28eea6ccfad, []int{3}
}

func (m *EgressRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EgressRule.Unmarshal(m, b)
}
func (m *EgressRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EgressRule.Marshal(b, m, deterministic)
}
func (m *EgressRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EgressRule.Merge(m, src)
}
func (m *EgressRule) XXX_Size() int {
	return xxx_messageInfo_EgressRule.Size(m)
}
func (m *EgressRule) XXX_DiscardUnknown() {
	xxx_messageInfo_EgressRule.DiscardUnknown(m)
}

var xxx_messageInfo_EgressRule proto.InternalMessageInfo

func (m *EgressRule) GetPorts() []*NetworkPolicyPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *EgressRule) GetTo() []*NetworkPolicyPeer {
	if m != nil {
		return m.To
	}
	return nil
}

type NetworkPolicyPort struct {
	Protocol             Protocol          `protobuf:"varint,1,opt,name=protocol,proto3,enum=proto.Protocol" json:"protocol,omitempty"`
	Port                 *PortItntOrString `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NetworkPolicyPort) Reset()         { *m = NetworkPolicyPort{} }
func (m *NetworkPolicyPort) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyPort) ProtoMessage()    {}
func (*NetworkPolicyPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c7cd28eea6ccfad, []int{4}
}

func (m *NetworkPolicyPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkPolicyPort.Unmarshal(m, b)
}
func (m *NetworkPolicyPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkPolicyPort.Marshal(b, m, deterministic)
}
func (m *NetworkPolicyPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyPort.Merge(m, src)
}
func (m *NetworkPolicyPort) XXX_Size() int {
	return xxx_messageInfo_NetworkPolicyPort.Size(m)
}
func (m *NetworkPolicyPort) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyPort.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyPort proto.InternalMessageInfo

func (m *NetworkPolicyPort) GetProtocol() Protocol {
	if m != nil {
		return m.Protocol
	}
	return Protocol_TCP
}

func (m *NetworkPolicyPort) GetPort() *PortItntOrString {
	if m != nil {
		return m.Port
	}
	return nil
}

type PortItntOrString struct {
	PortNumber           int32    `protobuf:"varint,1,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
	PortName             string   `protobuf:"bytes,2,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortItntOrString) Reset()         { *m = PortItntOrString{} }
func (m *PortItntOrString) String() string { return proto.CompactTextString(m) }
func (*PortItntOrString) ProtoMessage()    {}
func (*PortItntOrString) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c7cd28eea6ccfad, []int{5}
}

func (m *PortItntOrString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortItntOrString.Unmarshal(m, b)
}
func (m *PortItntOrString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortItntOrString.Marshal(b, m, deterministic)
}
func (m *PortItntOrString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortItntOrString.Merge(m, src)
}
func (m *PortItntOrString) XXX_Size() int {
	return xxx_messageInfo_PortItntOrString.Size(m)
}
func (m *PortItntOrString) XXX_DiscardUnknown() {
	xxx_messageInfo_PortItntOrString.DiscardUnknown(m)
}

var xxx_messageInfo_PortItntOrString proto.InternalMessageInfo

func (m *PortItntOrString) GetPortNumber() int32 {
	if m != nil {
		return m.PortNumber
	}
	return 0
}

func (m *PortItntOrString) GetPortName() string {
	if m != nil {
		return m.PortName
	}
	return ""
}

type NetworkPolicyPeer struct {
	PodSelector          *LabelSelectorObj `protobuf:"bytes,1,opt,name=podSelector,proto3" json:"podSelector,omitempty"`
	NamespaceSelector    *LabelSelectorObj `protobuf:"bytes,2,opt,name=namespaceSelector,proto3" json:"namespaceSelector,omitempty"`
	IpBlock              *IPBlock          `protobuf:"bytes,3,opt,name=ipBlock,proto3" json:"ipBlock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NetworkPolicyPeer) Reset()         { *m = NetworkPolicyPeer{} }
func (m *NetworkPolicyPeer) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicyPeer) ProtoMessage()    {}
func (*NetworkPolicyPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c7cd28eea6ccfad, []int{6}
}

func (m *NetworkPolicyPeer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkPolicyPeer.Unmarshal(m, b)
}
func (m *NetworkPolicyPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkPolicyPeer.Marshal(b, m, deterministic)
}
func (m *NetworkPolicyPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyPeer.Merge(m, src)
}
func (m *NetworkPolicyPeer) XXX_Size() int {
	return xxx_messageInfo_NetworkPolicyPeer.Size(m)
}
func (m *NetworkPolicyPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyPeer.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyPeer proto.InternalMessageInfo

func (m *NetworkPolicyPeer) GetPodSelector() *LabelSelectorObj {
	if m != nil {
		return m.PodSelector
	}
	return nil
}

func (m *NetworkPolicyPeer) GetNamespaceSelector() *LabelSelectorObj {
	if m != nil {
		return m.NamespaceSelector
	}
	return nil
}

func (m *NetworkPolicyPeer) GetIpBlock() *IPBlock {
	if m != nil {
		return m.IpBlock
	}
	return nil
}

type IPBlock struct {
	Cidr                 string   `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Except               []string `protobuf:"bytes,2,rep,name=except,proto3" json:"except,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPBlock) Reset()         { *m = IPBlock{} }
func (m *IPBlock) String() string { return proto.CompactTextString(m) }
func (*IPBlock) ProtoMessage()    {}
func (*IPBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c7cd28eea6ccfad, []int{7}
}

func (m *IPBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPBlock.Unmarshal(m, b)
}
func (m *IPBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPBlock.Marshal(b, m, deterministic)
}
func (m *IPBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPBlock.Merge(m, src)
}
func (m *IPBlock) XXX_Size() int {
	return xxx_messageInfo_IPBlock.Size(m)
}
func (m *IPBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_IPBlock.DiscardUnknown(m)
}

var xxx_messageInfo_IPBlock proto.InternalMessageInfo

func (m *IPBlock) GetCidr() string {
	if m != nil {
		return m.Cidr
	}
	return ""
}

func (m *IPBlock) GetExcept() []string {
	if m != nil {
		return m.Except
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.Protocol", Protocol_name, Protocol_value)
	proto.RegisterType((*NetworkPolicyService)(nil), "proto.NetworkPolicyService")
	proto.RegisterType((*NetworkPolicyAttributes)(nil), "proto.NetworkPolicyAttributes")
	proto.RegisterType((*IngressRule)(nil), "proto.IngressRule")
	proto.RegisterType((*EgressRule)(nil), "proto.EgressRule")
	proto.RegisterType((*NetworkPolicyPort)(nil), "proto.NetworkPolicyPort")
	proto.RegisterType((*PortItntOrString)(nil), "proto.PortItntOrString")
	proto.RegisterType((*NetworkPolicyPeer)(nil), "proto.NetworkPolicyPeer")
	proto.RegisterType((*IPBlock)(nil), "proto.IPBlock")
}

func init() { proto.RegisterFile("networkpolicy.proto", fileDescriptor_5c7cd28eea6ccfad) }

var fileDescriptor_5c7cd28eea6ccfad = []byte{
	// 670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x9d, 0xfb, 0x98, 0x96, 0x64, 0x5a, 0xb5, 0x56, 0xcb, 0xa5, 0xf8, 0x01, 0x05, 0x5a,
	0xf5, 0x21, 0x88, 0x07, 0x1e, 0xa1, 0xad, 0x50, 0x44, 0x69, 0x2d, 0xa7, 0x3c, 0x57, 0xb6, 0x33,
	0x2d, 0x6e, 0x6c, 0xaf, 0xb5, 0x5e, 0x17, 0xf2, 0x13, 0xfc, 0x09, 0xdf, 0xc0, 0x37, 0xf1, 0x07,
	0xc8, 0xbb, 0xeb, 0xf4, 0x16, 0x40, 0x82, 0x3c, 0xd9, 0x7b, 0xce, 0x99, 0xb3, 0xb3, 0x33, 0xb3,
	0x0b, 0xab, 0x29, 0x89, 0x2f, 0x8c, 0x4f, 0x32, 0x16, 0x47, 0xe1, 0x74, 0x2f, 0xe3, 0x4c, 0x30,
	0x6c, 0xc8, 0xcf, 0xe6, 0x72, 0x4e, 0xfc, 0x2a, 0x0a, 0x49, 0xa1, 0x9b, 0x5b, 0x19, 0xf1, 0x3c,
	0xca, 0x05, 0xa5, 0xe2, 0x8a, 0xc5, 0x45, 0x42, 0x61, 0xec, 0x47, 0x89, 0x22, 0x9d, 0x9f, 0x26,
	0xac, 0x1d, 0x2b, 0x2b, 0x57, 0x5a, 0x8d, 0x54, 0x2c, 0x3e, 0x06, 0xc8, 0x38, 0xbb, 0xa4, 0x50,
	0x9c, 0x45, 0x63, 0xdb, 0xd8, 0x36, 0xfa, 0x1d, 0xaf, 0xa3, 0x91, 0xe1, 0xb8, 0xa4, 0xf5, 0x2e,
	0x25, 0x6d, 0x2a, 0x5a, 0x23, 0xc3, 0x31, 0x22, 0xd4, 0x53, 0x3f, 0x21, 0xbb, 0x26, 0x09, 0xf9,
	0x8f, 0x36, 0xb4, 0xae, 0xca, 0x4c, 0x58, 0x6a, 0xd7, 0x25, 0x5c, 0x2d, 0xf1, 0x19, 0x3c, 0xa8,
	0xcc, 0xc4, 0x34, 0x23, 0xbb, 0x21, 0x69, 0x4b, 0x63, 0xa7, 0xd3, 0x8c, 0xb0, 0x0f, 0xdd, 0x4a,
	0x92, 0x17, 0x81, 0x92, 0x35, 0xa5, 0x6c, 0x45, 0xe3, 0xa3, 0x22, 0x90, 0xca, 0x35, 0x68, 0x08,
	0x36, 0xa1, 0xd4, 0x6e, 0x49, 0x5a, 0x2d, 0xca, 0x7c, 0x43, 0x96, 0x64, 0x7e, 0x3a, 0x2d, 0xf3,
	0x6d, 0xab, 0x7c, 0x35, 0x32, 0x1c, 0xe3, 0x47, 0xc0, 0xca, 0xde, 0x17, 0x82, 0x47, 0x41, 0x21,
	0x28, 0xb7, 0x3b, 0xdb, 0x46, 0xdf, 0x1a, 0x3c, 0x51, 0xa5, 0xda, 0xbb, 0x55, 0xa6, 0xb7, 0x33,
	0x95, 0xd7, 0xd3, 0x91, 0xd7, 0x10, 0x3e, 0x82, 0x4e, 0x79, 0xe4, 0x3c, 0xf3, 0x43, 0xb2, 0x41,
	0x6d, 0x36, 0x03, 0x9c, 0xef, 0x06, 0x6c, 0xfc, 0xc6, 0x0c, 0xdf, 0x80, 0x95, 0xb1, 0xf1, 0x88,
	0x62, 0x0a, 0x05, 0xe3, 0xb2, 0xee, 0xd6, 0x60, 0x43, 0x67, 0x70, 0xe4, 0x07, 0x14, 0x57, 0xdc,
	0x49, 0x70, 0xe9, 0xdd, 0xd4, 0xe2, 0x2e, 0xb4, 0xa2, 0xf4, 0x82, 0x53, 0x9e, 0xdb, 0xe6, 0x76,
	0xad, 0x6f, 0x0d, 0x50, 0x87, 0x0d, 0x15, 0xea, 0x15, 0x31, 0x79, 0x95, 0x04, 0x5f, 0x40, 0x93,
	0x94, 0xb8, 0x26, 0xc5, 0x3d, 0x2d, 0x3e, 0xbc, 0xd6, 0x6a, 0x81, 0x33, 0x01, 0xeb, 0x86, 0x05,
	0xee, 0x41, 0x23, 0x63, 0x5c, 0xe4, 0xb6, 0x21, 0x03, 0xed, 0x79, 0xe5, 0x71, 0x19, 0x17, 0x9e,
	0x92, 0xe1, 0x2e, 0xd4, 0xcf, 0x39, 0x4b, 0x74, 0x52, 0xf3, 0xe5, 0x44, 0xdc, 0x93, 0x2a, 0xe7,
	0x1c, 0xe0, 0xf0, 0xdf, 0xf7, 0xea, 0x83, 0x29, 0xd8, 0x5f, 0x77, 0x32, 0x05, 0x73, 0x12, 0xe8,
	0xdd, 0x73, 0xc1, 0x1d, 0x68, 0xcb, 0x98, 0x90, 0xc5, 0xb2, 0xf4, 0x2b, 0x83, 0x87, 0xda, 0xc4,
	0xd5, 0xb0, 0x37, 0x13, 0xe0, 0x0e, 0xd4, 0xcb, 0x4d, 0xe5, 0xf0, 0x5f, 0xf7, 0xa8, 0xf4, 0x19,
	0x8a, 0x54, 0x9c, 0xf0, 0x91, 0xe0, 0x51, 0x7a, 0xe1, 0x49, 0x91, 0xe3, 0x42, 0xf7, 0x2e, 0x83,
	0x4f, 0xcb, 0x5e, 0x73, 0x71, 0x96, 0x16, 0x49, 0x40, 0xaa, 0xd7, 0x0d, 0x0f, 0x4a, 0xe8, 0x58,
	0x22, 0xb8, 0x05, 0x1d, 0x25, 0x28, 0xaf, 0x92, 0xba, 0x63, 0x6d, 0x49, 0xfb, 0x09, 0x39, 0x3f,
	0x8c, 0xbb, 0x27, 0x20, 0xe2, 0xff, 0x33, 0x3f, 0x87, 0xd0, 0x9b, 0xcd, 0xe8, 0xcc, 0xc0, 0xfc,
	0xb3, 0xc1, 0xfd, 0x08, 0xec, 0x43, 0x2b, 0xca, 0xde, 0xc5, 0x2c, 0x9c, 0xc8, 0xdb, 0x6f, 0x0d,
	0x56, 0xaa, 0x31, 0x74, 0x25, 0xea, 0x55, 0xb4, 0xf3, 0x1a, 0x5a, 0x1a, 0x2b, 0xdf, 0x8b, 0x30,
	0x1a, 0x73, 0xfd, 0xce, 0xc8, 0x7f, 0x5c, 0x87, 0x26, 0x7d, 0x0d, 0x29, 0x13, 0xb2, 0x9f, 0x1d,
	0x4f, 0xaf, 0x5e, 0x3e, 0x87, 0x76, 0xd5, 0x0d, 0x6c, 0x41, 0xed, 0x74, 0xdf, 0xed, 0x2e, 0x95,
	0x3f, 0x9f, 0x0e, 0xdc, 0xae, 0x81, 0x6d, 0xa8, 0x8f, 0xf6, 0x4f, 0xdd, 0xae, 0x39, 0xf8, 0x56,
	0x83, 0xe5, 0x5b, 0x05, 0xc2, 0x23, 0x58, 0xdd, 0xe7, 0xe4, 0x0b, 0xba, 0x0d, 0x6f, 0xcd, 0x1b,
	0x14, 0xfd, 0x0e, 0x6e, 0xae, 0x6b, 0x52, 0xaf, 0x3d, 0xca, 0x33, 0x96, 0xe6, 0xe4, 0x2c, 0xe1,
	0x10, 0xba, 0xef, 0x49, 0x2c, 0xc4, 0xea, 0x08, 0x56, 0x0f, 0x28, 0xa6, 0x05, 0x25, 0xf6, 0x01,
	0xd0, 0xf5, 0x45, 0xf8, 0x79, 0x51, 0xa7, 0x74, 0x8b, 0x85, 0x9c, 0x32, 0x68, 0x4a, 0xe2, 0xd5,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x50, 0xf3, 0x91, 0x8f, 0xbc, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkPolicyClient is the client API for NetworkPolicy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkPolicyClient interface {
	CreateNetworkPolicy(ctx context.Context, in *NetworkPolicyService, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetNetworkPolicy(ctx context.Context, in *NetworkPolicyService, opts ...grpc.CallOption) (*ServiceResponse, error)
	DeleteNetworkPolicy(ctx context.Context, in *NetworkPolicyService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PatchNetworkPolicy(ctx context.Context, in *NetworkPolicyService, opts ...grpc.CallOption) (*ServiceResponse, error)
	PutNetworkPolicy(ctx context.Context, in *NetworkPolicyService, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type networkPolicyClient struct {
	cc *grpc.ClientConn
}

func NewNetworkPolicyClient(cc *grpc.ClientConn) NetworkPolicyClient {
	return &networkPolicyClient{cc}
}

func (c *networkPolicyClient) CreateNetworkPolicy(ctx context.Context, in *NetworkPolicyService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.NetworkPolicy/CreateNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkPolicyClient) GetNetworkPolicy(ctx context.Context, in *NetworkPolicyService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.NetworkPolicy/GetNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkPolicyClient) DeleteNetworkPolicy(ctx context.Context, in *NetworkPolicyService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.NetworkPolicy/DeleteNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkPolicyClient) PatchNetworkPolicy(ctx context.Context, in *NetworkPolicyService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.NetworkPolicy/PatchNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkPolicyClient) PutNetworkPolicy(ctx context.Context, in *NetworkPolicyService, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.NetworkPolicy/PutNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkPolicyServer is the server API for NetworkPolicy service.
type NetworkPolicyServer interface {
	CreateNetworkPolicy(context.Context, *NetworkPolicyService) (*ServiceResponse, error)
	GetNetworkPolicy(context.Context, *NetworkPolicyService) (*ServiceResponse, error)
	DeleteNetworkPolicy(context.Context, *NetworkPolicyService) (*ServiceResponse, error)
	PatchNetworkPolicy(context.Context, *NetworkPolicyService) (*ServiceResponse, error)
	PutNetworkPolicy(context.Context, *NetworkPolicyService) (*ServiceResponse, error)
}

// UnimplementedNetworkPolicyServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkPolicyServer struct {
}

func (*UnimplementedNetworkPolicyServer) CreateNetworkPolicy(ctx context.Context, req *NetworkPolicyService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetworkPolicy not implemented")
}
func (*UnimplementedNetworkPolicyServer) GetNetworkPolicy(ctx context.Context, req *NetworkPolicyService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkPolicy not implemented")
}
func (*UnimplementedNetworkPolicyServer) DeleteNetworkPolicy(ctx context.Context, req *NetworkPolicyService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkPolicy not implemented")
}
func (*UnimplementedNetworkPolicyServer) PatchNetworkPolicy(ctx context.Context, req *NetworkPolicyService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchNetworkPolicy not implemented")
}
func (*UnimplementedNetworkPolicyServer) PutNetworkPolicy(ctx context.Context, req *NetworkPolicyService) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutNetworkPolicy not implemented")
}

func RegisterNetworkPolicyServer(s *grpc.Server, srv NetworkPolicyServer) {
	s.RegisterService(&_NetworkPolicy_serviceDesc, srv)
}

func _NetworkPolicy_CreateNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkPolicyService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkPolicyServer).CreateNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetworkPolicy/CreateNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkPolicyServer).CreateNetworkPolicy(ctx, req.(*NetworkPolicyService))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkPolicy_GetNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkPolicyService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkPolicyServer).GetNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetworkPolicy/GetNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkPolicyServer).GetNetworkPolicy(ctx, req.(*NetworkPolicyService))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkPolicy_DeleteNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkPolicyService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkPolicyServer).DeleteNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetworkPolicy/DeleteNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkPolicyServer).DeleteNetworkPolicy(ctx, req.(*NetworkPolicyService))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkPolicy_PatchNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkPolicyService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkPolicyServer).PatchNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetworkPolicy/PatchNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkPolicyServer).PatchNetworkPolicy(ctx, req.(*NetworkPolicyService))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkPolicy_PutNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkPolicyService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkPolicyServer).PutNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetworkPolicy/PutNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkPolicyServer).PutNetworkPolicy(ctx, req.(*NetworkPolicyService))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkPolicy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NetworkPolicy",
	HandlerType: (*NetworkPolicyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetworkPolicy",
			Handler:    _NetworkPolicy_CreateNetworkPolicy_Handler,
		},
		{
			MethodName: "GetNetworkPolicy",
			Handler:    _NetworkPolicy_GetNetworkPolicy_Handler,
		},
		{
			MethodName: "DeleteNetworkPolicy",
			Handler:    _NetworkPolicy_DeleteNetworkPolicy_Handler,
		},
		{
			MethodName: "PatchNetworkPolicy",
			Handler:    _NetworkPolicy_PatchNetworkPolicy_Handler,
		},
		{
			MethodName: "PutNetworkPolicy",
			Handler:    _NetworkPolicy_PutNetworkPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networkpolicy.proto",
}
